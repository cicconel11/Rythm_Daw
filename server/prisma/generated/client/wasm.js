
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  displayName: 'displayName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  password: 'password',
  refreshToken: 'refreshToken',
  isApproved: 'isApproved',
  inventoryHash: 'inventoryHash',
  lastLoginAt: 'lastLoginAt',
  lastInventorySync: 'lastInventorySync',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PluginScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  version: 'version',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  info: 'info',
  lastActiveAt: 'lastActiveAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPluginScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  pluginId: 'pluginId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPresenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  status: 'status',
  expiresAt: 'expiresAt',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  projectId: 'projectId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.CrashReportScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  error: 'error',
  stackTrace: 'stackTrace',
  stack: 'stack',
  breadcrumbs: 'breadcrumbs',
  context: 'context',
  projectId: 'projectId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.WebRtcMetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  metricType: 'metricType',
  value: 'value',
  peerConnectionId: 'peerConnectionId',
  rttMs: 'rttMs',
  jitterMs: 'jitterMs',
  packetLoss: 'packetLoss',
  networkType: 'networkType',
  effectiveType: 'effectiveType',
  downlinkMbps: 'downlinkMbps',
  iceCandidatePairId: 'iceCandidatePairId',
  localCandidateId: 'localCandidateId',
  remoteCandidateId: 'remoteCandidateId',
  timestamp: 'timestamp',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SnapshotScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EntityTagScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  tagId: 'tagId',
  snapshotId: 'snapshotId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  displayName: 'displayName',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  password: 'password',
  refreshToken: 'refreshToken',
  inventoryHash: 'inventoryHash'
};

exports.Prisma.PluginOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  version: 'version'
};

exports.Prisma.DeviceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  info: 'info'
};

exports.Prisma.UserPluginOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  pluginId: 'pluginId'
};

exports.Prisma.UserPresenceOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  status: 'status'
};

exports.Prisma.ActivityLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  projectId: 'projectId',
  metadata: 'metadata',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.CrashReportOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  error: 'error',
  stackTrace: 'stackTrace',
  stack: 'stack',
  breadcrumbs: 'breadcrumbs',
  context: 'context',
  projectId: 'projectId',
  metadata: 'metadata'
};

exports.Prisma.WebRtcMetricOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  projectId: 'projectId',
  metricType: 'metricType',
  peerConnectionId: 'peerConnectionId',
  networkType: 'networkType',
  effectiveType: 'effectiveType',
  iceCandidatePairId: 'iceCandidatePairId',
  localCandidateId: 'localCandidateId',
  remoteCandidateId: 'remoteCandidateId',
  metadata: 'metadata'
};

exports.Prisma.ProjectOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SnapshotOrderByRelevanceFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  name: 'name',
  description: 'description',
  data: 'data'
};

exports.Prisma.TagOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color'
};

exports.Prisma.EntityTagOrderByRelevanceFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  tagId: 'tagId',
  snapshotId: 'snapshotId'
};


exports.Prisma.ModelName = {
  User: 'User',
  Plugin: 'Plugin',
  Device: 'Device',
  UserPlugin: 'UserPlugin',
  UserPresence: 'UserPresence',
  ActivityLog: 'ActivityLog',
  CrashReport: 'CrashReport',
  WebRtcMetric: 'WebRtcMetric',
  Project: 'Project',
  Snapshot: 'Snapshot',
  Tag: 'Tag',
  EntityTag: 'EntityTag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
