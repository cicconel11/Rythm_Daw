generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // or your DB
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  displayName      String?
  bio              String?
  avatarUrl        String?
  password         String
  refreshToken     String?
  isApproved       Boolean        @default(true)
  inventoryHash    String?
  lastLoginAt      DateTime?
  lastInventorySync DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  
  // Relations
  userPlugins      UserPlugin[]
  presence         UserPresence[]
  activityLogs     ActivityLog[]
  crashReports     CrashReport[]
  webRtcMetrics    WebRtcMetric[]
  devices          Device[]
  fromTransfers    FileTransfer[] @relation("FromTransfers")
  toTransfers      FileTransfer[] @relation("ToTransfers")
}

model Plugin {
  id          String       @id @default(cuid())
  name        String
  description String?
  version     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  
  // Relations
  userPlugins UserPlugin[]
}

model Device {
  id           String   @id @default(cuid())
  userId       String
  name         String
  type         String   // e.g., 'DAW_PLUGIN', 'MOBILE', 'WEB'
  info         String?   // Additional device-specific info (stored as JSON string)
  lastActiveAt DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPlugin {
  id        String   @id @default(cuid())
  userId    String
  pluginId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
  plugin    Plugin   @relation(fields: [pluginId], references: [id])
  
  @@unique([userId, pluginId])
}

model UserPresence {
  id         String   @id @default(cuid())
  userId     String
  projectId  String?
  status     String
  expiresAt  DateTime
  lastSeen   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, projectId])
  @@index([expiresAt])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  String
  entityId    String
  projectId   String?
  metadata    String?   // Stored as JSON string
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  
  @@index([userId])
  @@index([projectId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model CrashReport {
  id          String   @id @default(cuid())
  userId      String
  error       String
  stackTrace  String
  stack       String?
  breadcrumbs String?
  context     String?
  projectId   String?
  metadata    String?   // Stored as JSON string
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

model WebRtcMetric {
  id                  String   @id @default(cuid())
  userId              String
  projectId           String?
  metricType          String
  value               Float
  peerConnectionId    String?
  rttMs               Float?
  jitterMs            Float?
  packetLoss          Float?
  networkType         String?
  effectiveType       String?
  downlinkMbps        Float?
  iceCandidatePairId  String?
  localCandidateId    String?
  remoteCandidateId   String?
  timestamp           DateTime
  metadata            String?   // Stored as JSON string
  createdAt           DateTime @default(now())
  
  // Relations
  user                User     @relation(fields: [userId], references: [id])
  
  @@index([userId, projectId, timestamp])
}

model Project {
  id          String     @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  
  // Relations
  snapshots   Snapshot[]
  activityLogs ActivityLog[]
}

model Snapshot {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  data        String   // Stored as JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  project     Project    @relation(fields: [projectId], references: [id])
  tags        EntityTag[] @relation("SnapshotTags")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  color       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  entityTags  EntityTag[]
}

model EntityTag {
  id          String   @id @default(cuid())
  entityType  String
  entityId    String
  tagId       String
  snapshotId  String?
  createdAt   DateTime @default(now())
  
  // Relations
  tag         Tag      @relation(fields: [tagId], references: [id])
  snapshot    Snapshot? @relation("SnapshotTags", fields: [snapshotId], references: [id])
  
  @@unique([entityType, entityId, tagId])
}

model FileTransfer {
  id            String    @id @default(cuid())
  fileName      String
  fileSize      Int
  mimeType      String
  fromUserId    String
  toUserId      String
  status        String    @default("pending")
  progress      Int       @default(0)
  s3Key         String?   // S3 object key for the file
  declineReason String?   // Reason for declining the transfer
  
  // Plugin-specific fields
  projectId     String?   // For project-based file sharing
  peerId        String?   // For WebRTC peer-to-peer transfers
  transferType  String?   @default("s3") // "s3" or "webrtc"
  sha256        String?   // File hash for integrity verification
  chunkSize     Int?      // For chunked transfers
  totalChunks   Int?      // Total number of chunks
  
  // Timestamps
  acceptedAt    DateTime?
  declinedAt    DateTime?
  uploadedAt    DateTime?
  downloadedAt  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  fromUser      User      @relation("FromTransfers", fields: [fromUserId], references: [id])
  toUser        User      @relation("ToTransfers", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([status])
  @@index([projectId])
  @@index([createdAt])
}

enum ActivityType {
  FILE_UPLOAD
  FILE_DOWNLOAD
  FILE_SHARE
  FILE_TRANSFER
  MESSAGE_SENT
  MESSAGE_RECEIVED
  CHAT_SESSION
  FRIEND_REQUEST
  FRIEND_CONNECTED
  PROFILE_UPDATE
  PLUGIN_INSTALL
  PLUGIN_UNINSTALL
  SETTINGS_CHANGE
  LOGIN
  LOGOUT
  PROJECT_SHARE
  VERSION_UPDATE
  COMMENT
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  userId    String
  actorId   String?
  projectId String?
  createdAt DateTime     @default(now())
  payload   Json

  @@index([userId, createdAt])
  @@index([type, createdAt])
}
