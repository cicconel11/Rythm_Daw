[{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/plugin/Source/UI/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/plugin/Source/UI/JuceBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/auth/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/chat/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/device/DevicePage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/device/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/friends/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/landing/LandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/landing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/register/StepOne.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/register/StepTwo.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/register/bio/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/register/credentials/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/scan/ScanPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/scan/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/server/app/(public)/settings/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[710,761],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n));\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,161],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/components/ui/use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":15,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":15,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport type { ToastActionElement, ToastProps } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 1;\nconst TOAST_REMOVE_DELAY = 1000000;\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  action?: ToastActionElement;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"];\n      toast: Partial<ToasterToast>;\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId?: ToasterToast[\"id\"];\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return;\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nfunction toast({ ...props }: Toast) {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":1,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":1,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":50}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Music, Search, MoreVertical, Check, X } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst chatFriends = [\n  {\n    id: 1,\n    username: \"BeatMaker99\",\n    avatar: \"BM\",\n    status: \"online\",\n    lastMessage: \"Check out this new beat!\",\n    time: \"2m\",\n    unread: 2,\n  },\n  {\n    id: 2,\n    username: \"ProducerX\",\n    avatar: \"PX\",\n    status: \"offline\",\n    lastMessage: \"What DAW are you using?\",\n    time: \"1h\",\n    unread: 0,\n  },\n  {\n    id: 3,\n    username: \"SynthWave2024\",\n    avatar: \"SW\",\n    status: \"online\",\n    lastMessage: \"Thanks for the plugin recommendation!\",\n    time: \"3h\",\n    unread: 1,\n  },\n  {\n    id: 4,\n    username: \"DrumMachine\",\n    avatar: \"DM\",\n    status: \"online\",\n    lastMessage: \"Wanna collab on a track?\",\n    time: \"5h\",\n    unread: 0,\n  },\n];\n\nconst chatRequests = [\n  {\n    id: 1,\n    username: \"NewProducer\",\n    avatar: \"NP\",\n    message: \"Hey! Would love to chat about music production\",\n    time: \"1h\",\n  },\n  {\n    id: 2,\n    username: \"VocalMaster\",\n    avatar: \"VM\",\n    message: \"Interested in collaborating on some tracks\",\n    time: \"3h\",\n  },\n];\n\nconst messages = [\n  {\n    id: 1,\n    sender: \"BeatMaker99\",\n    content: \"Hey! Check out this new beat I made\",\n    timestamp: \"10:30 AM\",\n    isOwn: false,\n  },\n  {\n    id: 2,\n    sender: \"You\",\n    content: \"That sounds amazing! What plugins did you use?\",\n    timestamp: \"10:32 AM\",\n    isOwn: true,\n  },\n  {\n    id: 3,\n    sender: \"BeatMaker99\",\n    content: \"Mostly Serum for the lead and some FabFilter for EQ\",\n    timestamp: \"10:33 AM\",\n    isOwn: false,\n  },\n  {\n    id: 4,\n    sender: \"You\",\n    content: \"Nice! I love Serum's wavetables\",\n    timestamp: \"10:35 AM\",\n    isOwn: true,\n  },\n  {\n    id: 5,\n    sender: \"BeatMaker99\",\n    content: \"Same here! The modulation possibilities are endless\",\n    timestamp: \"10:36 AM\",\n    isOwn: false,\n  },\n  {\n    id: 6,\n    sender: \"BeatMaker99\",\n    content: \"Want to collab on something?\",\n    timestamp: \"10:38 AM\",\n    isOwn: false,\n  },\n];\n\nconst friendPlugins = [\n  { name: \"Serum\", type: \"Synthesizer\", version: \"1.365\" },\n  { name: \"FabFilter Pro-Q 3\", type: \"EQ\", version: \"3.24\" },\n  { name: \"Ozone 10\", type: \"Mastering\", version: \"10.0.2\" },\n  { name: \"Massive X\", type: \"Synthesizer\", version: \"1.4.1\" },\n  { name: \"Waves SSL G-Master\", type: \"Compressor\", version: \"14.0\" },\n];\n\nconst userPlugins = [\"Serum\", \"FabFilter Pro-Q 3\", \"Massive X\"];\n\nexport default function Chat() {\n  const [selectedFriend, setSelectedFriend] = useState(chatFriends[0]);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"conversations\");\n\n  const filteredFriends = chatFriends.filter((friend) =>\n    friend.username.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const sendMessage = () => {\n    if (messageInput.trim()) {\n      // Add message logic here\n      console.log(\"Sending message:\", messageInput);\n      setMessageInput(\"\");\n    }\n  };\n\n  const acceptChatRequest = (requestId: number) => {\n    console.log(\"Accepting chat request:\", requestId);\n    // Add logic to accept chat request\n  };\n\n  const declineChatRequest = (requestId: number) => {\n    console.log(\"Declining chat request:\", requestId);\n    // Add logic to decline chat request\n  };\n\n  return (\n    <div className=\"h-screen flex bg-background\">\n      {/* Friends List */}\n      <div className=\"w-80 border-r border-border flex flex-col\">\n        <div className=\"p-4 border-b border-border\">\n          <h2 className=\"text-xl font-bold text-foreground mb-3\">Messages</h2>\n\n          {/* Tab Navigation */}\n          <div className=\"flex gap-2 mb-3\">\n            <Button\n              variant={activeTab === \"conversations\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"conversations\")}\n              className=\"flex-1\"\n            >\n              Conversations\n            </Button>\n            <Button\n              variant={activeTab === \"requests\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"requests\")}\n              className=\"flex-1\"\n            >\n              Requests\n              {chatRequests.length > 0 && (\n                <Badge className=\"ml-1 bg-primary text-primary-foreground\">\n                  {chatRequests.length}\n                </Badge>\n              )}\n            </Button>\n          </div>\n\n          <div className=\"relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search conversations...\"\n              className=\"pl-10\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          {activeTab === \"conversations\" &&\n            filteredFriends.map((friend) => (\n              <div\n                key={friend.id}\n                onClick={() => setSelectedFriend(friend)}\n                className={`p-4 border-b border-border cursor-pointer transition-colors hover:bg-secondary/50 ${\n                  selectedFriend.id === friend.id ? \"bg-secondary\" : \"\"\n                }`}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"relative\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-semibold text-white\">\n                        {friend.avatar}\n                      </span>\n                    </div>\n                    <div\n                      className={\n                        friend.status === \"online\"\n                          ? \"status-online absolute -bottom-1 -right-1\"\n                          : \"status-offline absolute -bottom-1 -right-1\"\n                      }\n                    ></div>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-semibold text-foreground truncate\">\n                        {friend.username}\n                      </h3>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {friend.time}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {friend.lastMessage}\n                    </p>\n                  </div>\n                  {friend.unread > 0 && (\n                    <Badge className=\"bg-primary text-primary-foreground\">\n                      {friend.unread}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ))}\n\n          {activeTab === \"requests\" &&\n            chatRequests.map((request) => (\n              <div key={request.id} className=\"p-4 border-b border-border\">\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-semibold text-white\">\n                      {request.avatar}\n                    </span>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h3 className=\"font-semibold text-foreground\">\n                        {request.username}\n                      </h3>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {request.time}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      {request.message}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => acceptChatRequest(request.id)}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        <Check className=\"w-4 h-4 mr-1\" />\n                        Accept\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => declineChatRequest(request.id)}\n                      >\n                        <X className=\"w-4 h-4 mr-1\" />\n                        Decline\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat Header */}\n        <div className=\"p-4 border-b border-border flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-semibold text-white\">\n                  {selectedFriend.avatar}\n                </span>\n              </div>\n              <div\n                className={\n                  selectedFriend.status === \"online\"\n                    ? \"status-online absolute -bottom-1 -right-1\"\n                    : \"status-offline absolute -bottom-1 -right-1\"\n                }\n              ></div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground\">\n                {selectedFriend.username}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {selectedFriend.status}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button size=\"sm\" variant=\"outline\">\n              <MoreVertical className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.isOwn ? \"justify-end\" : \"justify-start\"}`}\n            >\n              <div\n                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                  message.isOwn\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-secondary text-foreground\"\n                }`}\n              >\n                <p className=\"text-sm\">{message.content}</p>\n                <p className=\"text-xs opacity-70 mt-1\">{message.timestamp}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Message Input */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Type a message...\"\n              value={messageInput}\n              onChange={(e) => setMessageInput(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n              className=\"flex-1\"\n            />\n            <Button\n              onClick={sendMessage}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Friend's Plugins Panel */}\n      <div className=\"w-80 border-l border-border flex flex-col\">\n        <div className=\"p-4 border-b border-border\">\n          <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n            <Music className=\"w-5 h-5\" />\n            {selectedFriend.username}'s Plugins\n          </h3>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n          {friendPlugins.map((plugin, index) => (\n            <div key={index} className=\"plugin-card\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"font-medium text-foreground\">{plugin.name}</h4>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    v{plugin.version}\n                  </Badge>\n                  {userPlugins.includes(plugin.name) && (\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                  )}\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">{plugin.type}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/FileShare.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/Friends.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/History.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/pages/Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":91,"column":13,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":91,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        navyDeep: \"#0D1126\",\n        navy: \"#141B33\",\n        purple: \"#7E4FFF\",\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      animation: {\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"slide-up\": \"slideUp 0.3s ease-out\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n      },\n      keyframes: {\n        fadeIn: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        slideUp: {\n          \"0%\": { opacity: \"0\", transform: \"translateY(20px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ChatPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Card' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardContent' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onNavigate' is defined but never used. Allowed unused args must match /^_/u.","line":80,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Badge } from \"./ui/badge\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport { Send, Search, Music, Info } from \"lucide-react\";\n\ninterface ChatPanelProps {\n  onNavigate?: (path: string) => void;\n}\n\nconst friends = [\n  {\n    id: 1,\n    name: \"BeatMaker99\",\n    avatar: \"BM\",\n    status: \"online\",\n    lastMessage: \"Check out this new beat!\",\n    time: \"2m\",\n    unread: 2,\n  },\n  {\n    id: 2,\n    name: \"ProducerX\",\n    avatar: \"PX\",\n    status: \"offline\",\n    lastMessage: \"What DAW are you using?\",\n    time: \"1h\",\n    unread: 0,\n  },\n  {\n    id: 3,\n    name: \"SynthWave2024\",\n    avatar: \"SW\",\n    status: \"online\",\n    lastMessage: \"Thanks for the plugin tip!\",\n    time: \"3h\",\n    unread: 1,\n  },\n];\n\nconst messages = [\n  {\n    id: 1,\n    sender: \"BeatMaker99\",\n    content: \"Hey! Check out this new beat I made\",\n    time: \"10:30 AM\",\n    isOwn: false,\n  },\n  {\n    id: 2,\n    sender: \"You\",\n    content: \"That sounds amazing! What plugins did you use?\",\n    time: \"10:32 AM\",\n    isOwn: true,\n  },\n  {\n    id: 3,\n    sender: \"BeatMaker99\",\n    content: \"Mostly Serum for the lead and some FabFilter for EQ\",\n    time: \"10:33 AM\",\n    isOwn: false,\n  },\n];\n\nconst friendPlugins = [\n  { id: \"serum\", name: \"Serum\", version: \"1.365\", compatible: true },\n  {\n    id: \"fabfilter\",\n    name: \"FabFilter Pro-Q 3\",\n    version: \"3.24\",\n    compatible: true,\n  },\n  { id: \"massive\", name: \"Massive X\", version: \"1.4.1\", compatible: false },\n];\n\nconst currentUserPlugins = [\"serum\", \"fabfilter\"]; // Mock user's plugins\n\nexport function ChatPanel({ onNavigate }: ChatPanelProps) {\n  const [selectedFriend, setSelectedFriend] = useState(friends[0]);\n  const [message, setMessage] = useState(\"\");\n  const [activeTab, setActiveTab] = useState<\"plugins\" | \"details\">(\"plugins\");\n\n  const sendMessage = () => {\n    if (message.trim()) {\n      console.log(\"Sending message:\", message);\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0D1126] bg-gradient-to-br from-[#0D1126] via-[#141B33] to-[#0D1126] flex\">\n      {/* Friends Sidebar */}\n      <div className=\"w-80 border-r border-gray-700 bg-[#141B33]\">\n        <div className=\"p-4 border-b border-gray-700\">\n          <h2 className=\"text-xl font-bold text-white font-['Inter'] mb-3\">\n            Messages\n          </h2>\n          <div className=\"relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-3 text-gray-400\" />\n            <Input\n              placeholder=\"Search conversations...\"\n              className=\"pl-10 bg-[#0D1126] border-gray-600 text-white\"\n            />\n          </div>\n        </div>\n        <ScrollArea className=\"h-[calc(100vh-120px)]\">\n          <div className=\"p-2\">\n            {friends.map((friend) => (\n              <div\n                key={friend.id}\n                onClick={() => setSelectedFriend(friend)}\n                className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                  selectedFriend.id === friend.id\n                    ? \"bg-[#7E4FFF]/20\"\n                    : \"hover:bg-gray-700/50\"\n                }`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"relative\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-[#7E4FFF] to-[#6B3FE6] rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-bold text-sm\">\n                        {friend.avatar}\n                      </span>\n                    </div>\n                    <div\n                      className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-[#141B33] ${\n                        friend.status === \"online\"\n                          ? \"bg-green-400\"\n                          : \"bg-gray-500\"\n                      }`}\n                    ></div>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-semibold text-white truncate\">\n                        {friend.name}\n                      </h3>\n                      <span className=\"text-xs text-gray-400\">\n                        {friend.time}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-gray-400 truncate\">\n                      {friend.lastMessage}\n                    </p>\n                  </div>\n                  {friend.unread > 0 && (\n                    <Badge className=\"bg-[#7E4FFF] text-white\">\n                      {friend.unread}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat Header */}\n        <div className=\"p-4 border-b border-gray-700 bg-[#141B33]\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-[#7E4FFF] to-[#6B3FE6] rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">\n                  {selectedFriend.avatar}\n                </span>\n              </div>\n              <div\n                className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-[#141B33] ${\n                  selectedFriend.status === \"online\"\n                    ? \"bg-green-400\"\n                    : \"bg-gray-500\"\n                }`}\n              ></div>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-white\">\n                {selectedFriend.name}\n              </h3>\n              <p className=\"text-sm text-gray-400\">{selectedFriend.status}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Messages */}\n        <ScrollArea className=\"flex-1 p-4\">\n          <div className=\"space-y-4\">\n            {messages.map((msg) => (\n              <div\n                key={msg.id}\n                className={`flex ${msg.isOwn ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                    msg.isOwn\n                      ? \"bg-[#7E4FFF] text-white\"\n                      : \"bg-gray-700 text-white\"\n                  }`}\n                >\n                  <p className=\"text-sm\">{msg.content}</p>\n                  <p className=\"text-xs opacity-70 mt-1\">{msg.time}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n\n        {/* Message Input */}\n        <div className=\"p-4 border-t border-gray-700 bg-[#141B33]\">\n          <div className=\"flex space-x-2\">\n            <Input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n              placeholder=\"Type a message...\"\n              className=\"flex-1 bg-[#0D1126] border-gray-600 text-white\"\n            />\n            <Button\n              onClick={sendMessage}\n              className=\"bg-[#7E4FFF] hover:bg-[#6B3FE6]\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Panel */}\n      <div className=\"w-80 border-l border-gray-700 bg-[#141B33]\">\n        <div className=\"p-4 border-b border-gray-700\">\n          <div className=\"flex space-x-2\">\n            <Button\n              variant={activeTab === \"plugins\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"plugins\")}\n              className=\"flex-1\"\n            >\n              <Music className=\"w-4 h-4 mr-1\" />\n              Plugins\n            </Button>\n            <Button\n              variant={activeTab === \"details\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"details\")}\n              className=\"flex-1\"\n            >\n              <Info className=\"w-4 h-4 mr-1\" />\n              Details\n            </Button>\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-[calc(100vh-120px)] p-4\">\n          {activeTab === \"plugins\" && (\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-white\">\n                {selectedFriend.name}'s Plugins\n              </h3>\n              {friendPlugins.map((plugin, index) => (\n                <div\n                  key={index}\n                  className=\"bg-[#0D1126] rounded-lg p-3 border border-gray-700\"\n                >\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <h4 className=\"font-medium text-white text-sm\">\n                      {plugin.name}\n                    </h4>\n                    <div className=\"flex items-center gap-2\">\n                      {currentUserPlugins.includes(plugin.id) && (\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-gray-400\">v{plugin.version}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {plugin.compatible ? \"Compatible\" : \"Not installed\"}\n                  </p>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {activeTab === \"details\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-semibold text-white\">Profile</h3>\n              <div className=\"bg-[#0D1126] rounded-lg p-4 border border-gray-700\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-[#7E4FFF] to-[#6B3FE6] rounded-full mx-auto flex items-center justify-center mb-2\">\n                    <span className=\"text-white font-bold\">\n                      {selectedFriend.avatar}\n                    </span>\n                  </div>\n                  <h4 className=\"font-semibold text-white\">\n                    {selectedFriend.name}\n                  </h4>\n                  <p className=\"text-sm text-gray-400\">Producer</p>\n                </div>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Status:</span>\n                    <span\n                      className={\n                        selectedFriend.status === \"online\"\n                          ? \"text-green-400\"\n                          : \"text-gray-400\"\n                      }\n                    >\n                      {selectedFriend.status}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Mutual friends:</span>\n                    <span className=\"text-white\">5</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ConfettiBurst.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onNavigate' is defined but never used. Allowed unused args must match /^_/u.","line":43,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Badge } from \"./ui/badge\";\nimport { Skeleton } from \"./ui/skeleton\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport { Activity, Cpu, Users, Folder } from \"lucide-react\";\n\ninterface DashboardProps {\n  onNavigate?: (path: string) => void;\n}\n\nconst stats = [\n  {\n    label: \"Active Plugins\",\n    value: \"12\",\n    icon: Activity,\n    color: \"text-[#7E4FFF]\",\n  },\n  { label: \"Projects\", value: \"8\", icon: Folder, color: \"text-blue-400\" },\n  { label: \"CPU Usage\", value: \"45%\", icon: Cpu, color: \"text-green-400\" },\n  { label: \"Collaborators\", value: \"3\", icon: Users, color: \"text-orange-400\" },\n];\n\nconst plugins = [\n  { name: \"Serum\", status: \"active\", cpu: \"12%\", type: \"Synthesizer\" },\n  { name: \"FabFilter Pro-Q 3\", status: \"active\", cpu: \"8%\", type: \"EQ\" },\n  { name: \"Massive X\", status: \"inactive\", cpu: \"0%\", type: \"Synthesizer\" },\n  { name: \"Ozone 10\", status: \"inactive\", cpu: \"0%\", type: \"Mastering\" },\n  { name: \"Battery 4\", status: \"active\", cpu: \"15%\", type: \"Drums\" },\n];\n\nconst activities = [\n  { action: \"Plugin scan completed\", time: \"2 minutes ago\", type: \"system\" },\n  { action: \"Serum preset shared\", time: \"15 minutes ago\", type: \"share\" },\n  { action: \"Project exported\", time: \"1 hour ago\", type: \"export\" },\n  {\n    action: \"Friend request from BeatMaker99\",\n    time: \"2 hours ago\",\n    type: \"social\",\n  },\n];\n\nexport function Dashboard({ onNavigate }: DashboardProps) {\n  return (\n    <div className=\"min-h-screen bg-[#0D1126] bg-gradient-to-br from-[#0D1126] via-[#141B33] to-[#0D1126] p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white font-['Inter'] mb-2\">\n            Dashboard\n          </h1>\n          <p className=\"text-gray-400\">\n            Welcome back to your music production hub\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {stats.map((stat, index) => (\n            <Card\n              key={index}\n              className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\"\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-gray-400\">{stat.label}</p>\n                    <p className={`text-2xl font-bold ${stat.color}`}>\n                      {stat.value}\n                    </p>\n                  </div>\n                  <stat.icon className={`w-8 h-8 ${stat.color}`} />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card className=\"lg:col-span-2 bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-xl text-white font-['Inter']\">\n                Plugins\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[300px]\">\n                <div className=\"space-y-3\">\n                  {plugins.map((plugin, index) => (\n                    <div\n                      key={index}\n                      className=\"bg-[#0D1126] rounded-lg p-4 border border-gray-700\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div\n                            className={`w-3 h-3 rounded-full ${plugin.status === \"active\" ? \"bg-green-400\" : \"bg-gray-500\"}`}\n                          ></div>\n                          <div>\n                            <h3 className=\"font-semibold text-white\">\n                              {plugin.name}\n                            </h3>\n                            <p className=\"text-sm text-gray-400\">\n                              {plugin.type}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge\n                            variant={\n                              plugin.status === \"active\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                          >\n                            {plugin.status}\n                          </Badge>\n                          <p className=\"text-sm text-gray-400 mt-1\">\n                            {plugin.cpu}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-xl text-white font-['Inter']\">\n                Recent Activity\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[300px]\">\n                <div className=\"space-y-4\">\n                  {activities.map((activity, index) => (\n                    <div key={index} className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-[#7E4FFF] rounded-full mt-2 flex-shrink-0\"></div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-white\">\n                          {activity.action}\n                        </p>\n                        <p className=\"text-xs text-gray-400\">{activity.time}</p>\n                      </div>\n                    </div>\n                  ))}\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-4 w-full bg-gray-700\" />\n                    <Skeleton className=\"h-3 w-1/2 bg-gray-700\" />\n                  </div>\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/DeviceConnect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/FriendsPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardHeader' is defined but never used.","line":2,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardTitle' is defined but never used.","line":2,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onNavigate' is defined but never used. Allowed unused args must match /^_/u.","line":77,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Badge } from \"./ui/badge\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"./ui/dialog\";\nimport { Search, UserPlus, MessageSquare, Music, Users } from \"lucide-react\";\n\ninterface FriendsPanelProps {\n  onNavigate?: (path: string) => void;\n}\n\nconst friends = [\n  {\n    id: 1,\n    name: \"BeatMaker99\",\n    avatar: \"BM\",\n    status: \"online\",\n    plugins: [\"Serum\", \"Pro-Q 3\"],\n    mutualFriends: 5,\n  },\n  {\n    id: 2,\n    name: \"ProducerX\",\n    avatar: \"PX\",\n    status: \"offline\",\n    plugins: [\"Massive X\", \"Ozone\"],\n    mutualFriends: 12,\n  },\n  {\n    id: 3,\n    name: \"SynthWave2024\",\n    avatar: \"SW\",\n    status: \"online\",\n    plugins: [\"Sylenth1\", \"Diva\"],\n    mutualFriends: 8,\n  },\n  {\n    id: 4,\n    name: \"DrumMachine\",\n    avatar: \"DM\",\n    status: \"online\",\n    plugins: [\"Battery 4\", \"Superior\"],\n    mutualFriends: 15,\n  },\n];\n\nconst pendingRequests = [\n  { id: 1, name: \"NewProducer\", avatar: \"NP\", mutualFriends: 2 },\n  { id: 2, name: \"VocalMaster\", avatar: \"VM\", mutualFriends: 1 },\n];\n\nconst suggested = [\n  {\n    id: 1,\n    name: \"ElectroWiz\",\n    avatar: \"EW\",\n    mutualFriends: 8,\n    reason: \"Uses similar plugins\",\n  },\n  {\n    id: 2,\n    name: \"BassMaster\",\n    avatar: \"BM\",\n    mutualFriends: 3,\n    reason: \"Friend of ProducerX\",\n  },\n];\n\nexport function FriendsPanel({ onNavigate }: FriendsPanelProps) {\n  const [activeTab, setActiveTab] = useState<\n    \"all\" | \"online\" | \"pending\" | \"suggested\"\n  >(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [addFriendInput, setAddFriendInput] = useState(\"\");\n\n  const handleAddFriend = () => {\n    if (addFriendInput.trim()) {\n      console.log(\"Adding friend:\", addFriendInput);\n      setAddFriendInput(\"\");\n    }\n  };\n\n  const filteredFriends = friends.filter(\n    (friend) =>\n      friend.name.toLowerCase().includes(searchTerm.toLowerCase()) &&\n      (activeTab === \"all\" ||\n        (activeTab === \"online\" && friend.status === \"online\")),\n  );\n\n  const getTabContent = () => {\n    switch (activeTab) {\n      case \"pending\":\n        return pendingRequests;\n      case \"suggested\":\n        return suggested;\n      default:\n        return filteredFriends;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#0D1126] bg-gradient-to-br from-[#0D1126] via-[#141B33] to-[#0D1126] p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-white font-['Inter'] mb-2\">\n              Friends\n            </h1>\n            <p className=\"text-gray-400\">Connect with fellow music producers</p>\n          </div>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button className=\"bg-[#7E4FFF] hover:bg-[#6B3FE6]\">\n                <UserPlus className=\"w-4 h-4 mr-2\" />\n                Add Friend\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-[#141B33] border-gray-700\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Add Friend</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <Input\n                  placeholder=\"Enter username or email...\"\n                  value={addFriendInput}\n                  onChange={(e) => setAddFriendInput(e.target.value)}\n                  className=\"bg-[#0D1126] border-gray-600 text-white\"\n                />\n                <Button\n                  onClick={handleAddFriend}\n                  className=\"w-full bg-[#7E4FFF] hover:bg-[#6B3FE6]\"\n                >\n                  Send Friend Request\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-400\">Total Friends</p>\n                  <p className=\"text-2xl font-bold text-[#7E4FFF]\">\n                    {friends.length}\n                  </p>\n                </div>\n                <Users className=\"w-8 h-8 text-[#7E4FFF]\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-400\">Online Now</p>\n                  <p className=\"text-2xl font-bold text-green-400\">\n                    {friends.filter((f) => f.status === \"online\").length}\n                  </p>\n                </div>\n                <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-400\">Pending</p>\n                  <p className=\"text-2xl font-bold text-orange-400\">\n                    {pendingRequests.length}\n                  </p>\n                </div>\n                <UserPlus className=\"w-8 h-8 text-orange-400\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex space-x-2\">\n            {[\n              { key: \"all\", label: \"All\" },\n              { key: \"online\", label: \"Online\" },\n              { key: \"pending\", label: `Pending (${pendingRequests.length})` },\n              { key: \"suggested\", label: \"Suggested\" },\n            ].map((tab) => (\n              <Button\n                key={tab.key}\n                variant={activeTab === tab.key ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setActiveTab(tab.key as unknown)}\n                className={\n                  activeTab === tab.key ? \"bg-[#7E4FFF] hover:bg-[#6B3FE6]\" : \"\"\n                }\n              >\n                {tab.label}\n              </Button>\n            ))}\n          </div>\n          <div className=\"flex-1 relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-3 text-gray-400\" />\n            <Input\n              placeholder=\"Search friends...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 bg-[#141B33] border-gray-600 text-white\"\n            />\n          </div>\n        </div>\n\n        <Card className=\"bg-gradient-to-br from-[#141B33] to-[#1A2142] border-gray-700\">\n          <CardContent className=\"p-6\">\n            <ScrollArea className=\"h-[500px]\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {getTabContent().map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"bg-[#0D1126] rounded-lg p-4 border border-gray-700 group hover:border-[#7E4FFF]/50 transition-colors\"\n                  >\n                    <div className=\"flex items-start space-x-3 mb-3\">\n                      <div className=\"relative\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-[#7E4FFF] to-[#6B3FE6] rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-bold text-sm\">\n                            {item.avatar}\n                          </span>\n                        </div>\n                        {\"status\" in item && (\n                          <div\n                            className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-[#0D1126] ${\n                              item.status === \"online\"\n                                ? \"bg-green-400\"\n                                : \"bg-gray-500\"\n                            }`}\n                          ></div>\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-white\">\n                          {item.name}\n                        </h3>\n                        {\"status\" in item && (\n                          <p\n                            className={`text-sm ${item.status === \"online\" ? \"text-green-400\" : \"text-gray-400\"}`}\n                          >\n                            {item.status}\n                          </p>\n                        )}\n                        {\"reason\" in item && (\n                          <p className=\"text-sm text-gray-400\">{item.reason}</p>\n                        )}\n                        <p className=\"text-xs text-gray-500\">\n                          {item.mutualFriends} mutual friends\n                        </p>\n                      </div>\n                    </div>\n\n                    {\"plugins\" in item && (\n                      <div className=\"mb-3\">\n                        <p className=\"text-xs text-gray-400 mb-1\">\n                          Recent plugins:\n                        </p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {item.plugins.slice(0, 2).map((plugin, idx) => (\n                            <Badge\n                              key={idx}\n                              variant=\"outline\"\n                              className=\"text-xs\"\n                            >\n                              {plugin}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      {activeTab === \"pending\" ? (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            className=\"flex-1 bg-green-600 hover:bg-green-700 text-white\"\n                          >\n                            Accept\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                          >\n                            Decline\n                          </Button>\n                        </>\n                      ) : activeTab === \"suggested\" ? (\n                        <Button\n                          size=\"sm\"\n                          className=\"flex-1 bg-[#7E4FFF] hover:bg-[#6B3FE6]\"\n                        >\n                          <UserPlus className=\"w-3 h-3 mr-1\" />\n                          Add\n                        </Button>\n                      ) : (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                          >\n                            <MessageSquare className=\"w-3 h-3 mr-1\" />\n                            Chat\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1\"\n                          >\n                            <Music className=\"w-3 h-3 mr-1\" />\n                            Plugins\n                          </Button>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/LandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/LoginPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/OnboardScan.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/PluginList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/RegisterBio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/RegisterCredentials.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/SettingsAccount.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SettingsIcon' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Button } from \"./ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Textarea } from \"./ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"./ui/avatar\";\nimport { Switch } from \"./ui/switch\";\nimport { Progress } from \"./ui/progress\";\nimport { Badge } from \"./ui/badge\";\nimport {\n  User,\n  Upload,\n  RefreshCw,\n  Settings as SettingsIcon,\n} from \"lucide-react\";\nimport { PluginList } from \"./PluginList\";\n\ninterface SettingsAccountProps {\n  onUpdateAccount: (data: {\n    displayName: string;\n    email: string;\n    bio: string;\n  }) => void;\n  onAvatarChange: (file: File) => void;\n  onRescanPlugins: () => void;\n}\n\nexport function SettingsAccount({\n  onUpdateAccount,\n  onAvatarChange,\n  onRescanPlugins,\n}: SettingsAccountProps) {\n  const [displayName, setDisplayName] = useState(\"DJ Producer\");\n  const [email] = useState(\"dj@producer.com\");\n  const [bio, setBio] = useState(\n    \"Making beats and collaborating with artists worldwide.\",\n  );\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [showInactive, setShowInactive] = useState(false);\n  const [isDirty, setIsDirty] = useState(false);\n\n  const handleInputChange = (field: string, value: string) => {\n    setIsDirty(true);\n    if (field === \"displayName\") setDisplayName(value);\n    if (field === \"bio\") setBio(value);\n  };\n\n  const handleSave = (e: React.FormEvent) => {\n    e.preventDefault();\n    onUpdateAccount({ displayName, email, bio });\n    setIsDirty(false);\n  };\n\n  const handleRescan = () => {\n    setIsScanning(true);\n    setScanProgress(0);\n\n    const interval = setInterval(() => {\n      setScanProgress((prev) => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setIsScanning(false);\n          onRescanPlugins();\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      onAvatarChange(file);\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 animate-fade-in\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Settings</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your account and plugin library\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Account Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-card-foreground flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Account Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSave} className=\"space-y-6\">\n                {/* Avatar Upload */}\n                <div className=\"flex items-center gap-4\">\n                  <Avatar className=\"w-20 h-20\">\n                    <AvatarImage src=\"\" />\n                    <AvatarFallback className=\"bg-primary text-primary-foreground text-xl\">\n                      DJ\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <Label\n                      htmlFor=\"avatar\"\n                      className=\"text-muted-foreground cursor-pointer\"\n                    >\n                      <div className=\"flex items-center gap-2 px-4 py-2 bg-background border border-border rounded-lg hover:bg-secondary transition-colors\">\n                        <Upload className=\"w-4 h-4\" />\n                        Upload Avatar\n                      </div>\n                    </Label>\n                    <input\n                      id=\"avatar\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleAvatarUpload}\n                    />\n                    <p className=\"text-xs text-muted-foreground/70 mt-1\">\n                      Max 2MB, JPG or PNG\n                    </p>\n                  </div>\n                </div>\n\n                {/* Display Name */}\n                <div className=\"space-y-2\">\n                  <Label\n                    htmlFor=\"displayName\"\n                    className=\"text-muted-foreground\"\n                  >\n                    Display Name\n                  </Label>\n                  <Input\n                    id=\"displayName\"\n                    value={displayName}\n                    onChange={(e) =>\n                      handleInputChange(\"displayName\", e.target.value)\n                    }\n                    className=\"bg-background border-border text-foreground placeholder-muted-foreground\"\n                    placeholder=\"Enter your display name\"\n                  />\n                </div>\n\n                {/* Email */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-muted-foreground\">\n                    Email\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={email}\n                    disabled\n                    className=\"bg-muted border-border text-muted-foreground cursor-not-allowed\"\n                  />\n                  <p className=\"text-xs text-muted-foreground/70\">\n                    Email cannot be changed\n                  </p>\n                </div>\n\n                {/* Bio */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bio\" className=\"text-muted-foreground\">\n                    Bio\n                  </Label>\n                  <Textarea\n                    id=\"bio\"\n                    value={bio}\n                    onChange={(e) => handleInputChange(\"bio\", e.target.value)}\n                    className=\"bg-background border-border text-foreground placeholder-muted-foreground min-h-[100px]\"\n                    placeholder=\"Tell us about yourself...\"\n                    maxLength={140}\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-muted-foreground/70\">\n                      {bio.length}/140 characters\n                    </span>\n                    {bio.length > 120 && (\n                      <span className=\"text-xs text-orange-400\">\n                        Approaching limit\n                      </span>\n                    )}\n                  </div>\n                </div>\n\n                {/* Save Button */}\n                <Button\n                  type=\"submit\"\n                  disabled={!isDirty}\n                  className=\"w-full disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  Save Changes\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Plugin Inventory */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-card-foreground flex items-center gap-2\">\n                <RefreshCw className=\"w-5 h-5\" />\n                Plugin Inventory\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Rescan Section */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground\">\n                      Plugin Library\n                    </h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Scan for new and updated plugins\n                    </p>\n                  </div>\n                  <Button\n                    onClick={handleRescan}\n                    disabled={isScanning}\n                    variant=\"outline\"\n                    className=\"border-border text-foreground hover:bg-primary/10\"\n                  >\n                    <RefreshCw\n                      className={`w-4 h-4 mr-2 ${isScanning ? \"animate-spin\" : \"\"}`}\n                    />\n                    {isScanning ? \"Scanning...\" : \"Re-scan\"}\n                  </Button>\n                </div>\n\n                {/* Progress Bar */}\n                {isScanning && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">\n                        Scanning plugins...\n                      </span>\n                      <span className=\"text-primary\">{scanProgress}%</span>\n                    </div>\n                    <Progress value={scanProgress} className=\"h-2\" />\n                  </div>\n                )}\n              </div>\n\n              {/* Show Inactive Toggle */}\n              <div className=\"flex items-center justify-between py-3 border-t border-border\">\n                <div>\n                  <Label\n                    htmlFor=\"show-inactive\"\n                    className=\"text-muted-foreground font-medium\"\n                  >\n                    Show inactive plugins\n                  </Label>\n                  <p className=\"text-xs text-muted-foreground/70\">\n                    Display plugins that are not currently loaded\n                  </p>\n                </div>\n                <Switch\n                  id=\"show-inactive\"\n                  checked={showInactive}\n                  onCheckedChange={setShowInactive}\n                />\n              </div>\n\n              {/* Plugin List */}\n              <PluginList showInactive={showInactive} />\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/design/theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/hooks/useChatStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/hooks/usePluginsStore.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/ui-kit/src/utils/confetti.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/lovable-src/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":214,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":214,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { Dashboard, ChatPanel, FriendsPanel, Settings } from \"ui-kit\";\nimport {\n  useTransfers,\n  useFileUpload,\n  useFileTransferWS,\n} from \"../../../shared/hooks\";\nimport JuceBridge from \"./JuceBridge\";\nimport {\n  Home,\n  MessageCircle,\n  Users,\n  Settings as SettingsIcon,\n  Share,\n  History,\n} from \"lucide-react\";\nimport { useTransfers } from \"../../../../shared/hooks/useTransfers\";\nimport { useFileUpload } from \"../../../../shared/hooks/useFileUpload\";\nimport { useTransferActions } from \"../../../../shared/hooks/useTransferActions\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../../../../shared/lib/api\";\nimport { ActivitySchema } from \"../../../../shared/types\";\nimport { z } from \"zod\";\n\nconst ActivityListSchema = z.array(ActivitySchema);\n\nfunction PluginFiles() {\n  const { data: transfers, isLoading } = useTransfers();\n  const upload = useFileUpload();\n  const { accept, decline, download } = useTransferActions();\n  const [file, setFile] = useState<File | null>(null);\n  const [toUserId, setToUserId] = useState(\"\");\n\n  const handleUpload = () => {\n    if (file && toUserId) {\n      upload.mutate({\n        file,\n        toUserId,\n        fileName: file.name,\n        mimeType: file.type,\n        size: file.size,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>File Transfers</h2>\n      <div>\n        <input\n          type=\"file\"\n          onChange={(e) => setFile(e.target.files?.[0] || null)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Recipient User ID\"\n          value={toUserId}\n          onChange={(e) => setToUserId(e.target.value)}\n        />\n        <button onClick={handleUpload} disabled={upload.status === \"pending\"}>\n          Upload\n        </button>\n      </div>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <ul>\n          {transfers?.map((t) => (\n            <li key={t.id}>\n              <span>\n                {t.fileName} ({t.status})\n              </span>\n              <button\n                onClick={() => accept.mutate(t.id)}\n                disabled={t.status !== \"pending\"}\n              >\n                Accept\n              </button>\n              <button\n                onClick={() => decline.mutate(t.id)}\n                disabled={t.status !== \"pending\"}\n              >\n                Decline\n              </button>\n              <button\n                onClick={() => download.mutate(t.id)}\n                disabled={t.status !== \"accepted\"}\n              >\n                Download\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nfunction PluginHistory() {\n  const { data, isLoading, error } = useQuery({\n    queryKey: [\"activity\"],\n    queryFn: async () => {\n      const res = await api.get(\"/activity\");\n      return ActivityListSchema.parse(res);\n    },\n  });\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error loading activity</div>;\n  return (\n    <div>\n      <h2>Activity Timeline</h2>\n      <ul>\n        {data?.map((item) => (\n          <li key={item.id}>\n            <span>\n              {item.timestamp} — {item.type}: {item.description}\n            </span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport function App() {\n  useFileTransferWS(); // Integrate WS\n  const [activeView, setActiveView] = useState(\"dashboard\");\n\n  const menuItems = [\n    { id: \"dashboard\", icon: Home, label: \"Dashboard\" },\n    { id: \"files\", icon: Share, label: \"Files\" },\n    { id: \"history\", icon: History, label: \"History\" },\n    { id: \"friends\", icon: Users, label: \"Friends\" },\n    { id: \"chat\", icon: MessageCircle, label: \"Chat\" },\n    { id: \"settings\", icon: SettingsIcon, label: \"Settings\" },\n  ];\n\n  const renderView = () => {\n    switch (activeView) {\n      case \"dashboard\":\n        return <Dashboard />;\n      case \"chat\":\n        return <ChatPanel />;\n      case \"friends\":\n        return <FriendsPanel />;\n      case \"settings\":\n        return (\n          <Settings\n            onUpdateAccount={(data) => console.log(\"Update account:\", data)}\n            onRescanPlugins={() => console.log(\"Rescan plugins\")}\n            onDownloadPlugin={() => console.log(\"Download plugin\")}\n          />\n        );\n      case \"files\":\n        return <PluginFiles />;\n      case \"history\":\n        return <PluginHistory />;\n      default:\n        return <Dashboard />;\n    }\n  };\n\n  React.useEffect(() => {\n    // Initialize JUCE bridge\n    JuceBridge.send(\"plugin-loaded\", {});\n\n    // Listen for plugin events\n    JuceBridge.on(\"parameter-changed\", (data) => {\n      console.log(\"Parameter changed:\", data);\n    });\n\n    return () => {\n      JuceBridge.send(\"plugin-unloaded\", {});\n    };\n  }, []);\n\n  return (\n    <div className=\"h-screen flex bg-[#0D1126] max-w-[900px] mx-auto\">\n      {/* Side Navigation */}\n      <div className=\"w-16 bg-[#141B33] border-r border-gray-700 flex flex-col items-center py-4\">\n        <div className=\"w-10 h-10 bg-gradient-to-br from-[#7E4FFF] to-[#6B3FE6] rounded-lg flex items-center justify-center mb-8\">\n          <span className=\"text-white font-bold font-['JetBrains_Mono']\">\n            R\n          </span>\n        </div>\n\n        <nav className=\"flex flex-col gap-2\">\n          {menuItems.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => setActiveView(item.id)}\n              className={`w-12 h-12 rounded-lg flex items-center justify-center transition-colors ${\n                activeView === item.id\n                  ? \"bg-[#7E4FFF] text-white\"\n                  : \"text-gray-400 hover:text-white hover:bg-[#1A2142]\"\n              }`}\n              title={item.label}\n            >\n              <item.icon className=\"w-5 h-5\" />\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-hidden\">{renderView()}</div>\n    </div>\n  );\n}\n\nexport default App;\n\n// Wire JuceBridge for events\nJuceBridge.on(\"ws-event\", (event) => {\n  // Dispatch to hooks or store\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/JuceBridge.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Pages/Friends.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Tabs/AccountTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Tabs/ChatTab.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport { useState } from \"react\";\nimport { useChatThreads } from \"../../../../shared/hooks/useChatThreads\";\nimport { useChatMessages } from \"../../../../shared/hooks/useChatMessages\";\nimport { useSendMessage } from \"../../../../shared/hooks/useSendMessage\";\n\nexport default function ChatTab() {\n  const { data: threads } = useChatThreads();\n  const [activeThread, setActiveThread] = useState<string | null>(null);\n  const { data: messages } = useChatMessages(activeThread || \"\");\n  const sendMessage = useSendMessage();\n\n  return (\n    <div style={{ display: \"flex\", height: \"100%\" }}>\n      <aside style={{ width: 250, borderRight: \"1px solid #ccc\" }}>\n        <ul>\n          {threads?.map((t) => (\n            <li key={t.id}>\n              <button\n                onClick={() => setActiveThread(t.id)}\n                style={{\n                  fontWeight: t.id === activeThread ? \"bold\" : \"normal\",\n                }}\n              >\n                {t.participants.join(\", \")}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </aside>\n      <main style={{ flex: 1, display: \"flex\", flexDirection: \"column\" }}>\n        <div style={{ flex: 1, overflowY: \"auto\" }}>\n          <ul>\n            {messages?.map((m) => (\n              <li key={m.id}>\n                <b>{m.sender}:</b> {m.content}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            const form = e.target as HTMLFormElement;\n            const input = form.elements.namedItem(\"msg\") as HTMLInputElement;\n            if (input.value) {\n              sendMessage.mutate({\n                threadId: activeThread || \"\",\n                content: input.value,\n              });\n              input.value = \"\";\n            }\n          }}\n        >\n          <input name=\"msg\" autoComplete=\"off\" style={{ width: \"80%\" }} />\n          <button type=\"submit\">Send</button>\n        </form>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Tabs/FilesTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'transfers' is assigned a value but never used.","line":11,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":11,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'downloadUrl' is assigned a value but never used.","line":11,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'accept' is assigned a value but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'decline' is assigned a value but never used.","line":13,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'download' is assigned a value but never used.","line":13,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setFile' is assigned a value but never used.","line":14,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setToUserId' is assigned a value but never used.","line":15,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'handleUpload' is assigned a value but never used.","line":17,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { useStore } from \"@store\";\nimport { Button } from \"../components/Button\";\nimport { useTransfers } from \"../../../../shared/hooks/useTransfers\";\nimport { useFileUpload } from \"../../../../shared/hooks/useFileUpload\";\nimport { useTransferActions } from \"../../../../shared/hooks/useTransferActions\";\nimport { useState } from \"react\";\n\nconst FilesTab: React.FC = () => {\n  const { uploads } = useStore();\n  const { data: transfers, isLoading, downloadUrl } = useTransfers();\n  const upload = useFileUpload();\n  const { accept, decline, download } = useTransferActions();\n  const [file, setFile] = useState<File | null>(null);\n  const [toUserId, setToUserId] = useState(\"\");\n\n  const handleUpload = () => {\n    if (file && toUserId) {\n      upload.mutate({\n        file,\n        toUserId,\n        fileName: file.name,\n        mimeType: file.type,\n        size: file.size,\n      });\n    }\n  };\n\n  return (\n    <div className=\"flex h-full bg-background rounded-br-xl overflow-hidden relative shadow-inner-md\">\n      {/* Split Layout */}\n      <div className=\"flex-1 border-r border-gray-700 p-4 overflow-y-auto\">\n        <h3 className=\"text-lg font-medium mb-4 text-text_primary\">\n          Upload Queue\n        </h3>\n        <div className=\"space-y-3\">\n          {uploads.map((upload) => (\n            <div\n              key={upload.id}\n              className=\"bg-card rounded-lg p-3 shadow-inner-md border border-gray-700\"\n            >\n              <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"text-sm text-text_primary truncate flex-1\">\n                  {upload.name}\n                </span>\n                <span className=\"text-xs text-text_secondary\">\n                  {upload.status === \"uploading\"\n                    ? `${upload.progress}%`\n                    : \"Done\"}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-800 rounded-full h-1.5 overflow-hidden\">\n                <div\n                  className=\"bg-gradient-to-r from-purple-400 to-purple-700 h-1.5 rounded-full transition-all duration-300 ease-out\"\n                  style={{ width: `${upload.progress}%` }}\n                />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex-1 p-4 overflow-y-auto\">\n        <h3 className=\"text-lg font-medium mb-4 text-text_primary\">\n          Received Files\n        </h3>\n        <div className=\"space-y-3\">\n          {[\n            { id: 1, name: \"Kick_Stem.wav\", size: \"12.5 MB\" },\n            { id: 2, name: \"Bass_Stem.wav\", size: \"14.2 MB\" },\n            { id: 3, name: \"Vocal_Stem.wav\", size: \"18.7 MB\" },\n          ].map((file) => (\n            <div\n              key={file.id}\n              className=\"bg-card rounded-lg p-3 shadow-inner-md border border-gray-700 flex justify-between items-center\"\n            >\n              <div className=\"flex-1 truncate\">\n                <span className=\"text-sm text-text_primary truncate block\">\n                  {file.name}\n                </span>\n                <span className=\"text-xs text-text_secondary\">{file.size}</span>\n              </div>\n              <div className=\"flex space-x-2 flex-shrink-0\">\n                <Button variant=\"primary\">Import</Button>\n                <Button variant=\"secondary\">Save</Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilesTab;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Tabs/HistoryTab.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expected corresponding JSX closing tag for 'div'.","line":42,"column":12,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { motion } from 'framer-motion';\nimport { useStore } from '@store';\n\nconst HistoryTab = () => {\n  const [showDiff, setShowDiff] = React.useState(false);\n  const [selectedSnapshot, setSelectedSnapshot] = React.useState<number | null>(null);\n\n  const snapshots = [\n    { id: 1, name: 'Kick tweak', timestamp: '10 minutes ago' },\n    { id: 2, name: 'Vocal comp', timestamp: '2 hours ago' },\n  ];\n\n  const handleDiffClick = (id: number) => {\n    setSelectedSnapshot(id);\n    setShowDiff(true);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-background rounded-br-xl overflow-hidden relative shadow-inner-md\">\n      <h3 className=\"text-lg font-medium p-4 text-text_primary\">History</h3>\n      <div className=\"flex-1 overflow-y-auto px-4 relative\">\n        <div className=\"absolute left-6 top-4 bottom-4 w-0.5 bg-gray-700\" />\n        {snapshots.map((snapshot, index) => (\n          <div\n            key={snapshot.id}\n            className=\"relative mb-6\"\n          >\n            <div className=\"absolute left-[-18px] top-2 w-4 h-4 rounded-full bg-brand border-2 border-background\" />\n            <div className=\"ml-6 bg-card rounded-lg p-3 shadow-inner-md border border-gray-700\">\n              <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"text-sm font-medium text-text_primary truncate flex-1\">{snapshot.name}</span>\n                <span className=\"text-xs text-text_secondary flex-shrink-0\">{snapshot.timestamp}</span>\n              </div>\n              <button\n                onClick={() => handleDiffClick(snapshot.id)}\n                className=\"text-xs text-brand hover:underline mt-1\"\n              >\n                View Diff\n              </button>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Diff Modal */}\n      {showDiff && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 px-4 py-4\">\n          <div className=\"bg-panel rounded-xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto shadow-outer-md border border-gray-700\">\n            <h4 className=\"text-xl font-medium mb-4 text-text_primary\">Snapshot Diff - {snapshots.find(s => s.id === selectedSnapshot)?.name}</h4>\n            <div className=\"grid grid-cols-2 gap-4 mb-4\">\n              <div className=\"bg-card p-3 rounded-lg border border-gray-700 shadow-inner-md\">\n                <h5 className=\"text-sm font-medium text-text_secondary mb-2\">Before</h5>\n                <pre className=\"text-xs text-text_primary whitespace-pre-wrap font-mono bg-black/30 p-2 rounded overflow-x-auto\">\n                  <code>{`{\n  \"kickVolume\": 0.5,\n  \"kickPan\": 0.0\n}`}</code>\n                </pre>\n              </div>\n              <div className=\"bg-card p-3 rounded-lg border border-gray-700 shadow-inner-md\">\n                <h5 className=\"text-sm font-medium text-text_secondary mb-2\">After</h5>\n                <pre className=\"text-xs text-text_primary whitespace-pre-wrap font-mono bg-black/30 p-2 rounded overflow-x-auto\">\n                  <code>{`{\n  \"kickVolume\": 0.7,\n  \"kickPan\": -0.2\n}`}</code>\n                </pre>\n              </div>\n            </div>\n            <button\n              onClick={() => setShowDiff(false)}\n              className=\"px-4 py-2 bg-brand rounded-md text-text_primary hover:bg-opacity-90 transition-colors duration-200 shadow-outer-md\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HistoryTab;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/Tabs/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/TopBar.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport * as React from \"react\";\nimport { useState, useMemo } from \"react\";\nimport { useStore } from \"@store\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ntype Status = \"online\" | \"offline\" | \"away\";\n\ntype Channel = {\n  id: string;\n  name: string;\n  type: \"direct\" | \"group\" | \"project\";\n  participants: string[];\n  unreadCount?: number;\n};\n\ntype User = {\n  id: string;\n  name: string;\n  avatar?: string;\n  status: Status;\n};\n\nconst TopBar: React.FC = () => {\n  const [bpm, setBpm] = React.useState(120);\n  const [project, setProject] = React.useState(\"Lo-Fi Groove v2\");\n  const [isConversationOpen, setIsConversationOpen] = React.useState(false);\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [isSearchFocused, setIsSearchFocused] = React.useState(false);\n  const [isStatusMenuOpen, setIsStatusMenuOpen] = React.useState(false);\n  const [currentUserStatus, setCurrentUserStatus] =\n    React.useState<Status>(\"online\");\n\n  const projects = [\"Lo-Fi Groove v2\", \"House Jam\", \"Client Mix\"];\n\n  const statusColors = {\n    online: \"bg-green-500\",\n    away: \"bg-yellow-500\",\n    offline: \"bg-gray-500\",\n  };\n\n  const statusLabels = {\n    online: \"Online\",\n    away: \"Away\",\n    offline: \"Offline\",\n  };\n\n  const handleStatusChange = (status: Status) => {\n    setCurrentUserStatus(status);\n    setIsStatusMenuOpen(false);\n    // In a real app, you would also update the status on the server\n  };\n\n  // Get store values\n  const { activeChannel, channels, setActiveChannel, activeTab } = useStore();\n\n  // Filter channels to only show direct messages for conversation switching\n  const directMessageChannels = useMemo<Channel[]>(\n    () =>\n      (channels as Channel[]).filter(\n        (channel: Channel) => channel.type === \"direct\",\n      ),\n    [channels],\n  );\n\n  // Get current conversation name\n  const currentConversation = useMemo(() => {\n    if (!activeChannel) return \"Select Conversation\";\n    const channel = channels.find((c) => c.id === activeChannel);\n    return channel?.name || \"Unknown\";\n  }, [activeChannel, channels]);\n\n  // Mock users data - in a real app, this would come from your store/API\n  const users: User[] = [\n    { id: \"1\", name: \"Alex Johnson\", status: \"online\" },\n    { id: \"2\", name: \"Jamie Smith\", status: \"offline\" },\n    { id: \"3\", name: \"Taylor Wilson\", status: \"away\" },\n    { id: \"4\", name: \"Morgan Lee\", status: \"online\" },\n    { id: \"5\", name: \"Casey Kim\", status: \"offline\" },\n  ];\n\n  // Filter users based on search query\n  const filteredUsers = useMemo(() => {\n    if (!searchQuery.trim()) return [];\n    const query = searchQuery.toLowerCase();\n    return users.filter((user) => user.name.toLowerCase().includes(query));\n  }, [searchQuery]);\n\n  const handleUserSelect = (user: User) => {\n    // In a real app, this would create a new DM channel with the selected user\n    const existingChannel = channels.find(\n      (c: Channel) => c.type === \"direct\" && c.participants.includes(user.id),\n    );\n\n    if (existingChannel) {\n      setActiveChannel(existingChannel.id);\n    } else {\n      // Create a new DM channel (simplified)\n      const newChannel = {\n        id: `dm-${Date.now()}`,\n        name: user.name,\n        type: \"direct\" as const,\n        participants: [user.id],\n      };\n      // In a real app, you would dispatch an action to add this channel\n      console.log(\"New DM channel created:\", newChannel);\n      setActiveChannel(newChannel.id);\n    }\n\n    setSearchQuery(\"\");\n    setIsSearchFocused(false);\n  };\n\n  return (\n    <header className=\"bg-panel h-16 flex items-center justify-between px-6 rounded-t-xl shadow-outer-md text-text_primary\">\n      {/* Left: RHYTHM Wordmark */}\n      <div className=\"flex items-center\">\n        <svg\n          width=\"120\"\n          height=\"40\"\n          viewBox=\"0 0 120 40\"\n          className=\"text-brand\"\n        >\n          <text\n            x=\"10\"\n            y=\"30\"\n            fontSize=\"24\"\n            fontWeight=\"bold\"\n            fill=\"currentColor\"\n          >\n            RHYTHM\n          </text>\n        </svg>\n      </div>\n\n      {/* Center: Project and Conversation Selector */}\n      <div className=\"flex items-center space-x-4\">\n        {/* Project Dropdown */}\n        <div className=\"relative\">\n          <select\n            value={project}\n            onChange={(e) => setProject(e.target.value)}\n            className=\"bg-card text-text_primary rounded-md px-4 py-2 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-brand min-w-48\"\n          >\n            {projects.map((proj) => (\n              <option key={proj} value={proj}>\n                {proj}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Conversation Selector */}\n        {activeTab === \"Chat\" && (\n          <div className=\"relative\">\n            <button\n              onClick={() => setIsConversationOpen(!isConversationOpen)}\n              className=\"bg-card text-text_primary rounded-md px-4 py-2 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-brand flex items-center space-x-2 min-w-48 justify-between\"\n            >\n              <span className=\"truncate\">{currentConversation}</span>\n              <svg\n                className={`w-4 h-4 transition-transform duration-200 ${isConversationOpen ? \"transform rotate-180\" : \"\"}`}\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </button>\n\n            <AnimatePresence>\n              {isConversationOpen && (\n                <motion.div\n                  initial={{ opacity: 0, y: -10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"absolute z-10 mt-1 w-full bg-card border border-gray-700 rounded-md shadow-lg py-1\"\n                >\n                  {directMessageChannels.length > 0 ? (\n                    directMessageChannels.map((channel: Channel) => (\n                      <button\n                        key={channel.id}\n                        onClick={() => {\n                          setActiveChannel(channel.id);\n                          setIsConversationOpen(false);\n                        }}\n                        className={`w-full text-left px-4 py-2 text-sm ${\n                          activeChannel === channel.id\n                            ? \"bg-brand/20 text-brand\"\n                            : \"text-text_primary hover:bg-gray-700/50\"\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"truncate\">{channel.name}</span>\n                          {channel.unreadCount > 0 && (\n                            <span className=\"bg-brand text-white text-xs rounded-full h-5 w-5 flex items-center justify-center ml-2\">\n                              {channel.unreadCount}\n                            </span>\n                          )}\n                        </div>\n                      </button>\n                    ))\n                  ) : (\n                    <div className=\"px-4 py-2 text-sm text-text_secondary\">\n                      No conversations\n                    </div>\n                  )}\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Center: Search Bar */}\n      <div className=\"flex-1 max-w-2xl px-4 relative\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            placeholder=\"Search users...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onFocus={() => setIsSearchFocused(true)}\n            onBlur={() => setTimeout(() => setIsSearchFocused(false), 200)}\n            className=\"w-full bg-card/50 border border-gray-700 rounded-full py-2 px-4 text-text_primary placeholder-text_secondary focus:outline-none focus:ring-2 focus:ring-brand focus:border-transparent\"\n          />\n          <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n            <svg\n              className=\"h-5 w-5 text-text_secondary\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n              />\n            </svg>\n          </div>\n\n          {/* Search Results Dropdown */}\n          {isSearchFocused && searchQuery && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: 10 }}\n              className=\"absolute z-50 mt-1 w-full bg-card border border-gray-700 rounded-lg shadow-lg overflow-hidden\"\n            >\n              {filteredUsers.length > 0 ? (\n                <div className=\"py-1\">\n                  {filteredUsers.map((user) => (\n                    <button\n                      key={user.id}\n                      onMouseDown={() => handleUserSelect(user)}\n                      className=\"w-full text-left px-4 py-2 text-sm text-text_primary hover:bg-gray-700/50 flex items-center space-x-3\"\n                    >\n                      <div\n                        className={`h-2 w-2 rounded-full ${\n                          user.status === \"online\"\n                            ? \"bg-green-500\"\n                            : user.status === \"away\"\n                              ? \"bg-yellow-500\"\n                              : \"bg-gray-500\"\n                        }`}\n                      ></div>\n                      <span>{user.name}</span>\n                      <span className=\"ml-auto text-xs text-text_secondary\">\n                        {user.status === \"online\"\n                          ? \"Online\"\n                          : user.status === \"away\"\n                            ? \"Away\"\n                            : \"Offline\"}\n                      </span>\n                    </button>\n                  ))}\n                </div>\n              ) : searchQuery ? (\n                <div className=\"px-4 py-3 text-sm text-text_secondary\">\n                  No users found for \"{searchQuery}\"\n                </div>\n              ) : null}\n            </motion.div>\n          )}\n        </div>\n      </div>\n\n      {/* Right: Status and BPM */}\n      <div className=\"flex items-center space-x-6\">\n        {/* Status Selector */}\n        <div className=\"relative\">\n          <button\n            onClick={() => setIsStatusMenuOpen(!isStatusMenuOpen)}\n            className=\"flex items-center space-x-2 focus:outline-none\"\n            onBlur={() => setTimeout(() => setIsStatusMenuOpen(false), 200)}\n          >\n            <div\n              className={`w-3 h-3 rounded-full ${statusColors[currentUserStatus]}`}\n            ></div>\n            <span className=\"text-sm text-text_secondary\">\n              {statusLabels[currentUserStatus]}\n            </span>\n            <svg\n              className={`w-4 h-4 text-text_secondary transition-transform ${isStatusMenuOpen ? \"transform rotate-180\" : \"\"}`}\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M19 9l-7 7-7-7\"\n              />\n            </svg>\n          </button>\n\n          {/* Status Dropdown */}\n          <AnimatePresence>\n            {isStatusMenuOpen && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: 10 }}\n                className=\"absolute right-0 mt-2 w-40 bg-card border border-gray-700 rounded-lg shadow-lg overflow-hidden z-50\"\n              >\n                <div className=\"py-1\">\n                  {([\"online\", \"away\", \"offline\"] as Status[]).map((status) => (\n                    <button\n                      key={status}\n                      onClick={() => handleStatusChange(status as Status)}\n                      className=\"w-full text-left px-4 py-2 text-sm text-text_primary hover:bg-gray-700/50 flex items-center space-x-2\"\n                    >\n                      <div\n                        className={`w-2 h-2 rounded-full ${statusColors[status]}`}\n                      ></div>\n                      <span>{statusLabels[status]}</span>\n                      {currentUserStatus === status && (\n                        <svg\n                          className=\"w-4 h-4 ml-auto text-brand\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M5 13l4 4L19 7\"\n                          />\n                        </svg>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* BPM Field */}\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm font-medium\">BPM:</span>\n          <input\n            type=\"number\"\n            value={bpm}\n            onChange={(e) =>\n              setBpm(\n                Math.max(40, Math.min(200, parseInt(e.target.value) || 120)),\n              )\n            }\n            className=\"w-16 bg-card text-text_primary rounded-md px-2 py-1 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-brand\"\n          />\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default TopBar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/common/Knob.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/CreateGroupModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":5,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":10}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useStore } from \"@store\";\n\ntype User = {\n  id: string;\n  name: string;\n  avatar?: string;\n  status: \"online\" | \"offline\" | \"away\" | \"busy\";\n};\n\ntype CreateGroupModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst CreateGroupModal: React.FC<CreateGroupModalProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const { users, createGroup } = useStore();\n  const [groupName, setGroupName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const currentUserId = \"user1\"; // In a real app, this would come from auth\n  const otherUsers = users.filter((user) => user.id !== currentUserId);\n\n  const filteredUsers = otherUsers.filter((user) =>\n    user.name.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  const handleUserToggle = (userId: string) => {\n    setSelectedUsers((prev) =>\n      prev.includes(userId)\n        ? prev.filter((id) => id !== userId)\n        : [...prev, userId],\n    );\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!groupName.trim() || selectedUsers.length === 0) return;\n\n    createGroup({\n      name: groupName,\n      participants: selectedUsers,\n      description: description.trim() || undefined,\n      isPrivate,\n      // In a real app, you might want to allow users to upload an avatar\n      avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(groupName)}&background=random`,\n    });\n\n    // Reset form\n    setGroupName(\"\");\n    setDescription(\"\");\n    setSelectedUsers([]);\n    setIsPrivate(false);\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4\">\n        <motion.div\n          className=\"bg-panel rounded-xl shadow-2xl w-full max-w-md max-h-[90vh] flex flex-col overflow-hidden\"\n          initial={{ opacity: 0, scale: 0.95, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: 20 }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div className=\"p-6 pb-0\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold text-text_primary\">\n                Create New Group\n              </h2>\n              <button\n                onClick={onClose}\n                className=\"text-text_secondary hover:text-text_primary transition-colors\"\n              >\n                <svg\n                  className=\"w-6 h-6\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M6 18L18 6M6 6l12 12\"\n                  />\n                </svg>\n              </button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <label\n                  htmlFor=\"groupName\"\n                  className=\"block text-sm font-medium text-text_secondary mb-1\"\n                >\n                  Group Name *\n                </label>\n                <input\n                  id=\"groupName\"\n                  type=\"text\"\n                  value={groupName}\n                  onChange={(e) => setGroupName(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-card border border-gray-700 rounded-lg text-text_primary focus:outline-none focus:ring-2 focus:ring-brand\"\n                  placeholder=\"Enter group name\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label\n                  htmlFor=\"description\"\n                  className=\"block text-sm font-medium text-text_secondary mb-1\"\n                >\n                  Description (Optional)\n                </label>\n                <textarea\n                  id=\"description\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  className=\"w-full px-3 py-2 bg-card border border-gray-700 rounded-lg text-text_primary focus:outline-none focus:ring-2 focus:ring-brand\"\n                  placeholder=\"What's this group about?\"\n                  rows={2}\n                />\n              </div>\n\n              <div>\n                <div className=\"flex items-center justify-between mb-1\">\n                  <label className=\"text-sm font-medium text-text_secondary\">\n                    Add Members\n                  </label>\n                  <span className=\"text-xs text-text_secondary\">\n                    {selectedUsers.length} selected\n                  </span>\n                </div>\n                <div className=\"relative\">\n                  <input\n                    type=\"text\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full px-3 py-2 bg-card border border-gray-700 rounded-lg text-text_primary focus:outline-none focus:ring-2 focus:ring-brand mb-2\"\n                    placeholder=\"Search users...\"\n                  />\n                  <div className=\"max-h-48 overflow-y-auto bg-card border border-gray-700 rounded-lg divide-y divide-gray-700\">\n                    {filteredUsers.length > 0 ? (\n                      filteredUsers.map((user) => (\n                        <div\n                          key={user.id}\n                          className={`flex items-center p-3 hover:bg-gray-800 cursor-pointer ${selectedUsers.includes(user.id) ? \"bg-gray-800\" : \"\"}`}\n                          onClick={() => handleUserToggle(user.id)}\n                        >\n                          <div className=\"relative\">\n                            <div className=\"w-10 h-10 rounded-full bg-gray-700 flex items-center justify-center text-white\">\n                              {user.name.charAt(0).toUpperCase()}\n                            </div>\n                            <span\n                              className={`absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-panel ${\n                                user.status === \"online\"\n                                  ? \"bg-green-500\"\n                                  : user.status === \"away\"\n                                    ? \"bg-yellow-500\"\n                                    : user.status === \"busy\"\n                                      ? \"bg-red-500\"\n                                      : \"bg-gray-500\"\n                              }`}\n                            ></span>\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-text_primary\">\n                              {user.name}\n                            </p>\n                            <p className=\"text-xs text-text_secondary\">\n                              {user.status === \"online\"\n                                ? \"Online\"\n                                : user.status === \"away\"\n                                  ? \"Away\"\n                                  : user.status === \"busy\"\n                                    ? \"Busy\"\n                                    : \"Offline\"}\n                            </p>\n                          </div>\n                          <div className=\"ml-auto\">\n                            <div\n                              className={`w-5 h-5 rounded border-2 ${\n                                selectedUsers.includes(user.id)\n                                  ? \"bg-brand border-brand\"\n                                  : \"border-gray-600\"\n                              } flex items-center justify-center`}\n                            >\n                              {selectedUsers.includes(user.id) && (\n                                <svg\n                                  className=\"w-3 h-3 text-white\"\n                                  fill=\"currentColor\"\n                                  viewBox=\"0 0 20 20\"\n                                >\n                                  <path\n                                    fillRule=\"evenodd\"\n                                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                                    clipRule=\"evenodd\"\n                                  />\n                                </svg>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"p-4 text-center text-text_secondary text-sm\">\n                        No users found\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  id=\"isPrivate\"\n                  checked={isPrivate}\n                  onChange={(e) => setIsPrivate(e.target.checked)}\n                  className=\"h-4 w-4 text-brand focus:ring-brand border-gray-700 rounded\"\n                />\n                <label\n                  htmlFor=\"isPrivate\"\n                  className=\"ml-2 block text-sm text-text_secondary\"\n                >\n                  Make this group private\n                </label>\n              </div>\n\n              <div className=\"pt-4 flex justify-end space-x-3\">\n                <button\n                  type=\"button\"\n                  onClick={onClose}\n                  className=\"px-4 py-2 text-sm font-medium text-text_secondary hover:text-text_primary rounded-lg transition-colors\"\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  disabled={!groupName.trim() || selectedUsers.length === 0}\n                  className={`px-4 py-2 text-sm font-medium text-white rounded-lg transition-colors ${\n                    !groupName.trim() || selectedUsers.length === 0\n                      ? \"bg-gray-600 cursor-not-allowed\"\n                      : \"bg-brand hover:bg-brand/90\"\n                  }`}\n                >\n                  Create Group\n                </button>\n              </div>\n            </form>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};\n\nexport default CreateGroupModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Knob.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Led.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Navbar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AnimatePresence' is defined but never used.","line":2,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n// Store is not needed here as we're using props\n// import { useStore } from '../../store';\n\nexport type Tab = \"chat\" | \"files\" | \"history\" | \"account\" | \"friends\";\n\ninterface NavbarProps {\n  activeTab: Tab;\n  onTabChange: (tab: Tab) => void;\n}\n\nconst Navbar: React.FC<NavbarProps> = ({\n  activeTab,\n  onTabChange,\n}: NavbarProps) => {\n  const tabs: { id: Tab; icon: string; label: string }[] = [\n    { id: \"chat\", icon: \"💬\", label: \"Chat\" },\n    { id: \"friends\", icon: \"👥\", label: \"Friends\" },\n    { id: \"files\", icon: \"📁\", label: \"Files\" },\n    { id: \"history\", icon: \"⏱️\", label: \"History\" },\n    { id: \"account\", icon: \"👤\", label: \"Account\" },\n  ];\n\n  return (\n    <div className=\"flex flex-col items-center py-4 px-2 bg-panel border-r border-gray-700 h-full\">\n      <div className=\"space-y-2 w-full\">\n        {tabs.map((tab) => {\n          const isActive = activeTab === tab.id;\n          return (\n            <motion.button\n              key={tab.id}\n              onClick={() => onTabChange(tab.id)}\n              className={`relative flex flex-col items-center justify-center w-14 h-14 rounded-lg transition-colors ${\n                isActive\n                  ? \"bg-brand/20 text-brand\"\n                  : \"text-text_secondary hover:bg-gray-700/50\"\n              }`}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <span className=\"text-2xl\">{tab.icon}</span>\n              <span className=\"text-xs mt-1\">{tab.label}</span>\n              {isActive && (\n                <motion.div\n                  layoutId=\"nav-indicator\"\n                  className=\"absolute left-0 top-0 bottom-0 w-1 bg-brand rounded-r-md\"\n                  initial={false}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 500,\n                    damping: 30,\n                  }}\n                />\n              )}\n              {tab.id === \"friends\" && (\n                <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full\"></div>\n              )}\n            </motion.button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/components/Sidebar.tsx","messages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Do not use \"@ts-nocheck\" because it alters compilation errors.","line":1,"column":1,"nodeType":"Line","messageId":"tsDirectiveComment","endLine":1,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'User' is defined but never used.","line":8,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":10}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// @ts-nocheck\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { useStore } from \"@store\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport CreateGroupModal from \"./CreateGroupModal\";\n\ntype User = {\n  id: string;\n  name: string;\n  status: \"online\" | \"offline\" | \"away\" | \"busy\";\n};\n\ntype Channel = {\n  id: string;\n  name: string;\n  type: \"direct\" | \"group\" | \"project\";\n  participants: string[];\n  unreadCount?: number;\n};\n\nconst Sidebar = () => {\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const { channels, users, activeChannel, setActiveChannel, activeTab } =\n    useStore();\n\n  // Separate channels by type\n  const projectChannels = channels.filter((c) => c.type === \"project\");\n  const groupChannels = channels.filter((c) => c.type === \"group\");\n  const directMessageChannels = channels.filter((c) => c.type === \"direct\");\n\n  const getChannelDisplayName = (channel: Channel) => {\n    if (channel.type === \"direct\") {\n      const user = users.find((u) => u.id === channel.id);\n      return user?.name || channel.name;\n    }\n    return channel.name;\n  };\n\n  const getChannelStatus = (channel: Channel) => {\n    if (channel.type === \"direct\") {\n      const user = users.find((u) => u.id === channel.id);\n      return user?.status || \"offline\";\n    }\n    return null;\n  };\n\n  const renderChannelItem = (channel: Channel) => (\n    <motion.div\n      key={channel.id}\n      whileHover={{ backgroundColor: \"rgba(255, 255, 255, 0.05)\" }}\n      className={`px-4 py-2 cursor-pointer flex items-center justify-between ${\n        activeChannel === channel.id ? \"bg-brand/10\" : \"\"\n      }`}\n      onClick={() => setActiveChannel(channel.id)}\n    >\n      <div className=\"flex items-center space-x-2 truncate\">\n        {channel.type === \"direct\" ? (\n          <div className=\"relative flex-shrink-0\">\n            <div\n              className={`w-2 h-2 rounded-full ${\n                getChannelStatus(channel) === \"online\"\n                  ? \"bg-green-500\"\n                  : getChannelStatus(channel) === \"away\"\n                    ? \"bg-yellow-500\"\n                    : getChannelStatus(channel) === \"busy\"\n                      ? \"bg-red-500\"\n                      : \"bg-gray-500\"\n              } absolute -left-3 top-1/2 transform -translate-y-1/2`}\n            />\n            <span className=\"text-text_primary truncate\">\n              {getChannelDisplayName(channel)}\n            </span>\n          </div>\n        ) : (\n          <div className=\"flex items-center space-x-2 truncate\">\n            {channel.type === \"project\" ? (\n              <span className=\"text-text_secondary\">#</span>\n            ) : (\n              <span className=\"text-text_secondary\">\n                <svg\n                  className=\"w-4 h-4\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  stroke=\"currentColor\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n                  />\n                </svg>\n              </span>\n            )}\n            <span className=\"text-text_primary truncate\">\n              {getChannelDisplayName(channel)}\n            </span>\n          </div>\n        )}\n      </div>\n      {channel.unreadCount > 0 && (\n        <span className=\"bg-brand text-white text-xs rounded-full h-5 w-5 flex-shrink-0 flex items-center justify-center\">\n          {channel.unreadCount}\n        </span>\n      )}\n    </motion.div>\n  );\n\n  if (activeTab !== \"Chat\") {\n    return null;\n  }\n\n  return (\n    <div className=\"w-64 border-r border-gray-700 bg-panel flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-700 flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-text_primary\">Channels</h2>\n        <button\n          onClick={() => setIsCreateGroupModalOpen(true)}\n          className=\"text-text_secondary hover:text-brand transition-colors p-1\"\n          title=\"Create new group\"\n        >\n          <svg\n            className=\"w-5 h-5\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n            />\n          </svg>\n        </button>\n      </div>\n\n      {/* Project Channels */}\n      {projectChannels.length > 0 && (\n        <div className=\"mt-2\">\n          <div className=\"px-4 py-2 text-xs font-medium text-text_secondary uppercase tracking-wider\">\n            Projects\n          </div>\n          <div className=\"space-y-1\">\n            {projectChannels.map((channel) => renderChannelItem(channel))}\n          </div>\n        </div>\n      )}\n\n      {/* Group Chats */}\n      <div className=\"mt-2\">\n        <div className=\"px-4 py-2 flex items-center justify-between\">\n          <span className=\"text-xs font-medium text-text_secondary uppercase tracking-wider\">\n            Group Chats\n          </span>\n          <button\n            onClick={() => setIsCreateGroupModalOpen(true)}\n            className=\"text-xs text-brand hover:text-brand/80 transition-colors\"\n          >\n            New\n          </button>\n        </div>\n        <div className=\"space-y-1\">\n          {groupChannels.map((channel) => renderChannelItem(channel))}\n          {groupChannels.length === 0 && (\n            <div className=\"px-4 py-2 text-xs text-text_secondary\">\n              No group chats yet\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Direct Messages */}\n      <div className=\"mt-2\">\n        <div className=\"px-4 py-2 text-xs font-medium text-text_secondary uppercase tracking-wider\">\n          Direct Messages\n        </div>\n        <div className=\"space-y-1\">\n          {directMessageChannels.map((channel) => renderChannelItem(channel))}\n        </div>\n      </div>\n\n      {/* User Status */}\n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative\">\n            <div className=\"w-3 h-3 bg-green-500 rounded-full absolute -right-1 -bottom-0.5 border-2 border-panel\" />\n            <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-purple-400 to-purple-700 flex items-center justify-center text-white font-semibold\">\n              Y\n            </div>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-text_primary\">You</p>\n            <p className=\"text-xs text-text_muted\">Online</p>\n          </div>\n        </div>\n      </div>\n      {/* Create Group Modal */}\n      <AnimatePresence>\n        {isCreateGroupModalOpen && (\n          <CreateGroupModal\n            isOpen={isCreateGroupModalOpen}\n            onClose={() => setIsCreateGroupModalOpen(false)}\n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/types/framer-motion.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/types/react-jsx-runtime.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/plugin/Source/UI/types/react.d.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":7,"column":37,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":7,"endColumn":39,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[163,165],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[163,165],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":32,"column":15,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":32,"endColumn":24,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[866,961],"text":"type Component<P = {}, S = {}, SS = unknown> = ComponentLifecycle<P, S, SS>"},"desc":"Replace empty interface with a type alias."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":32,"column":29,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":32,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[890,892],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[890,892],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":32,"column":37,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":32,"endColumn":39,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[898,900],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[898,900],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'SS' is defined but never used.","line":35,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":42}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"declare module \"react\" {\n  export = React;\n  export as namespace React;\n\n  namespace React {\n    // Type definitions for React\n    interface FunctionComponent<P = {}> {\n      (props: P, context?: unknown): ReactElement<unknown, unknown> | null;\n      propTypes?: WeakValidationMap<P> | undefined;\n      contextTypes?: ValidationMap<unknown> | undefined;\n      defaultProps?: Partial<P> | undefined;\n      displayName?: string | undefined;\n    }\n\n    interface ReactElement<\n      P = unknown,\n      T extends string | JSXElementConstructor<unknown> =\n        | string\n        | JSXElementConstructor<unknown>,\n    > {\n      type: T;\n      props: P;\n      key: Key | null;\n    }\n\n    type JSXElementConstructor<P> =\n      | ((props: P) => ReactElement<unknown, unknown> | null)\n      | (new (props: P) => Component<P, unknown>);\n\n    type Key = string | number;\n\n    interface Component<P = {}, S = {}, SS = unknown>\n      extends ComponentLifecycle<P, S, SS> {}\n\n    interface ComponentLifecycle<P, S, SS = unknown> {\n      componentDidMount?(): void;\n      shouldComponentUpdate?(\n        nextProps: Readonly<P>,\n        nextState: Readonly<S>,\n        nextContext: unknown,\n      ): boolean;\n      componentWillUnmount?(): void;\n      componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    interface ErrorInfo {\n      componentStack: string;\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/app.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/guards/jwt-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":7,"column":3,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":17,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[598,601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[598,601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[609,612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[609,612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\n\n// Extend the Express Request type to include the user property\ndeclare global {\n  namespace Express {\n    interface User {\n      userId: string;\n      email: string;\n      name?: string;\n    }\n    \n    interface Request {\n      user?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any, context: ExecutionContext) {\n    if (err || !user) {\n      throw err || new UnauthorizedException('Authentication failed');\n    }\n    const request = context.switchToHttp().getRequest<Request>();\n    request.user = user;\n    return user;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/guards/jwt-ws-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[571,574],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[571,574],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[666,669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[666,669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\n\n@Injectable()\nexport class JwtWsAuthGuard {\n  constructor(private readonly jwt: JwtService) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const client = context.switchToWs().getClient<Socket>();\n    const token = client.handshake.auth?.token;\n    \n    if (!token) {\n      throw new WsException('Missing token');\n    }\n\n    try {\n      const payload: any = this.jwt.verify(token);\n      \n      // Add user to handshake\n      (client.handshake as any).user = {\n        userId: payload.sub,\n        email: payload.email,\n        name: payload.name,\n      };\n      \n      return true;\n    } catch (error) {\n      throw new WsException('Invalid token');\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/guards/refresh-token.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/interfaces/jwt-payload.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/strategies/refresh-token.strategy.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1096,1099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1096,1099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractJwt, Strategy, StrategyOptions } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport * as bcrypt from 'bcryptjs';\nimport { Request } from 'express';\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n}\n\n@Injectable()\nexport class RefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    private prisma: PrismaService,\n    configService: ConfigService,\n  ) {\n    const secret = configService.get<string>('JWT_REFRESH_SECRET');\n    if (!secret) {\n      throw new Error('JWT_REFRESH_SECRET is not defined in the configuration');\n    }\n    \n    const strategyOptions: StrategyOptions = {\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (req: Request) => {\n          return req?.cookies?.refreshToken;\n        },\n      ]),\n      secretOrKey: secret,\n      passReqToCallback: true,\n    };\n    \n    super(strategyOptions as any); // Type assertion to bypass the type checking issue\n  }\n\n  async validate(req: Request, payload: JwtPayload) {\n    const refreshToken = req.cookies?.refreshToken;\n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token not found');\n    }\n\n    const user = await this.prisma.user.findUnique({\n      where: { id: payload.sub },\n    });\n\n    if (!user?.refreshToken) {\n      throw new UnauthorizedException('Refresh token is invalid');\n    }\n\n    const isTokenValid = await bcrypt.compare(refreshToken, user.refreshToken);\n    if (!isTokenValid) {\n      throw new UnauthorizedException('Refresh token is invalid');\n    }\n\n    return { ...payload, refreshToken };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/auth/strategies/ws-jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/auth-login.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/decorators/get-user.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/files-upload.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'file' is defined but never used.","line":9,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Controller, Post, UploadedFile, UseInterceptors } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport type { Express } from 'express';\n\n@Controller('files')\nexport class FilesUploadController {\n  @Post('upload')\n  @UseInterceptors(FileInterceptor('file'))\n  uploadFile(@UploadedFile() file: Express.Multer.File) {\n    // Always return a 26-char ULID key for test\n    const key = '01H1234567890ABCDEFGHJKLMNPQ'.slice(0, 26);\n    console.log('Returned key:', key, 'Length:', key.length);\n    return { key };\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/filters/ws-exception.filter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/guards/ws-throttler.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[981,984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[981,984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":37,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable, Logger } from '@nestjs/common';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\n\n// Custom context to handle WebSocket connections\nclass WsThrottlerContext {\n  constructor(private readonly context: ExecutionContext) {}\n\n  getRequest() {\n    return this.context.switchToWs().getClient<Socket>();\n  }\n\n  getResponse() {\n    return this.context.switchToHttp().getResponse();\n  }\n\n  getType() {\n    return 'ws';\n  }\n}\n\n@Injectable()\nexport class WsThrottlerGuard extends ThrottlerGuard {\n  private readonly logger = new Logger(WsThrottlerGuard.name);\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    // Create a custom context for WebSocket\n    const wsContext = new WsThrottlerContext(context);\n    \n    try {\n      // Call parent's canActivate with our custom context\n      const canActivate = await super.canActivate(wsContext as any);\n      return canActivate as boolean;\n    } catch (error) {\n      // Handle rate limit exceeded\n      if ((error as any).getStatus?.() === 429) {\n        const socket = wsContext.getRequest();\n        const ip = socket.handshake.address || 'unknown';\n        \n        this.logger.warn(`WebSocket rate limit exceeded for IP: ${ip}`);\n        throw new WsException({\n          status: 'error',\n          message: 'Too many requests',\n          retryAfter: 60, // 1 minute cooldown\n        });\n      }\n      \n      // Re-throw other errors\n      throw error;\n    }\n  }\n  \n  // Override to handle WebSocket connections\n  protected getRequestResponse(context: ExecutionContext) {\n    const wsContext = new WsThrottlerContext(context);\n    return {\n      req: wsContext.getRequest(),\n      res: wsContext.getResponse(),\n    };\n  }\n\n  protected generateKey(context: ExecutionContext, suffix: string): string {\n    const prefix = 'ws-throttle';\n    const handler = context.getHandler().name;\n    const classContext = context.getClass().name;\n    return `${prefix}:${classContext}:${handler}:${suffix}`;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/ping.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/root.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/common/security.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/config/auth.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/constants/request-with-user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/FileShare.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7535,7538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7535,7538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8033,8036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8033,8036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8146,8149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8146,8149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8234,8237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8234,8237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Request, Response } from 'express';\nimport { S3Client, PutObjectCommand, GetObjectCommand, DeleteObjectCommand, type S3ClientConfig } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { v4 as uuidv4 } from 'uuid';\nimport { createHash } from 'crypto';\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\nimport { Readable } from 'stream';\n\nconst execAsync = promisify(exec);\n\n// Types\ntype PeerConnection = {\n  id: string;\n  userId: string;\n  projectId: string;\n  createdAt: Date;\n};\n\ntype FileMetadata = {\n  id: string;\n  name: string;\n  size: number;\n  type: string;\n  sha256: string;\n  status: 'pending' | 'scanning' | 'clean' | 'infected' | 'error';\n  s3Key?: string;\n  createdAt: Date;\n  createdBy: string;\n  projectId: string;\n};\n\n// Configuration\nconst MAX_DIRECT_SIZE = 100 * 1024 * 1024; // 100MB\nconst UPLOAD_DIR = process.env.UPLOAD_DIR || './uploads';\nconst CLAMSCAN_CMD = process.env.CLAMSCAN_CMD || 'clamscan';\n\n// Initialize S3 client with proper type safety\nconst s3Config: S3ClientConfig = {\n  region: process.env.AWS_REGION || 'us-east-1',\n  ...(process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY ? {\n    credentials: {\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    }\n  } : {})\n};\n\nconst s3Client = new S3Client(s3Config as S3ClientConfig);\n\n// In-memory stores (in production, use Redis or database)\nconst peerConnections = new Map<string, PeerConnection>();\nconst fileMetadata = new Map<string, FileMetadata>();\n\n// Ensure upload directory exists\nif (!fs.existsSync(UPLOAD_DIR)) {\n  fs.mkdirSync(UPLOAD_DIR, { recursive: true });\n}\n\nexport class FileShare {\n  // WebRTC signaling endpoint\n  static async handleSignal(req: Request, res: Response) {\n    const { type, data, from, to, projectId } = req.body;\n\n    if (!type || !data || !from || !projectId) {\n      return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    // Store/update peer connection\n    const peerId = `${projectId}-${from}`;\n    if (!peerConnections.has(peerId)) {\n      peerConnections.set(peerId, {\n        id: peerId,\n        userId: from,\n        projectId,\n        createdAt: new Date(),\n      });\n    }\n\n    // In a real app, you'd use a message queue or WebSocket for signaling\n    // This is a simplified version that just returns the data\n    return res.json({\n      type,\n      data,\n      from,\n      to,\n      projectId,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  // Handle file upload (direct or S3)\n  static async handleFileUpload(req: Request, res: Response) {\n    const { projectId, userId } = req.params;\n    const file = req.file;\n\n    if (!file) {\n      return res.status(400).json({ error: 'No file uploaded' });\n    }\n\n    const fileId = uuidv4();\n    const fileHash = await this.calculateFileHash(file.path);\n    \n    const metadata: FileMetadata = {\n      id: fileId,\n      name: file.originalname,\n      size: file.size,\n      type: file.mimetype,\n      sha256: fileHash,\n      status: 'pending',\n      createdAt: new Date(),\n      createdBy: userId,\n      projectId,\n    };\n\n    try {\n      // Check if file is too large for direct transfer\n      if (file.size > MAX_DIRECT_SIZE) {\n        // Upload to S3\n        const s3Key = `projects/${projectId}/${fileId}-${file.originalname}`;\n        await s3Client.send(\n          new PutObjectCommand({\n            Bucket: process.env.S3_BUCKET_NAME,\n            Key: s3Key,\n            Body: fs.createReadStream(file.path),\n            ContentType: file.mimetype,\n            Metadata: {\n              'x-amz-meta-project-id': projectId,\n              'x-amz-meta-uploader-id': userId,\n            },\n          })\n        );\n\n        metadata.s3Key = s3Key;\n        metadata.status = 'scanning';\n        \n        // Start virus scan in background\n        this.scanFileForViruses(metadata);\n      } else {\n        // For small files, scan immediately\n        await this.scanFileForViruses(metadata);\n      }\n\n      // Store metadata\n      fileMetadata.set(fileId, metadata);\n\n      // Clean up temp file\n      fs.unlink(file.path, () => {});\n\n      return res.status(202).json({\n        fileId,\n        status: metadata.status,\n        size: file.size,\n        name: file.originalname,\n      });\n    } catch (error) {\n      console.error('File upload error:', error);\n      return res.status(500).json({ error: 'Failed to process file' });\n    }\n  }\n\n  // Get file download URL\n  static async getFileUrl(req: Request, res: Response) {\n    const { fileId } = req.params;\n    const metadata = fileMetadata.get(fileId);\n\n    if (!metadata) {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    if (metadata.status !== 'clean') {\n      return res.status(403).json({ \n        error: 'File not available for download', \n        status: metadata.status \n      });\n    }\n\n    try {\n      if (metadata.s3Key) {\n        // Generate pre-signed URL for S3\n        const command = new GetObjectCommand({\n          Bucket: process.env.S3_BUCKET_NAME,\n          Key: metadata.s3Key,\n          ResponseContentDisposition: `attachment; filename=\"${metadata.name}\"`,\n        });\n\n        const url = await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n        return res.json({ url });\n      } else {\n        // Serve directly for small files\n        const filePath = path.join(UPLOAD_DIR, fileId);\n        return res.download(filePath, metadata.name);\n      }\n    } catch (error) {\n      console.error('Error generating download URL:', error);\n      return res.status(500).json({ error: 'Failed to generate download URL' });\n    }\n  }\n\n  // Check file status\n  static async checkFileStatus(req: Request, res: Response) {\n    const { fileId } = req.params;\n    const metadata = fileMetadata.get(fileId);\n\n    if (!metadata) {\n      return res.status(404).json({ error: 'File not found' });\n    }\n\n    return res.json({\n      fileId: metadata.id,\n      status: metadata.status,\n      name: metadata.name,\n      size: metadata.size,\n      createdAt: metadata.createdAt.toISOString(),\n    });\n  }\n\n  // Private helper methods\n  private static async calculateFileHash(filePath: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const hash = createHash('sha256');\n      const stream = fs.createReadStream(filePath);\n      \n      stream.on('data', (chunk) => hash.update(chunk));\n      stream.on('end', () => resolve(hash.digest('hex')));\n      stream.on('error', (error) => reject(error));\n    });\n  }\n\n  private static async scanFileForViruses(metadata: FileMetadata): Promise<void> {\n    try {\n      metadata.status = 'scanning';\n      \n      // In a real implementation, you would use a proper ClamAV integration\n      // This is a simplified example using the clamscan command line\n      const filePath = metadata.s3Key \n        ? path.join('/tmp', path.basename(metadata.s3Key))\n        : path.join(UPLOAD_DIR, metadata.id);\n      \n      if (metadata.s3Key) {\n        // Download from S3 for scanning\n        const command = new GetObjectCommand({\n          Bucket: process.env.S3_BUCKET_NAME!,\n          Key: metadata.s3Key,\n        });\n        \n        const { Body } = await s3Client.send(command);\n        const writeStream = fs.createWriteStream(filePath);\n        \n        const handleStream = (stream: unknown) => {\n          return new Promise((resolve, reject) => {\n            (stream as any).pipe(writeStream)\n              .on('error', reject)\n              .on('close', resolve);\n          });\n        };\n\n        if (Body instanceof Readable) {\n          await handleStream(Body);\n        } else if (Body instanceof Uint8Array || typeof Body === 'string') {\n          writeStream.write(Body);\n          writeStream.end();\n          await new Promise<void>((resolve) => {\n            writeStream.on('close', () => resolve());\n          });\n        } else if (Body && typeof (Body as any).transformToWebStream === 'function') {\n          // Handle web streams\n          const webStream = (Body as any).transformToWebStream();\n          await handleStream(Readable.fromWeb(webStream as any));\n        } else {\n          throw new Error('Unsupported file type');\n        }\n      }\n      \n      // Run virus scan\n      await execAsync(`${CLAMSCAN_CMD} --no-summary \"${filePath}\"`);\n      \n      // If we get here, the file is clean\n      metadata.status = 'clean';\n      \n      // Clean up temp file if it was downloaded from S3\n      if (metadata.s3Key) {\n        fs.unlink(filePath, () => {});\n      }\n    } catch (error) {\n      console.error('Virus scan error:', error);\n      metadata.status = 'error';\n      \n      // If the exit code is 1, it means a virus was found\n      if (error instanceof Error && 'code' in error && error.code === 1) {\n        metadata.status = 'infected';\n        \n        // Delete infected files\n        if (metadata.s3Key) {\n          await s3Client.send(new DeleteObjectCommand({\n            Bucket: process.env.S3_BUCKET_NAME!,\n            Key: metadata.s3Key,\n          }));\n        } else {\n          fs.unlink(path.join(UPLOAD_DIR, metadata.id), () => {});\n        }\n      }\n    } finally {\n      // Update metadata\n      fileMetadata.set(metadata.id, metadata);\n    }\n  }\n}\n\n// Express middleware for file uploads\nimport multer, { Multer } from 'multer';\nimport { RequestHandler } from 'express';\n\nconst upload: Multer = multer({ \n  dest: UPLOAD_DIR,\n  limits: {\n    fileSize: 1024 * 1024 * 1024, // 1GB max\n  },\n});\n\nexport const uploadMiddleware: RequestHandler = upload.single('file');\n\n// Example Express routes:\n/*\napp.post('/api/files/upload', \n  authenticateUser, // Your auth middleware\n  uploadMiddleware,\n  FileShare.handleFileUpload\n);\n\napp.get('/api/files/:fileId/url', \n  authenticateUser,\n  FileShare.getFileUrl\n);\n\napp.get('/api/files/:fileId/status',\n  authenticateUser,\n  FileShare.checkFileStatus\n);\n\napp.post('/webrtc-signal',\n  authenticateUser,\n  express.json(),\n  FileShare.handleSignal\n);\n*/\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/RealtimeChat.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/activity-log/activity-log.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/activity-log/activity-logger.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Prisma' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[543,546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[543,546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[866,869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[866,869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { Prisma } from '@prisma/client';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { LogActivityDto } from './dto/log-activity.dto';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\n// Type for raw activity log from database\ntype RawActivityLog = {\n  id: string;\n  action: string;\n  entityType: string;\n  entityId: string;\n  metadata: any; // Using any to avoid Prisma type issues\n  ipAddress: string | null;\n  userAgent: string | null;\n  userId: string;\n  projectId: string | null;\n  createdAt: Date;\n};\n\n// Type for activity log with user data\ntype ActivityWithUser = {\n  id: string;\n  action: string;\n  entityType: string;\n  entityId: string;\n  metadata: any; // Using any to avoid Prisma type issues\n  ipAddress: string | null;\n  userAgent: string | null;\n  createdAt: Date;\n  userId: string;\n  projectId: string | null;\n  user: {\n    id: string;\n    name: string | null;\n    email: string;\n  } | null;\n};\n\n@Injectable()\n@WebSocketGateway({ namespace: 'activity' })\nexport class ActivityLoggerService implements OnModuleInit {\n  private readonly logger = new Logger(ActivityLoggerService.name);\n  \n  @WebSocketServer()\n  private server!: Server;\n\n  constructor(\n    private prisma: PrismaService,\n    private eventEmitter: EventEmitter2\n  ) {}\n\n  onModuleInit() {\n    this.logger.log('Activity Logger Service initialized');\n  }\n\n  /**\n   * Log an activity and emit a WebSocket event\n   * @param data Activity data to log\n   * @returns The created activity log\n   */\n  async logActivity(data: LogActivityDto): Promise<ActivityWithUser> {\n    const { \n      action, \n      entityId = '', \n      entityType = 'system',\n      userId,\n      projectId,\n      metadata = {},\n      ipAddress,\n      userAgent\n    } = data;\n\n    try {\n      // Create activity data\n      // Build activity data with optional fields\n      const activityData: unknown = {\n        action,\n        entityId,\n        entityType,\n        metadata: metadata as unknown, // Using unknown to avoid Prisma type issues\n        ...(ipAddress && { ipAddress }),\n        ...(userAgent && { userAgent }),\n        // userId is optional, only include if provided\n        ...(userId && { userId }),\n        ...(projectId && { projectId }),\n      };\n\n      // Create the activity log with all necessary fields using raw query\n      const query = `\n        INSERT INTO \"ActivityLog\" (${Object.keys(activityData).join(', ')})\n        VALUES (${Object.keys(activityData).map((_, i) => `$${i + 1}`).join(', ')})\n        RETURNING \n          id, action, \"entityType\" as \"entityType\", \"entityId\" as \"entityId\", \n          metadata, \"ipAddress\" as \"ipAddress\", \"userAgent\" as \"userAgent\", \n          \"userId\" as \"userId\", \"projectId\" as \"projectId\", \"createdAt\" as \"createdAt\"\n      `;\n      \n      const values = Object.values(activityData);\n      const activity = (await this.prisma.$queryRawUnsafe(query, ...values) as RawActivityLog[])[0];\n      \n      // Fetch user data if userId is provided\n      let user: { id: string; name: string | null; email: string } | null = null;\n      if (userId) {\n        user = await this.prisma.user.findUnique({\n          where: { id: userId },\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        });\n      }\n\n      // Map to our ActivityWithUser type\n      const activityWithUser: ActivityWithUser = {\n        id: activity.id,\n        action: activity.action,\n        entityType: activity.entityType,\n        entityId: activity.entityId,\n        metadata: activity.metadata,\n        createdAt: activity.createdAt,\n        ipAddress: activity.ipAddress,\n        userAgent: activity.userAgent,\n        userId: activity.userId,\n        projectId: activity.projectId,\n        user: user,\n      };\n\n      // Emit WebSocket event\n      if (this.server) {\n        const room = projectId ? `project:${projectId}` : `user:${userId || 'system'}`;\n        const eventData = {\n          ...activityWithUser,\n          user: activityWithUser.user || null,\n          projectId: activityWithUser.projectId || null,\n          userId: activityWithUser.userId || null\n        } as const;\n\n        // Emit to the specific room (project or user)\n        this.server.to(room).emit('activity', eventData);\n        \n        // Also emit to the global namespace\n        this.server.emit('activity', eventData);\n      }\n      \n      // Emit a system event for other services\n      this.eventEmitter.emit('activity.created', activityWithUser);\n\n      this.logger.debug(`Activity logged: ${action} for project ${projectId} by user ${userId}`);\n      \n      return activityWithUser;\n    } catch (error) {\n      this.logger.error(`Failed to log activity: ${typeof error === 'object' && error && 'message' in error ? (error as { message: string }).message : String(error)}`, typeof error === 'object' && error && 'stack' in error ? (error as { stack: string }).stack : undefined);\n      throw error;\n    }\n  }\n\n  /**\n   * Get recent activities for a project or user\n   * @param options Query options\n   * @returns List of activity logs with user data\n   */\n  async getActivities(options: {\n    projectId?: string;\n    userId?: string | null;\n    action?: string;\n    entityType?: string;\n    entityId?: string;\n    limit?: number;\n    cursor?: string;\n  }): Promise<ActivityWithUser[]> {\n    const { \n      projectId, \n      userId, \n      action, \n      entityType,\n      entityId,\n      limit = 50, \n      cursor \n    } = options;\n\n    // Build the WHERE clause\n    const whereClauses: string[] = [];\n    const params: unknown[] = [];\n    let paramIndex = 1;\n\n    if (projectId) {\n      whereClauses.push(`\"projectId\" = $${paramIndex++}`);\n      params.push(projectId);\n    }\n    \n    if (userId) {\n      whereClauses.push(`\"userId\" = $${paramIndex++}`);\n      params.push(userId);\n    }\n    \n    if (action) {\n      whereClauses.push(`\"action\" = $${paramIndex++}`);\n      params.push(action);\n    }\n    \n    if (entityType) {\n      whereClauses.push(`\"entityType\" = $${paramIndex++}`);\n      params.push(entityType);\n    }\n    \n    if (entityId) {\n      whereClauses.push(`\"entityId\" = $${paramIndex++}`);\n      params.push(entityId);\n    }\n    \n    if (cursor) {\n      whereClauses.push(`id < $${paramIndex++}`);\n      params.push(cursor);\n    }\n\n    const whereClause = whereClauses.length > 0 \n      ? `WHERE ${whereClauses.join(' AND ')}` \n      : '';\n\n    // Get activities with user data\n    const query = `\n      SELECT \n        a.id, a.action, a.\"entityType\", a.\"entityId\", a.metadata, \n        a.\"ipAddress\", a.\"userAgent\", a.\"userId\", a.\"projectId\", a.\"createdAt\",\n        u.id as \"user.id\", u.name as \"user.name\", u.email as \"user.email\"\n      FROM \"ActivityLog\" a\n      LEFT JOIN \"User\" u ON a.\"userId\" = u.id\n      ${whereClause}\n      ORDER BY a.\"createdAt\" DESC\n      LIMIT $${paramIndex++}\n    `;\n    \n    params.push(limit);\n    \n    const activities = await this.prisma.$queryRawUnsafe(query, ...params) as Array<RawActivityLog & {\n      \"user.id\"?: string;\n      \"user.name\"?: string | null;\n      \"user.email\"?: string;\n    }>;\n\n    // Map the raw results to ActivityWithUser objects\n    return activities.map(row => ({\n      id: row.id,\n      action: row.action,\n      entityType: row.entityType,\n      entityId: row.entityId,\n      metadata: row.metadata,\n      ipAddress: row.ipAddress,\n      userAgent: row.userAgent,\n      userId: row.userId,\n      projectId: row.projectId,\n      createdAt: row.createdAt,\n      user: row[\"user.id\"] ? {\n        id: row[\"user.id\"]!,\n        name: row[\"user.name\"] || null,\n        email: row[\"user.email\"]!,\n      } : null,\n    }));\n  }\n\n  /**\n   * Get a summary of recent activities\n   * @param projectId Project ID\n   * @param days Number of days to look back\n   * @returns Activity summary\n   */\n  async getActivitySummary(projectId: string, days = 7) {\n    const date = new Date();\n    date.setDate(date.getDate() - days);\n\n    const query = `\n      SELECT \n        DATE(\"createdAt\") as date,\n        \"action\" as event,\n        COUNT(*) as count\n      FROM \"ActivityLog\"\n      WHERE \"projectId\" = $1\n        AND \"createdAt\" >= $2\n      GROUP BY DATE(\"createdAt\"), \"action\"\n      ORDER BY date DESC, count DESC;\n    `;\n\n    return this.prisma.$queryRawUnsafe(query, projectId, date);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/activity-log/dto/log-activity.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/auth.controller.new.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'res' is defined but never used.","line":63,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Controller, \n  Post, \n  Body, \n  HttpStatus, \n  UsePipes, \n  ValidationPipe, \n  Res, \n  Get, \n  Req,\n  UseGuards,\n  HttpCode\n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { AuthService, AuthResponse } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { RefreshTokenGuard } from './guards/refresh-token.guard';\nimport { GetCurrentUserId } from './decorators/get-current-user-id.decorator';\nimport { GetCurrentUser } from './decorators/get-current-user.decorator';\n\n@Controller('auth')\n@UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  async register(\n    @Body() registerDto: RegisterDto,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<AuthResponse> {\n    const result = await this.authService.signup(\n      registerDto.email,\n      registerDto.password,\n      registerDto.name,\n    );\n    \n    this.authService.setRefreshTokenCookie(res, result.refreshToken);\n    \n    return result;\n  }\n\n  @Post('login')\n  @HttpCode(HttpStatus.OK)\n  async login(\n    @Body() loginDto: LoginDto,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<AuthResponse> {\n    const result = await this.authService.login(loginDto.email, loginDto.password);\n    \n    this.authService.setRefreshTokenCookie(res, result.refreshToken);\n    \n    return result;\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refresh')\n  @HttpCode(HttpStatus.OK)\n  async refreshTokens(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<AuthResponse> {\n    const tokens = await this.authService.refreshTokens(userId, refreshToken);\n    const { id, email, name } = await this.authService.getUserById(userId);\n    return { ...tokens, user: { id, email, name } } as const;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('logout')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async logout(\n    @GetCurrentUserId() userId: string,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<boolean> {\n    await this.authService.logout(userId);\n    this.authService.clearRefreshTokenCookie(res);\n    return true;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  getProfile(@Req() req: Request) {\n    return req.user;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/auth.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Request' is defined but never used.","line":15,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiTags' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiBearerAuth' is defined but never used.","line":21,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthResponse' is defined but never used.","line":23,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tokens' is defined but never used.","line":23,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2980,2983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2980,2983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3028,3031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3028,3031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3619,3622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3619,3622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3841,3844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3841,3844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Controller, \n  Post, \n  Body, \n  HttpStatus, \n  HttpException, \n  UsePipes, \n  ValidationPipe, \n  Req, \n  Res, \n  UseGuards, \n  Get, \n  HttpCode \n} from '@nestjs/common';\nimport type { Request, Response } from 'express';\nimport { \n  ApiTags, \n  ApiOperation, \n  ApiResponse, \n  ApiBody, \n  ApiBearerAuth \n} from '@nestjs/swagger';\nimport { AuthService, AuthResponse, Tokens } from './auth.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LoginDto } from './dto/login.dto';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { RefreshTokenGuard } from './guards/refresh-token.guard';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\n@Controller('auth')\n@UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('signup')\n  async signup(\n    @Body() registerDto: RegisterDto,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    try {\n      const result = await this.authService.signup(\n        registerDto.email,\n        registerDto.password,\n        registerDto.name,\n      );\n      \n      // Set refresh token in HTTP-only cookie\n      this.authService.setRefreshTokenCookie(res, result.refreshToken);\n      \n      return {\n        accessToken: result.accessToken,\n        user: {\n          id: result.user.id,\n          email: result.user.email,\n          name: result.user.name || result.user.email.split('@')[0] // Use email prefix as fallback for name\n        }\n      };\n    } catch (error) {\n      throw new HttpException(\n        (error as unknown as Error).message || 'Registration failed',\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n  }\n\n  @Post('register')\n  async register(\n    @Body() registerDto: RegisterDto,\n    @Res({ passthrough: true }) res: Response,\n  ) {\n    return this.signup(registerDto, res);\n  }\n\n  @Post('login')\n  @UseGuards(LocalAuthGuard)\n  @ApiOperation({ summary: 'Login with email and password' })\n  @ApiResponse({ status: 200, description: 'Login successful' })\n  @ApiResponse({ status: 401, description: 'Invalid credentials' })\n  @ApiBody({ type: LoginDto })\n  async login(\n    @Body() loginDto: LoginDto,\n    @Res({ passthrough: true }) res: Response,\n  ): Promise<{ accessToken: string; user: { id: string; email: string; name: string } }> {\n    const { email, password } = loginDto;\n    const result = await this.authService.login(email, password);\n    this.authService.setRefreshTokenCookie(res, result.refreshToken);\n    \n    return {\n      accessToken: result.accessToken,\n      user: {\n        id: result.user.id,\n        email: result.user.email,\n        name: result.user.name || result.user.email.split('@')[0], // Use email prefix as fallback for name\n      },\n    };\n  }\n\n  @UseGuards(RefreshTokenGuard)\n  @Post('refresh')\n  async refreshToken(\n    @Req() req: unknown, \n    @Res({ passthrough: true }) res: Response\n  ) {\n    const userId = (req as any).user.sub;\n    const refreshToken = (req as any).cookies.refreshToken;\n\n    if (!refreshToken) {\n      throw new HttpException('Refresh token is required', HttpStatus.BAD_REQUEST);\n    }\n\n    const tokens = await this.authService.refreshTokens(userId, refreshToken);\n    this.authService.setRefreshTokenCookie(res, tokens.refreshToken);\n\n    return { \n      accessToken: tokens.accessToken,\n      user: tokens.user\n    };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  async logout(\n    @Req() req: unknown, \n    @Res({ passthrough: true }) res: Response\n  ) {\n    await this.authService.logout((req as any).user.id);\n    this.authService.clearRefreshTokenCookie(res);\n    return { message: 'Logged out successfully' };\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Req() req: unknown) {\n    return (req as any).user;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/auth.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/auth.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ForbiddenException' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[604,607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[604,607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2569,2572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2569,2572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2595,2598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2595,2598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3636,3639],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3636,3639],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3662,3665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3662,3665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4008,4011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4008,4011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4034,4037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4034,4037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'payload' is assigned a value but never used.","line":161,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":161,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5250,5253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5250,5253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5276,5279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5276,5279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6181,6184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6181,6184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6207,6210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6207,6210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6689,6692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6689,6692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6715,6718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6715,6718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7050,7053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7050,7053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7076,7079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7076,7079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7988,7991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7988,7991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":283,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8014,8017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8014,8017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  Injectable, \n  UnauthorizedException, \n  ConflictException,\n  ForbiddenException,\n  Logger\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n// Import PrismaService and types\nimport { PrismaService } from '../../prisma/prisma.service';\n\n// Define the user data we want to expose\ninterface SafeUser {\n  id: string;\n  email: string;\n  name: string | null;\n}\nimport * as bcrypt from 'bcryptjs';\nimport { ConfigService } from '@nestjs/config';\nimport { Response } from 'express';\n\nexport interface TokenPayload {\n  sub: string;\n  email: string;\n  name?: string;\n  [key: string]: any;\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: {\n    id: string;\n    email: string;\n    name: string | null;\n  };\n}\n\nexport interface Tokens {\n  accessToken: string;\n  refreshToken: string;\n  user: {\n    id: string;\n    email: string;\n    name: string | null;\n  };\n}\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n  private readonly SALT_ROUNDS = 12;\n  private readonly REFRESH_TOKEN_EXPIRY = '7d';\n  private readonly ACCESS_TOKEN_EXPIRY = '15m';\n\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly prisma: PrismaService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async signup(email: string, password: string, name?: string): Promise<AuthResponse> {\n    try {\n      // Check if user already exists\n      const existingUser = await this.prisma.user.findUnique({ where: { email } });\n      if (existingUser) {\n        throw new ConflictException('Email already in use');\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, this.SALT_ROUNDS);\n      \n      // Create user with default values\n      const user = await this.prisma.user.create({\n        data: {\n          email,\n          name: name || email.split('@')[0], // Use email prefix as default name\n          password: hashedPassword,\n          isApproved: true, // Default to approved\n        },\n      });\n\n      // Generate tokens\n      const tokens = await this.getTokens(user.id, user.email, user.name || '');\n      \n      // Update refresh token in database\n      await this.updateRefreshToken(user.id, tokens.refreshToken);\n      \n      return {\n        accessToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Signup error: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    try {\n      // Find user by email\n      const user = await this.prisma.user.findUnique({ where: { email } });\n      if (!user) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      // Verify password\n      const isPasswordValid = await bcrypt.compare(password, user.password);\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid credentials');\n      }\n\n      // Generate tokens\n      const tokens = await this.getTokens(user.id, user.email, user.name || '');\n      \n      // Update refresh token in database\n      await this.updateRefreshToken(user.id, tokens.refreshToken);\n      \n      return {\n        accessToken: tokens.accessToken,\n        refreshToken: tokens.refreshToken,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Login error: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n  async logout(userId: string): Promise<boolean> {\n    try {\n      await this.prisma.user.updateMany({\n        where: { id: userId, refreshToken: { not: null } },\n        data: { refreshToken: null },\n      });\n      return true;\n    } catch (error) {\n      this.logger.error(`Logout error: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n\n\n  async refreshTokens(userId: string, refreshToken: string): Promise<Tokens> {\n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token is required');\n    }\n\n    try {\n      // Verify the refresh token\n      const payload = this.jwtService.verify(refreshToken, {\n        secret: this.configService.get<string>('JWT_REFRESH_SECRET'),\n      });\n\n      // Verify the user exists\n      const user = await this.prisma.user.findUnique({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Verify the token matches the one in the database\n      if (user.refreshToken !== refreshToken) {\n        throw new UnauthorizedException('Invalid refresh token');\n      }\n\n      // Generate new tokens\n      const tokens = await this.getTokens(user.id, user.email, user.name || undefined);\n      \n      // Update the refresh token in the database\n      await this.prisma.user.update({\n        where: { id: user.id },\n        data: { refreshToken: tokens.refreshToken },\n      });\n\n      return tokens;\n    } catch (error) {\n      this.logger.error(`Refresh token error: ${(error as any).message}`, (error as any).stack);\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n  }\n\n  async validateUser(email: string, password: string): Promise<SafeUser | null> {\n    const user = await this.prisma.user.findUnique({ \n      where: { email },\n      select: { id: true, email: true, name: true, password: true }\n    });\n    \n    if (!user) {\n      return null;\n    }\n\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return null;\n    }\n\n    // Return only the safe user fields\n    return {\n      id: user.id,\n      email: user.email,\n      name: user.name\n    };\n  }\n\n  async verifyToken(token: string): Promise<TokenPayload> {\n    try {\n      return this.jwtService.verify(token, {\n        secret: this.configService.get<string>('JWT_SECRET'),\n      });\n    } catch (error) {\n      this.logger.error(`Token verification failed: ${(error as any).message}`, (error as any).stack);\n      throw new UnauthorizedException('Invalid token');\n    }\n  }\n\n  private async updateRefreshToken(userId: string, refreshToken: string): Promise<void> {\n    try {\n      const hashedRefreshToken = await bcrypt.hash(refreshToken, this.SALT_ROUNDS);\n      await this.prisma.user.update({\n        where: { id: userId },\n        data: { refreshToken: hashedRefreshToken },\n      });\n    } catch (error) {\n      this.logger.error(`Update refresh token error: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n  private async revokeUserRefreshTokens(userId: string): Promise<void> {\n    try {\n      await this.prisma.user.updateMany({\n        where: { id: userId },\n        data: { refreshToken: null },\n      });\n    } catch (error) {\n      this.logger.error(`Revoke refresh tokens error: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n  private async getTokens(userId: string, email: string, name: string): Promise<Tokens> {\n    try {\n      const [accessToken, refreshToken] = await Promise.all([\n        this.jwtService.signAsync(\n          { sub: userId, email, name },\n          {\n            secret: this.configService.get<string>('JWT_SECRET'),\n            expiresIn: this.ACCESS_TOKEN_EXPIRY,\n          },\n        ),\n        this.jwtService.signAsync(\n          { sub: userId, email, name },\n          {\n            secret: this.configService.get<string>('JWT_REFRESH_SECRET'),\n            expiresIn: this.REFRESH_TOKEN_EXPIRY,\n          },\n        ),\n      ]);\n\n      return {\n        accessToken,\n        refreshToken,\n        user: {\n          id: userId,\n          email,\n          name,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Failed to generate tokens: ${(error as any).message}`, (error as any).stack);\n      throw error;\n    }\n  }\n\n  setRefreshTokenCookie(res: Response, refreshToken: string): void {\n    const isProduction = this.configService.get<string>('NODE_ENV') === 'production';\n    res.cookie('refreshToken', refreshToken, {\n      httpOnly: true,\n      secure: isProduction,\n      sameSite: isProduction ? 'strict' : 'lax',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      path: '/',\n    });\n  }\n\n  clearRefreshTokenCookie(res: Response): void {\n    const isProduction = this.configService.get<string>('NODE_ENV') === 'production';\n    res.clearCookie('refreshToken', {\n      httpOnly: true,\n      secure: isProduction,\n      sameSite: isProduction ? 'strict' : 'lax',\n      path: '/',\n    });\n  }\n\n  async getUserById(userId: string) {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      select: { id: true, email: true, name: true }\n    });\n    \n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n    \n    return user;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/decorators/current-user.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/decorators/get-current-user-id.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/decorators/get-current-user.decorator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/dto/auth-credentials.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/dto/login.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/dto/register.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/entities/user.entity.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Column' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrimaryGeneratedColumn' is defined but never used.","line":1,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":48}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Entity, Column, PrimaryGeneratedColumn, BeforeInsert } from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\n\n@Entity('users')\nexport class User {\n  id!: string;\n\n  email!: string;\n\n  password!: string;\n\n  name!: string;\n\n  isApproved!: boolean;\n\n  @BeforeInsert()\n  async hashPassword() {\n    this.password = await bcrypt.hash(this.password, 12);\n  }\n\n  async validatePassword(password: string): Promise<boolean> {\n    return bcrypt.compare(password, this.password);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/jwt-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AuthenticatedRequest' is defined but never used.","line":5,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\n\ntype AuthenticatedRequest = Request & {\n  user: unknown; // You might want to replace 'unknown' with your User type\n};\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext): Request {\n    const ctx = context.switchToHttp();\n    return ctx.getRequest<Request>();\n  }\n\n  handleRequest(err: unknown, user: unknown, info: unknown, context: ExecutionContext) {\n    return super.handleRequest(err, user, info, context);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/jwt-ws-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UnauthorizedException' is defined but never used.","line":1,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'info' is defined but never used.","line":27,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":50}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { WsException } from '@nestjs/websockets';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class JwtWsAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const client = context.switchToWs().getClient();\n    \n    // For WebSocket connections, we need to extract the token from the handshake query\n    const token = client.handshake?.auth?.token || \n                 client.handshake?.query?.token;\n    \n    if (!token) {\n      throw new WsException('Missing authentication token');\n    }\n\n    // For WebSockets, we need to mock the HTTP request object\n    return {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    };\n  }\n\n  handleRequest(err: unknown, user: unknown, info: unknown) {\n    if (err || !user) {\n      throw err || new WsException('Unauthorized');\n    }\n    return user;\n  }\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    return super.canActivate(context);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/local-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/refresh-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/refresh-token.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/ws-jwt-auth.guard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/guards/ws-jwt.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1084,1087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1084,1087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { WsException } from '@nestjs/websockets';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class WsJwtGuard extends AuthGuard('ws-jwt') {\n  constructor(\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {\n    super();\n  }\n\n  getRequest(context: ExecutionContext) {\n    const client = context.switchToWs().getClient();\n    const token = this.extractTokenFromHeader(client);\n    \n    if (!token) {\n      throw new WsException('Unauthorized');\n    }\n\n    try {\n      const payload = this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_SECRET'),\n      });\n      \n      // Attach user to the client for later use\n      client.data = { user: payload };\n      return client;\n    } catch {\n      throw new WsException('Invalid token');\n    }\n  }\n\n  private extractTokenFromHeader(client: unknown): string | undefined {\n    const [type, token] = (client as any).handshake?.auth?.token?.split(' ') ?? [];\n    return type === 'Bearer' ? token : undefined;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/interfaces/auth-response.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/interfaces/user-response.interface.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/strategies/jwt-refresh.strategy.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ExtractJwt' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[517,520],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[517,520],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1184,1187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1184,1187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1494,1497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1494,1497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../../../prisma/prisma.service';\nimport * as bcrypt from 'bcryptjs';\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n}\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  private readonly authConfig: any;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly configService: ConfigService,\n  ) {\n    const authConfig = configService.get('auth', {\n      refreshToken: {\n        cookieName: 'refreshToken',\n        secret: process.env.JWT_REFRESH_SECRET || 'defaultRefreshSecret',\n      },\n    });\n    \n    super({\n      jwtFromRequest: (req: { cookies?: { [key: string]: string } }) => {\n        const cookieName = authConfig?.refreshToken?.cookieName || 'refreshToken';\n        return req?.cookies?.[cookieName];\n      },\n      secretOrKey: authConfig?.refreshToken?.secret || 'defaultRefreshSecret',\n      passReqToCallback: true,\n    } as any); // Using type assertion to bypass the type checking issue\n    \n    this.authConfig = {\n      refreshToken: {\n        cookieName: authConfig?.refreshToken?.cookieName || 'refreshToken',\n        secret: authConfig?.refreshToken?.secret || 'defaultRefreshSecret',\n      },\n    };\n  }\n\n  async validate(req: any, payload: JwtPayload) {\n    const refreshToken = req?.cookies?.[this.authConfig.refreshToken.cookieName];\n    \n    if (!refreshToken) {\n      throw new UnauthorizedException('Refresh token not found');\n    }\n\n    const user = await this.prisma.user.findUnique({\n      where: { id: payload.sub },\n    });\n\n    if (!user || !user.refreshToken) {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.refreshToken,\n    );\n\n    if (!isRefreshTokenMatching) {\n      throw new UnauthorizedException('Invalid refresh token');\n    }\n\n    return { userId: payload.sub, email: payload.email };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/auth/strategies/jwt.strategy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/chat/chat.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocketServer' is defined but never used.","line":3,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1018,1021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1018,1021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1479,1482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1479,1482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  WebSocketGateway,\n  WebSocketServer,\n  OnGatewayInit,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { UseGuards, Logger } from '@nestjs/common';\nimport { Server, Socket } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { createClient } from 'redis';\nimport { JwtWsAuthGuard } from '../auth/guards/jwt-ws-auth.guard';\n\n@WebSocketGateway({ namespace: '/chat', cors: { origin: '*' } })\n@UseGuards(JwtWsAuthGuard)\nexport class ChatGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(ChatGateway.name);\n\n  private _server!: Server;\n\n  get server(): Server {\n    return this._server;\n  }\n\n  async afterInit() {\n    // Redis adapter for horizontal scaling\n    const pubClient = createClient({ url: process.env.REDIS_URL || 'redis://localhost:6379' });\n    const subClient = pubClient.duplicate();\n    await pubClient.connect();\n    await subClient.connect();\n    (this.server as any).adapter(createAdapter(pubClient, subClient));\n    this.logger.log('ChatGateway initialized with Redis adapter');\n  }\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    client.emit('welcome', { message: 'Welcome to the chat!' });\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  // Example message handler\n  async handleMessage(client: Socket, payload: any) {\n    this.logger.log(`Received message from ${client.id}: ${JSON.stringify(payload)}`);\n    this.server.emit('message', payload);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/chat/chat.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/events/dto/track-event.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsEnum' is defined but never used.","line":1,"column":74,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":80},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsNumber' is defined but never used.","line":1,"column":93,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":101}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsString, IsOptional, IsArray, IsObject, IsISO8601, IsNotEmpty, IsEnum, IsBoolean, IsNumber, MaxLength, IsIn } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class EventContextDto {\n  @IsOptional()\n  @IsString()\n  @MaxLength(1000)\n  ip?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(1000)\n  userAgent?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(2000)\n  url?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(2000)\n  path?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(2000)\n  referrer?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  osName?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  osVersion?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  browserName?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  browserVersion?: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['mobile', 'desktop', 'tablet'])\n  deviceType?: 'mobile' | 'desktop' | 'tablet';\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  country?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  region?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(100)\n  city?: string;\n\n  @IsOptional()\n  @IsObject()\n  traits?: Record<string, unknown>;\n}\n\nexport class EventDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  type!: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  name?: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  userId?: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  anonymousId?: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  sessionId?: string;\n\n  @IsString()\n  @IsOptional()\n  @MaxLength(100)\n  projectId?: string;\n\n  @IsISO8601()\n  @IsOptional()\n  timestamp?: string;\n\n  @IsObject()\n  @IsOptional()\n  properties?: Record<string, unknown>;\n\n  @IsOptional()\n  @Type(() => EventContextDto)\n  context?: EventContextDto;\n}\n\nexport class TrackEventsBulkDto {\n  @IsArray()\n  @Type(() => EventDto)\n  events!: EventDto[];\n\n  @IsBoolean()\n  @IsOptional()\n  debug?: boolean = false;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/events/events.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/events/events.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/events/events.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EventDto' is defined but never used.","line":81,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ByTypeItem' is defined but never used.","line":350,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":350,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'byDayResult' is assigned a value but never used.","line":402,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":402,"endColumn":24}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { TrackEventsBulkDto } from './dto/track-event.dto';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\nimport { Prisma, PrismaClient } from '@prisma/client';\n\n// Define the ActivityLog type manually since we can't use Prisma generated types\ninterface ActivityLog {\n  id: string;\n  action: string;\n  entityType: string;\n  entityId: string;\n  metadata: string | null; // Updated to allow null\n  createdAt: Date;\n  userId: string;\n  ipAddress?: string | null;\n  userAgent?: string | null;\n}\nimport type { } from 'node:timers';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Define a custom type for the Prisma transaction client\ntype TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use' | '$extends'> & {\n  activityLog: {\n    create: (args: { \n      data: Omit<ActivityLog, 'id' | 'metadata'> & { metadata?: string | null } \n    }) => Promise<ActivityLog>;\n    groupBy: (args: { \n      by: string[]; \n      where?: Record<string, unknown>;\n      _count?: boolean;\n    }) => Promise<Array<{ action: string; _count: number }>>;\n    findMany: (args?: { where?: Record<string, unknown> }) => Promise<ActivityLog[]>;\n    count: (args?: { where?: Record<string, unknown> }) => Promise<number>;\n  };\n  $queryRaw: <T = unknown>(query: TemplateStringsArray, ...values: unknown[]) => Promise<T[]>;\n  $executeRaw: (query: TemplateStringsArray, ...values: unknown[]) => Promise<number>;\n};\n\ninterface EventStats {\n  total: number;\n  daysWithEvents: number;\n  byType: Record<string, number>;\n  byUser: Record<string, number>;\n  byProject: Record<string, number>;\n}\n\ninterface EventContext {\n  ip?: string;\n  userAgent?: string;\n  url?: string;\n  path?: string;\n  referrer?: string;\n  osName?: string;\n  osVersion?: string;\n  browserName?: string;\n  browserVersion?: string;\n  deviceType?: string;\n  country?: string;\n  region?: string;\n  city?: string;\n}\n\ninterface TrackEvent {\n  id?: string;\n  type: string;\n  userId: string; // Required field\n  projectId?: string;\n  timestamp?: Date | string;\n  context?: EventContext;\n  properties?: Record<string, unknown>;\n  entityType?: string;\n  entityId?: string;\n  name?: string;\n  anonymousId?: string;\n  sessionId?: string;\n  [key: string]: unknown; // Allow additional properties\n}\n\n// EventDto should match the TrackEvent interface but with timestamp as string | Date\ntype EventDto = {\n  type: string;\n  userId?: string;\n  timestamp?: string | Date;\n  projectId?: string;\n  context?: EventContext;\n  properties?: Record<string, unknown>;\n  entityType?: string;\n  entityId?: string;\n  name?: string;\n  anonymousId?: string;\n  sessionId?: string;\n};\n\n@Injectable()\nexport class EventsService implements OnModuleInit {\n  private readonly logger = new Logger(EventsService.name);\n  private readonly BATCH_SIZE = 100;\n  private readonly FLUSH_INTERVAL_MS = 5000;\n  private readonly MAX_BATCH_SIZE = 1000;\n  \n  private eventQueue: TrackEvent[] = [];\n  private flushTimeout: NodeJS.Timeout | null = null;\n  private isProcessing = false;\n  private shutdownListener: (() => void) | null = null;\n\n  constructor(\n    private readonly prisma: PrismaService,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  onModuleInit() {\n    this.scheduleFlush();\n  }\n\n  /**\n   * Track multiple events in bulk\n   * @param dto TrackEventsBulkDto containing events to track\n   */\n  async trackBulk(dto: TrackEventsBulkDto): Promise<void> {\n    const { events, debug = false } = dto;\n\n    // Validate batch size\n    if (events.length > this.MAX_BATCH_SIZE) {\n      throw new Error(`Maximum batch size is ${this.MAX_BATCH_SIZE} events`);\n    }\n\n    // Process events and filter out invalid ones\n    const validEvents: TrackEvent[] = [];\n    \n    for (const event of events) {\n      if (!event.userId) {\n        this.logger.warn('Skipping event - userId is required');\n        continue;\n      }\n      \n      const trackEvent: TrackEvent = {\n        ...event,\n        userId: event.userId, // This is now guaranteed to exist\n        timestamp: event.timestamp ? new Date(event.timestamp) : new Date(),\n      };\n      \n      validEvents.push(trackEvent);\n    }\n\n    if (validEvents.length === 0) {\n      return;\n    }\n\n    // Process events immediately if in debug mode\n    if (debug) {\n      await this.processEventBatch(validEvents, this.prisma as unknown as TransactionClient);\n      return;\n    }\n\n    // Otherwise, enqueue for batch processing\n    await this.enqueueEvents(validEvents);\n  }\n\n  /**\n   * Process events immediately (synchronously)\n   * @param events Array of events to process\n   */\n  private async processEventBatch(events: TrackEvent[], tx: TransactionClient): Promise<void> {\n    if (events.length === 0) return;\n\n    try {\n      for (const event of events) {\n        if (!event.userId) {\n          this.logger.warn('Skipping event - userId is required');\n          continue;\n        }\n        await this.createActivityLog(tx, event.type, event.userId, event.projectId, event.entityType, event.entityId, event.properties, event.context, event.timestamp);\n      }\n      this.logger.log(`Processed ${events.length} events synchronously`);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      this.logger.error(`Error processing events: ${errorMessage}`, errorStack);\n      throw error;\n    }\n  }\n\n  /**\n   * Enqueue events for batch processing\n   */\n  private async enqueueEvents(events: TrackEvent[]): Promise<void> {\n    if (!events || events.length === 0) return;\n    \n    this.eventQueue.push(...events);\n    \n    // Process immediately if we've reached batch size\n    if (this.eventQueue.length >= this.BATCH_SIZE) {\n      await this.processQueue();\n    } else if (!this.flushTimeout) {\n      // Otherwise schedule a flush if one isn't already scheduled\n      this.scheduleFlush();\n    }\n  }\n\n  /**\n   * Process events in the queue\n   */\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.eventQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessing = true;\n    const batch = this.eventQueue.splice(0, this.BATCH_SIZE);\n\n    try {\n      await (this.prisma as unknown).$transaction(async (prismaTx: unknown) => {\n        const tx = prismaTx as unknown as TransactionClient;\n        for (const event of batch) {\n          if (!event.userId) {\n            this.logger.warn('Skipping event - userId is required');\n            continue;\n          }\n          await this.createActivityLog(tx, event.type, event.userId, event.projectId, event.entityType, event.entityId, event.properties, event.context, event.timestamp);\n        }\n      });\n\n      this.logger.log(`Processed ${batch.length} events`);\n      this.eventEmitter.emit('events.processed', { count: batch.length });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n      this.logger.error(`Error processing events: ${errorMessage}`, errorStack);\n      // Requeue the failed batch\n      this.eventQueue.unshift(...batch);\n    } finally {\n      this.isProcessing = false;\n      \n      // Process next batch if there are more events\n      if (this.eventQueue.length > 0) {\n        setImmediate(() => this.processQueue());\n      }\n    }\n  }\n\n  /**\n   * Create an activity log entry from a track event\n   */\n  private async createActivityLog(\n    tx: Prisma.TransactionClient,\n    userId: string,\n    type: string,\n    entityType?: string,\n    entityId?: string,\n    projectId?: string,\n    properties: Record<string, unknown> = {},\n    context: EventContext = {},\n    timestamp?: string | Date\n  ): Promise<ActivityLog> {\n    // Create metadata object with properties and optional projectId\n    const metadataObj = {\n      ...properties,\n      ...(projectId ? { projectId } : {})\n    };\n\n    // Always ensure we have a non-null string for metadata\n    const metadataStr = Object.keys(metadataObj).length > 0 \n      ? JSON.stringify(metadataObj)\n      : '{}';\n\n    // Build the activity data with required fields\n    const activityData = {\n      userId,\n      action: type,\n      entityType: entityType || 'event',\n      entityId: entityId || uuidv4(),\n      metadata: metadataStr, // This is now guaranteed to be a non-null string\n      ...(timestamp ? { createdAt: new Date(timestamp) } : {}),\n      ...(context?.ip ? { ipAddress: context.ip } : {}),\n      ...(context?.userAgent ? { userAgent: context.userAgent } : {}),\n      ...(projectId ? { projectId } : {}),\n    };\n\n    try {\n      return await tx.activityLog.create({ \n        data: activityData \n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      this.logger.error(`Failed to create activity log: ${errorMessage}`, error instanceof Error ? error.stack : undefined);\n      throw error;\n    }\n  }\n\n  /**\n   * Schedule the next queue flush\n   */\n  private scheduleFlush(): void {\n    if (this.flushTimeout) {\n      clearTimeout(this.flushTimeout);\n      this.flushTimeout = null;\n    }\n\n    this.flushTimeout = setTimeout(async () => {\n      try {\n        if (this.eventQueue.length > 0) {\n          await this.processQueue();\n        }\n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        const errorStack = error instanceof Error ? error.stack : undefined;\n        this.logger.error(`Error in scheduled flush: ${errorMessage}`, errorStack);\n      } finally {\n        this.flushTimeout = null;\n      }\n    }, this.FLUSH_INTERVAL_MS);\n  }\n\n  /**\n   * Get event statistics\n   * @param userId User ID to filter events by\n   * @param startDate Start date to filter events by\n   * @param endDate End date to filter events by\n   */\n  async getEventStats(userId: string, startDate: Date, endDate: Date): Promise<EventStats> {\n    try {\n      // Get total count of events\n      const total = await this.prisma.activityLog.count({\n        where: {\n          userId,\n          createdAt: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n      });\n\n      // Get unique days with events\n      const daysWithEvents = await this.prisma.activityLog.findMany({\n        where: {\n          userId,\n          createdAt: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n        select: {\n          createdAt: true,\n        },\n        distinct: ['createdAt'],\n      });\n\n      // Get counts by action type using raw query with type assertion\n      interface ByTypeItem {\n        action: string;\n        count: bigint;\n      }\n\n      // Use Prisma's built-in methods for type safety\n      const byTypeResult = await this.prisma.activityLog.groupBy({\n        by: ['action'],\n        where: {\n          userId,\n          createdAt: {\n            gte: startDate,\n            lte: endDate,\n          },\n        },\n        _count: true,\n      });\n      \n      // Transform the result to match the expected format\n      const byType = byTypeResult.reduce(\n        (acc: Record<string, number>, item: { action: string; _count: number }) => {\n          if (item.action) {\n            acc[item.action] = Number(item._count);\n          }\n          return acc;\n        },\n        {} as Record<string, number>\n      );\n\n      // Get counts by user (if applicable)\n      type UserCountResult = { userId: string; count: bigint };\n      const byUserResult: UserCountResult[] = await this.prisma.$queryRaw`\n        SELECT \n          \"userId\",\n          COUNT(*)::bigint as \"count\"\n        FROM \"ActivityLog\"\n        WHERE \"userId\" IS NOT NULL\n          AND \"createdAt\" >= ${startDate.toISOString()}::timestamptz\n          AND \"createdAt\" <= ${endDate.toISOString()}::timestamptz\n        GROUP BY \"userId\"\n      `;\n\n      const byUser = byUserResult.reduce<Record<string, number>>(\n        (acc: Record<string, number>, item: { userId: string; count: bigint }) => {\n          acc[item.userId] = Number(item.count);\n          return acc;\n        },\n        {} as Record<string, number>\n      );\n\n      // Get daily counts with proper typing\n      type DailyCount = { day: Date; count: bigint };\n      const byDayResult: DailyCount[] = await this.prisma.$queryRaw`\n        SELECT \n          DATE_TRUNC('day', \"createdAt\" AT TIME ZONE 'UTC') as \"day\",\n          COUNT(*)::bigint as \"count\"\n        FROM \"ActivityLog\"\n        WHERE \"userId\" = ${userId}\n          AND \"createdAt\" >= ${startDate.toISOString()}::timestamptz\n          AND \"createdAt\" <= ${endDate.toISOString()}::timestamptz\n        GROUP BY DATE_TRUNC('day', \"createdAt\" AT TIME ZONE 'UTC')\n        ORDER BY \"day\" ASC\n      `;\n\n      // Get counts by project (if projectId exists in the metadata)\n      let byProject: Record<string, number> = {};\n      \n      try {\n        interface ByProjectResult {\n          projectId: string | null;\n          count: bigint;\n        }\n        \n        interface ByProjectResult {\n          projectId: string | null;\n          count: bigint;\n        }\n        \n        const byProjectResult: ByProjectResult[] = await this.prisma.$queryRaw`\n          SELECT \n            json_extract(metadata, '$.projectId') as \"projectId\",\n            COUNT(*)::bigint as \"count\"\n          FROM \"ActivityLog\"\n          WHERE \"userId\" = ${userId}\n            AND \"createdAt\" >= ${startDate.toISOString()}::timestamptz\n            AND \"createdAt\" <= ${endDate.toISOString()}::timestamptz\n          GROUP BY json_extract(metadata, '$.projectId')\n        `;\n\n        byProject = byProjectResult\n          .filter((item: { projectId: string | null }): item is { projectId: string; count: bigint } => Boolean(item.projectId))\n          .reduce<Record<string, number>>((acc: Record<string, number>, item: { projectId: string; count: bigint }) => {\n            acc[item.projectId] = Number(item.count);\n            return acc;\n          }, {} as Record<string, number>);\n      } catch (error) {\n        // Project grouping is optional if metadata.projectId doesn't exist\n        this.logger.warn('Could not group by project', error);\n      }\n\n      return {\n        total,\n        daysWithEvents: daysWithEvents.length,\n        byType,\n        byUser,\n        byProject,\n      };\n    } catch (error) {\n      this.logger.error('Error getting event stats', error);\n      throw new Error('Failed to get event stats');\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/file-transfer/dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/file-transfer/file-transfer.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/file-transfer/file-transfer.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocketServerOptions' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PutObjectCommand' is defined but never used.","line":14,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":36},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getSignedUrl' is defined but never used.","line":15,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  WebSocketGateway, \n  WebSocketServer, \n  OnGatewayConnection, \n  OnGatewayDisconnect,\n  SubscribeMessage,\n  ConnectedSocket,\n  MessageBody,\n  WebSocketServerOptions,\n} from '@nestjs/websockets';\nimport { Server, WebSocket } from 'ws';\nimport { Logger, UseGuards } from '@nestjs/common';\nimport { JwtWsAuthGuard } from '../auth/guards/jwt-ws-auth.guard';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { ConfigService } from '@nestjs/config';\nimport { FileTransferService } from './file-transfer.service';\n\n// Extend the WebSocket type from 'ws' with our custom properties\ntype FileTransferClient = WebSocket & {\n  id: string;\n  userId: string;\n  isAlive: boolean;\n};\n\n@WebSocketGateway({\n  path: '/ws/file-transfer',\n  cors: {\n    origin: process.env.NODE_ENV === 'production' \n      ? ['https://your-production-domain.com']\n      : ['http://localhost:3000'],\n    credentials: true,\n  },\n})\nexport class FileTransferGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer()\n  server!: Server;\n  private readonly logger = new Logger(FileTransferGateway.name);\n  private clients: Map<string, FileTransferClient> = new Map();\n  private s3Client: S3Client;\n  private readonly stunServers: RTCIceServer[] = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n  ];\n\n  constructor(private configService: ConfigService, private service: FileTransferService) {\n    const region = this.configService.get<string>('AWS_REGION');\n    const accessKeyId = this.configService.get<string>('AWS_ACCESS_KEY_ID');\n    const secretAccessKey = this.configService.get<string>('AWS_SECRET_ACCESS_KEY');\n\n    if (!region || !accessKeyId || !secretAccessKey) {\n      throw new Error('Missing required AWS configuration');\n    }\n\n    this.s3Client = new S3Client({\n      region,\n      credentials: {\n        accessKeyId,\n        secretAccessKey,\n      },\n    });\n  }\n\n  async handleConnection(client: FileTransferClient) {\n    client.id = Math.random().toString(36).substring(2, 15);\n    client.isAlive = true;\n    this.clients.set(client.id, client);\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: FileTransferClient) {\n    this.clients.delete(client.id);\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @UseGuards(JwtWsAuthGuard)\n  @SubscribeMessage('init_transfer')\n  async handleInitTransfer(\n    @ConnectedSocket() client: FileTransferClient,\n    @MessageBody() data: { fileName: string; fileSize: number; mimeType: string; toUserId: string },\n  ) {\n    try {\n      // Use service to create transfer and get presign\n      const { uploadUrl, transferId } = await this.service.presign({\n        fileName: data.fileName,\n        mimeType: data.mimeType,\n        size: data.fileSize,\n        toUserId: data.toUserId,\n      }, client.userId); // assume userId set in guard\n\n      return {\n        event: 'transfer-initiated',\n        data: {\n          uploadUrl,\n          transferId,\n          stunServers: this.stunServers,\n        },\n      };\n    } catch (error) {\n      this.logger.error('Error initializing file transfer:', error);\n      return {\n        event: 'transfer-error',\n        data: { message: 'Failed to initialize file transfer' },\n      };\n    }\n  }\n\n  @UseGuards(JwtWsAuthGuard)\n  @SubscribeMessage('offer')\n  async handleOffer(\n    @ConnectedSocket() client: FileTransferClient,\n    @MessageBody() data: { to: string; offer: RTCSessionDescriptionInit },\n  ) {\n    const targetClient = Array.from(this.clients.values()).find(c => c.userId === data.to);\n    if (targetClient) {\n      targetClient.send(JSON.stringify({\n        event: 'offer',\n        data: {\n          from: client.userId,\n          offer: data.offer,\n        },\n      }));\n    }\n  }\n\n  @UseGuards(JwtWsAuthGuard)\n  @SubscribeMessage('answer')\n  async handleAnswer(\n    @ConnectedSocket() client: FileTransferClient,\n    @MessageBody() data: { to: string; answer: RTCSessionDescriptionInit },\n  ) {\n    const targetClient = Array.from(this.clients.values()).find(c => c.userId === data.to);\n    if (targetClient) {\n      targetClient.send(JSON.stringify({\n        event: 'answer',\n        data: {\n          from: client.userId,\n          answer: data.answer,\n        },\n      }));\n    }\n  }\n\n  @UseGuards(JwtWsAuthGuard)\n  @SubscribeMessage('ice-candidate')\n  async handleIceCandidate(\n    @ConnectedSocket() client: FileTransferClient,\n    @MessageBody() data: { to: string; candidate: RTCIceCandidate },\n  ) {\n    const targetClient = Array.from(this.clients.values()).find(c => c.userId === data.to);\n    if (targetClient) {\n      targetClient.send(JSON.stringify({\n        event: 'ice-candidate',\n        data: {\n          from: client.userId,\n          candidate: data.candidate,\n        },\n      }));\n    }\n  }\n\n  emitTransferStatus(toUserId: string, data: { transferId: string; status: string; progress?: number }) {\n    const targetClient = Array.from(this.clients.values()).find(c => c.userId === toUserId);\n    if (targetClient) {\n      targetClient.send(JSON.stringify({\n        event: 'transfer_status',\n        data,\n      }));\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/file-transfer/file-transfer.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigService' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PrismaModule } from '../../prisma/prisma.module';\nimport { FileTransferGateway } from './file-transfer.gateway';\nimport { FileTransferService } from './file-transfer.service';\nimport { FileTransferController } from './file-transfer.controller';\n\n@Module({\n  imports: [\n    ConfigModule,\n    PrismaModule,\n  ],\n  providers: [\n    FileTransferGateway,\n    FileTransferService,\n  ],\n  controllers: [FileTransferController],\n  exports: [FileTransferGateway, FileTransferService],\n})\nexport class FileTransferModule {}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/file-transfer/file-transfer.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dto' is defined but never used.","line":73,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dto' is defined but never used.","line":95,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":48}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { ConfigService } from '@nestjs/config';\nimport { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PresignDto, AcceptDto, DeclineDto } from './dto';\nimport { FileTransferSchema } from '../../../../shared/types';\n\n@Injectable()\nexport class FileTransferService {\n  private s3Client: S3Client;\n\n  constructor(\n    private prisma: PrismaService,\n    private config: ConfigService,\n  ) {\n    const region = this.config.get('AWS_REGION') ?? 'us-east-1';\n    const accessKeyId = this.config.get('AWS_ACCESS_KEY_ID') ?? '';\n    const secretAccessKey = this.config.get('AWS_SECRET_ACCESS_KEY') ?? '';\n    this.s3Client = new S3Client({\n      region,\n      credentials: {\n        accessKeyId,\n        secretAccessKey,\n      },\n    });\n  }\n\n  async presign(dto: PresignDto, fromUserId: string) {\n    const fileKey = `transfers/${uuidv4()}/${dto.fileName}`;\n\n    const putCommand = new PutObjectCommand({\n      Bucket: this.config.get('S3_BUCKET_NAME'),\n      Key: fileKey,\n      ContentType: dto.mimeType,\n      ContentLength: dto.size,\n    });\n\n    const uploadUrl = await getSignedUrl(this.s3Client, putCommand, { expiresIn: 3600 });\n\n    const transfer = await this.prisma.fileTransfer.create({\n      data: {\n        fileName: dto.fileName,\n        size: dto.size,\n        mimeType: dto.mimeType,\n        fromUserId,\n        toUserId: dto.toUserId,\n        status: 'pending',\n        fileKey,\n      },\n    });\n\n    // Validate with Zod\n    FileTransferSchema.parse(transfer);\n\n    return { uploadUrl, transferId: transfer.id };\n  }\n\n  async getTransfers(userId: string) {\n    const transfers = await this.prisma.fileTransfer.findMany({\n      where: {\n        OR: [{ fromUserId: userId }, { toUserId: userId }],\n      },\n    });\n\n    // Validate each with Zod\n    transfers.forEach(t => FileTransferSchema.parse(t));\n\n    return transfers;\n  }\n\n  async accept(id: string, userId: string, dto: AcceptDto) {\n    const transfer = await this.prisma.fileTransfer.findUnique({ where: { id } });\n\n    if (!transfer) throw new NotFoundException('Transfer not found');\n    if (transfer.toUserId !== userId) throw new BadRequestException('Unauthorized');\n    if (transfer.status !== 'pending') throw new BadRequestException('Invalid status');\n\n    const getCommand = new GetObjectCommand({\n      Bucket: this.config.get('S3_BUCKET_NAME'),\n      Key: transfer.fileKey,\n    });\n\n    const downloadUrl = await getSignedUrl(this.s3Client, getCommand, { expiresIn: 3600 });\n\n    await this.prisma.fileTransfer.update({\n      where: { id },\n      data: { status: 'accepted' },\n    });\n\n    return { downloadUrl };\n  }\n\n  async decline(id: string, userId: string, dto: DeclineDto) {\n    const transfer = await this.prisma.fileTransfer.findUnique({ where: { id } });\n\n    if (!transfer) throw new NotFoundException('Transfer not found');\n    if (transfer.toUserId !== userId) throw new BadRequestException('Unauthorized');\n    if (transfer.status !== 'pending') throw new BadRequestException('Invalid status');\n\n    await this.prisma.fileTransfer.update({\n      where: { id },\n      data: { status: 'declined' },\n    });\n\n    return { message: 'Transfer declined' };\n  }\n\n  async download(id: string, userId: string) {\n    const transfer = await this.prisma.fileTransfer.findUnique({ where: { id } });\n\n    if (!transfer) throw new NotFoundException('Transfer not found');\n    if (transfer.toUserId !== userId) throw new BadRequestException('Unauthorized');\n    if (transfer.status !== 'accepted') throw new BadRequestException('Not accepted');\n\n    const getCommand = new GetObjectCommand({\n      Bucket: this.config.get('S3_BUCKET_NAME'),\n      Key: transfer.fileKey,\n    });\n\n    const downloadUrl = await getSignedUrl(this.s3Client, getCommand, { expiresIn: 3600 });\n\n    return { downloadUrl };\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/files/aws-s3.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/files/dto/file-meta.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/files/files.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/files/files.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/files/files.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/inventory/dto/sync-inventory.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsUUID' is defined but never used.","line":1,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":47}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsArray, IsNotEmpty, IsString, IsUUID, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PluginDto {\n  @IsString()\n  @IsNotEmpty()\n  uid!: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name!: string;\n\n  @IsString()\n  @IsNotEmpty()\n  vendor!: string;\n\n  @IsString()\n  @IsNotEmpty()\n  version!: string;\n}\n\nexport class SyncInventoryDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => PluginDto)\n  plugins!: PluginDto[];\n\n  @IsString()\n  @IsNotEmpty()\n  inventoryHash!: string;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/inventory/inventory.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/inventory/inventory.gateway.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ')' expected.","line":34,"column":35,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { UseGuards } from '@nestjs/common';\nimport { WsJwtAuthGuard } from '../auth/guards/ws-jwt-auth.guard';\n\n@WebSocketGateway({\n  namespace: 'inventory',\n  cors: {\n    origin: process.env.NODE_ENV === 'production' \n      ? process.env.FRONTEND_URL \n      : 'http://localhost:3000',\n    credentials: true,\n  },\n})\n@UseGuards(WsJwtAuthGuard)\nexport class InventoryGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  server!: Server;\n\n  private userSockets = new Map<string, string>();\n\n  handleConnection(client: Socket) {\n    const userId = (client as unknown as { user: { sub: string } }).user?.sub; // Set by WsJwtAuthGuard\n    if (userId) {\n      this.userSockets.set(client.id, userId);\n      client.join(`user:${userId}`);\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    this.userSockets.delete(client.id);\n  }\n\n  broadcastInventoryUpdate(userId: string, data: unknown) {\n    this.server.to(`user:${userId}`","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/inventory/inventory.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/inventory/inventory.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'upsertedPlugins' is assigned a value but never used.","line":23,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":28},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":25,"column":53,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":25,"endColumn":61},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":43,"column":74,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":43,"endColumn":82},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":43,"column":96,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":43,"endColumn":104},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":43,"column":118,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":43,"endColumn":126},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":43,"column":140,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":43,"endColumn":148},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":125,"column":53,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":125,"endColumn":61},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":134,"column":86,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":134,"endColumn":94},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":167,"column":65,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":167,"endColumn":73}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { InventoryGateway } from './inventory.gateway';\nimport { PluginDto, SyncInventoryDto } from './dto/sync-inventory.dto';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\n@Injectable()\nexport class InventoryService {\n  private readonly logger = new Logger(InventoryService.name);\n\n  constructor(\n    private prisma: PrismaService,\n    private readonly inventoryGateway: InventoryGateway,\n    private eventEmitter: EventEmitter2,\n  ) {}\n\n  async syncUserInventory(userId: string, dto: SyncInventoryDto) {\n    const { plugins, inventoryHash } = dto;\n    \n    // Start a transaction to ensure data consistency\n    return this.prisma.$transaction(async (prisma: unknown) => {\n      // 1. Upsert all plugins\n      const upsertedPlugins = await Promise.all(\n        plugins.map((plugin) =>\n          (prisma as unknown as { plugin: { upsert: Function } }).plugin.upsert({\n            where: { id: plugin.uid },\n            update: {\n              name: plugin.name,\n              version: plugin.version,\n              updatedAt: new Date(),\n            },\n            create: {\n              id: plugin.uid,\n              name: plugin.name,\n              version: plugin.version,\n              description: plugin.vendor,\n            },\n          }),\n        ),\n      );\n\n      // Get the Prisma userPlugin delegate with proper typing\n      const userPlugin = (prisma as unknown as { userPlugin: { findMany: Function; createMany: Function; deleteMany: Function; updateMany: Function } }).userPlugin as {\n        findMany: (args: unknown) => Promise<Array<{ pluginId: string }>>;\n        createMany: (args: unknown) => Promise<unknown>;\n        deleteMany: (args: unknown) => Promise<unknown>;\n        updateMany: (args: unknown) => Promise<unknown>;\n      };\n\n      // 2. Get current user plugins using the userPlugin delegate\n      const currentUserPlugins = await userPlugin.findMany({\n        where: { userId },\n        select: { pluginId: true },\n      });\n\n      const currentPluginUids = new Set<string>(currentUserPlugins.map((up: { pluginId: string }) => up.pluginId));\n      const newPluginUids = new Set<string>(plugins.map((p: PluginDto) => p.uid));\n\n      // 3. Find plugins to add and remove\n      const pluginsToAdd = Array.from(newPluginUids).filter((uid: string) => !currentPluginUids.has(uid));\n      const pluginsToRemove = Array.from(currentPluginUids).filter((uid: string) => !newPluginUids.has(uid));\n\n      // 4. Update user plugins\n      const updatePromises: Promise<unknown>[] = [];\n      \n      // Add new plugins\n      if (pluginsToAdd.length > 0) {\n        // First, find existing user plugins to avoid duplicates\n        const existingUserPlugins = await userPlugin.findMany({\n          where: {\n            userId,\n            pluginId: { in: [...pluginsToAdd] },\n          },\n          select: {\n            pluginId: true,\n          },\n        });\n        \n        const existingPluginIds = new Set(existingUserPlugins.map((up: { pluginId: string }) => up.pluginId));\n        const pluginsToCreate = pluginsToAdd.filter(pluginId => !existingPluginIds.has(pluginId));\n        \n        if (pluginsToCreate.length > 0) {\n          updatePromises.push(\n            userPlugin.createMany({\n              data: pluginsToCreate.map((pluginId) => ({\n                userId,\n                pluginId,\n                isActive: true,\n              }))\n            })\n          );\n        }\n      }\n\n      // Remove old plugins\n      if (pluginsToRemove.length > 0) {\n        updatePromises.push(\n          userPlugin.deleteMany({\n            where: {\n              userId,\n              pluginId: { in: [...pluginsToRemove] },\n            },\n          })\n        );\n      }\n\n      // Update lastSynced for existing plugins\n      if (newPluginUids.size > 0) {\n        updatePromises.push(\n          userPlugin.updateMany({\n            where: {\n              userId,\n              pluginId: { in: [...newPluginUids] },\n            },\n            data: {\n              updatedAt: new Date(),\n            },\n          })\n        );\n      }\n\n      await Promise.all(updatePromises);\n\n      // 5. Update user's inventory hash\n      await (prisma as unknown as { user: { update: Function } }).user.update({\n        where: { id: userId },\n        data: {\n          inventoryHash,\n          lastInventorySync: new Date(),\n        },\n      });\n\n      // 6. Get the complete updated inventory\n      const updatedInventory = await (prisma as unknown as { userPlugin: { findMany: Function } }).userPlugin.findMany({\n        where: { userId },\n        include: {\n          plugin: true,\n        },\n      });\n\n      // 7. Emit events\n      const eventData = {\n        userId,\n        timestamp: new Date(),\n        added: pluginsToAdd,\n        removed: pluginsToRemove,\n        inventory: updatedInventory.map((up: { plugin: unknown; isActive: boolean; updatedAt: Date }) => ({\n          ...up.plugin,\n          isActive: up.isActive,\n          lastSynced: up.updatedAt,\n        })),\n      };\n\n      // Emit to WebSocket\n      this.inventoryGateway.broadcastInventoryUpdate(userId, eventData);\n      \n      // Emit to event system\n      this.eventEmitter.emit('inventory.updated', eventData);\n\n      this.logger.log(`Inventory synced for user ${userId}: ${pluginsToAdd.length} added, ${pluginsToRemove.length} removed`);\n\n      return eventData;\n    });\n  }\n\n  async getUserInventory(userId: string) {\n    return (this.prisma as unknown as { userPlugin: { findMany: Function } }).userPlugin.findMany({\n      where: { userId },\n      include: {\n        plugin: true,\n      },\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/plugins/plugins.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/plugins/plugins.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/plugins/plugins.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'platform' is assigned a value but never used.","line":12,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable } from '@nestjs/common';\nimport { S3Client, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class PluginsService {\n  constructor(private config: ConfigService) {}\n\n  private s3 = new S3Client({ region: this.config.get('AWS_REGION') });\n\n  async getLatest(platform = 'mac'): Promise<{ url: string; filename: string }> {\n    // TODO: pull from Prisma; hard-code for now\n    const Key = 'installers/Rythm-0.9.3.dmg';\n    const Bucket = this.config.get('PLUGIN_BUCKET');\n    const url = await getSignedUrl(\n      this.s3,\n      new GetObjectCommand({ Bucket, Key }),\n      { expiresIn: 60 },\n    );\n    return { url, filename: 'Rythm-0.9.3.dmg' };\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/presence/dto/heartbeat.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsEnum' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsEnum, IsOptional, IsString } from 'class-validator';\n\nexport enum UserStatus {\n  ONLINE = 'online',\n  IN_DAW = 'in-daw',\n  RECORDING = 'recording',\n  IDLE = 'idle',\n}\n\nexport class HeartbeatDto {\n  status!: UserStatus;\n  \n  @IsOptional()\n  @IsString()\n  projectId?: string;\n  \n  @IsOptional()\n  @IsString()\n  sessionId?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/presence/presence.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/presence/presence.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocketServer' is defined but never used.","line":1,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { UseGuards } from '@nestjs/common';\nimport { WsJwtAuthGuard } from '../auth/guards/ws-jwt-auth.guard';\nimport { PresenceService } from './presence.service';\n\n@WebSocketGateway({\n  namespace: 'presence',\n  cors: {\n    origin: process.env.NODE_ENV === 'production' \n      ? process.env.FRONTEND_URL \n      : 'http://localhost:3000',\n    credentials: true,\n  },\n})\n@UseGuards(WsJwtAuthGuard)\nexport class PresenceGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  server!: Server;\n\n  private userSockets = new Map<string, string>();\n  private projectRooms = new Map<string, Set<string>>();\n\n  constructor(private readonly presenceService: PresenceService) {}\n\n  handleConnection(client: Socket) {\n    const userId = (client as unknown as { user?: { sub: string } }).user?.sub; // Set by WsJwtAuthGuard\n    if (userId) {\n      this.userSockets.set(client.id, userId);\n      client.join(`user:${userId}`);\n      \n      // Join project room if specified in handshake\n      const projectId = (client.handshake.query.projectId as string) || undefined;\n      if (projectId) {\n        this.joinProjectRoom(client, projectId);\n      }\n    }\n  }\n\n  handleDisconnect(client: Socket) {\n    const userId = this.userSockets.get(client.id);\n    if (userId) {\n      // Leave all project rooms\n      this.projectRooms.forEach((clients, projectId) => {\n        if (clients.has(client.id)) {\n          clients.delete(client.id);\n          client.leave(`project:${projectId}`);\n          \n          // Notify others in the project\n          if (clients.size === 0) {\n            this.projectRooms.delete(projectId);\n          } else {\n            this.server.to(`project:${projectId}`).emit('presence-left', { userId, projectId });\n          }\n        }\n      });\n      \n      this.userSockets.delete(client.id);\n    }\n  }\n\n  private async joinProjectRoom(client: Socket, projectId: string) {\n    const userId = this.userSockets.get(client.id);\n    if (!userId) return;\n\n    // Leave previous project room if any\n    this.leaveAllProjectRooms(client);\n    \n    // Join new project room\n    client.join(`project:${projectId}`);\n    \n    // Track room membership\n    if (!this.projectRooms.has(projectId)) {\n      this.projectRooms.set(projectId, new Set());\n    }\n    this.projectRooms.get(projectId)?.add(client.id);\n    \n    // Get user presence status\n    const isOnline = await this.presenceService.getUserPresence(userId);\n    \n    // In a real app, you would fetch the user data from your database here\n    // For now, we'll just use the basic info we have\n    this.server.to(`project:${projectId}`).emit('presence-joined', {\n      userId,\n      status: isOnline ? 'online' : 'offline',\n      user: {\n        id: userId,\n        name: 'User', // This should be fetched from your user service\n        email: 'user@example.com', // This should be fetched from your user service\n      },\n      projectId,\n    });\n    \n    // Send current presence in the room\n    const currentPresence = await this.presenceService.getProjectPresence(projectId);\n    client.emit('presence-sync', currentPresence);\n  }\n\n  private leaveAllProjectRooms(client: Socket) {\n    const userId = this.userSockets.get(client.id);\n    if (!userId) return;\n\n    this.projectRooms.forEach((clients, projectId) => {\n      if (clients.has(client.id)) {\n        clients.delete(client.id);\n        client.leave(`project:${projectId}`);\n        \n        // Notify others in the project\n        if (clients.size === 0) {\n          this.projectRooms.delete(projectId);\n        } else {\n          this.server.to(`project:${projectId}`).emit('presence-left', { userId, projectId });\n        }\n      }\n    });\n  }\n\n  // Called by PresenceService to broadcast presence updates\n  broadcastPresenceUpdate(projectId: string, data: unknown) {\n    this.server.to(`project:${projectId}`).emit('presence-update', data);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/presence/presence.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/presence/presence.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dto' is defined but never used.","line":64,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used.","line":72,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":37}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, OnModuleDestroy } from '@nestjs/common';\nimport { Interval } from '@nestjs/schedule';\n\ntype UserPresence = {\n  userId: string;\n  lastSeen: Date;\n};\n\n@Injectable()\nexport class PresenceService implements OnModuleDestroy {\n  private readonly userPresence = new Map<string, UserPresence>();\n  private readonly HEARTBEAT_INTERVAL = 25000; // 25 seconds\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Clean up disconnected users every minute\n    this.cleanupInterval = setInterval(\n      () => this.cleanupDisconnectedUsers(),\n      this.HEARTBEAT_INTERVAL * 3,\n    );\n  }\n\n  onModuleDestroy() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n  }\n\n  updateUserPresence(userId: string): void {\n    this.userPresence.set(userId, {\n      userId,\n      lastSeen: new Date(),\n    });\n  }\n\n  removeUserPresence(userId: string): void {\n    this.userPresence.delete(userId);\n  }\n\n  isOnline(userId: string): boolean {\n    const presence = this.userPresence.get(userId);\n    if (!presence) return false;\n\n    const now = new Date();\n    const lastSeen = presence.lastSeen.getTime();\n    const timeDiff = now.getTime() - lastSeen;\n    \n    // Consider user online if seen within last 30 seconds (heartbeat is 25s)\n    return timeDiff < 30000;\n  }\n\n  @Interval(30000) // Run every 30 seconds\n  private cleanupDisconnectedUsers() {\n    const now = new Date();\n    const offlineThreshold = now.getTime() - 30000; // 30 seconds\n\n    for (const [userId, presence] of this.userPresence.entries()) {\n      if (presence.lastSeen.getTime() < offlineThreshold) {\n        this.userPresence.delete(userId);\n      }\n    }\n  }\n\n  async updateHeartbeat(userId: string, dto: unknown): Promise<void> {\n    this.updateUserPresence(userId);\n  }\n\n  async getUserPresence(userId: string): Promise<boolean> {\n    return this.isOnline(userId);\n  }\n\n  async getProjectPresence(projectId: string): Promise<Array<{ userId: string; isOnline: boolean }>> {\n    // This is a simplified implementation. In a real app, you would check which users have access to the project\n    const result: Array<{ userId: string; isOnline: boolean }> = [];\n    for (const [userId] of this.userPresence.entries()) {\n      result.push({\n        userId,\n        isOnline: this.isOnline(userId),\n      });\n    }\n    return result;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/dto/crash-report.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsNotEmpty' is defined but never used.","line":1,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":58}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsString, IsOptional, IsObject, IsIn, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CrashReportDto {\n  @ApiProperty({\n    description: 'Type of the crash/error',\n    example: 'uncaught',\n    enum: ['uncaught', 'unhandledrejection', 'window_error', 'promise_rejection', 'resource_error', 'other'],\n  })\n  @IsString()\n  @IsIn(['uncaught', 'unhandledrejection', 'window_error', 'promise_rejection', 'resource_error', 'other'])\n  type!: string;\n\n  @ApiProperty({\n    description: 'Error name',\n    example: 'TypeError',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiProperty({\n    description: 'Error message',\n    example: 'Cannot read property of undefined',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  message?: string;\n\n  @ApiProperty({\n    description: 'Stack trace (will be encrypted)',\n    example: 'TypeError: Cannot read property of undefined\\n    at App.componentWillMount (webpack-internal:///./src/App.js:24:7)',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  stack?: string;\n\n  @ApiProperty({\n    description: 'Platform where the crash occurred',\n    example: 'web',\n    enum: ['web', 'windows', 'macos', 'linux', 'ios', 'android'],\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  @IsIn(['web', 'windows', 'macos', 'linux', 'ios', 'android'])\n  platform?: string;\n\n  @ApiProperty({\n    description: 'Operating system name and version',\n    example: 'Windows 10',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  os?: string;\n\n  @ApiProperty({\n    description: 'Browser name and version',\n    example: 'Chrome 91.0.4472.124',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  browser?: string;\n\n  @ApiProperty({\n    description: 'User agent string',\n    example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  userAgent?: string;\n\n  @ApiProperty({\n    description: 'URL where the crash occurred',\n    example: 'https://example.com/dashboard',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  url?: string;\n\n  @ApiProperty({\n    description: 'Memory usage at crash time',\n    example: { jsHeapSizeLimit: 2330000000, usedJSHeapSize: 12345678, totalJSHeapSize: 23456789 },\n    required: false,\n  })\n  @IsObject()\n  @IsOptional()\n  memoryUsage?: {\n    jsHeapSizeLimit?: number;\n    usedJSHeapSize?: number;\n    totalJSHeapSize?: number;\n  };\n\n  @ApiProperty({\n    description: 'Breadcrumbs leading to the crash (will be encrypted)',\n    example: [\n      { type: 'navigation', data: { from: '/', to: '/dashboard' }, timestamp: 1624567890 },\n      { type: 'click', data: { id: 'save-button' }, timestamp: 1624567891 }\n    ],\n    required: false,\n  })\n  @IsObject({ each: true })\n  @IsOptional()\n  breadcrumbs?: Array<Record<string, unknown>>;\n\n  @ApiProperty({\n    description: 'Additional context (will be encrypted)',\n    example: { userId: 'user_123', projectId: 'proj_456' },\n    required: false,\n  })\n  @IsObject()\n  @IsOptional()\n  context?: Record<string, unknown>;\n\n  @ApiProperty({\n    description: 'Optional project ID',\n    example: 'proj_123',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  projectId?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/dto/webrtc-metric.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IsUUID' is defined but never used.","line":1,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsNumber, IsOptional, IsString, IsUUID, IsIn, IsEnum, IsDate, IsNotEmpty } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport enum MetricCategory {\n  CONNECTION = 'connection',\n  QUALITY = 'quality',\n  NETWORK = 'network',\n  MEDIA = 'media',\n  OTHER = 'other',\n}\n\nexport class WebRtcMetricDto {\n  @ApiProperty({\n    description: 'User ID',\n    example: 'user-123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId!: string;\n\n  @ApiProperty({\n    description: 'Project ID',\n    example: 'project-456',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  projectId?: string;\n\n  @ApiProperty({\n    description: 'Peer connection ID',\n    example: 'pc_1234567890',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  peerConnectionId?: string;\n\n  @ApiProperty({\n    description: 'Round-trip time in milliseconds',\n    example: 45.2,\n    required: false,\n  })\n  @IsNumber()\n  @IsOptional()\n  rttMs?: number;\n\n  @ApiProperty({\n    description: 'Jitter in milliseconds',\n    example: 2.5,\n    required: false,\n  })\n  @IsNumber()\n  @IsOptional()\n  jitterMs?: number;\n\n  @ApiProperty({\n    description: 'Packet loss percentage (0-100)',\n    example: 1.2,\n    required: false,\n  })\n  @IsNumber()\n  @IsOptional()\n  packetLoss?: number;\n\n  @ApiProperty({\n    description: 'Metric category',\n    example: MetricCategory.CONNECTION,\n    enum: MetricCategory,\n  })\n  @IsEnum(MetricCategory)\n  category!: MetricCategory;\n\n  @ApiProperty({\n    description: 'Metric value',\n    example: 1.0,\n  })\n  @IsNumber()\n  value!: number;\n\n  @ApiProperty({\n    description: 'Network type',\n    example: 'wifi',\n    enum: ['wifi', 'cellular', 'ethernet', 'vpn', 'other'],\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  @IsIn(['wifi', 'cellular', 'ethernet', 'vpn', 'other'])\n  networkType?: string;\n\n  @ApiProperty({\n    description: 'Effective network type',\n    example: '4g',\n    enum: ['slow-2g', '2g', '3g', '4g'],\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  @IsIn(['slow-2g', '2g', '3g', '4g'])\n  effectiveType?: string;\n\n  @ApiProperty({\n    description: 'Estimated downlink speed in Mbps',\n    example: 10.5,\n    required: false,\n  })\n  @IsNumber()\n  @IsOptional()\n  downlinkMbps?: number;\n\n  @ApiProperty({\n    description: 'When the metric was created',\n    example: new Date().toISOString(),\n    required: false,\n  })\n  @IsOptional()\n  @Type(() => Date)\n  @IsDate()\n  createdAt?: Date;\n\n  @ApiProperty({\n    description: 'Additional metadata',\n    example: { key: 'value' },\n    required: false,\n  })\n  @IsOptional()\n  metadata?: Record<string, unknown>;\n\n  @ApiProperty({\n    description: 'ICE candidate pair ID',\n    example: 'ice-pair-123',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  iceCandidatePairId?: string;\n\n  @ApiProperty({\n    description: 'Local candidate ID',\n    example: 'local-cand-123',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  localCandidateId?: string;\n\n  @ApiProperty({\n    description: 'Remote candidate ID',\n    example: 'remote-cand-123',\n    required: false,\n  })\n  @IsString()\n  @IsOptional()\n  remoteCandidateId?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/encryption.service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1881,1884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1881,1884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2987,2990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2987,2990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class EncryptionService implements OnModuleInit {\n  private readonly logger = new Logger(EncryptionService.name);\n  private encryptionKey!: Buffer;\n  private readonly ALGORITHM = 'aes-256-gcm';\n  private readonly IV_LENGTH = 12; // For GCM, 12 bytes is recommended\n  private readonly AUTH_TAG_LENGTH = 16; // 16 bytes for GCM\n\n  constructor(private configService: ConfigService) {}\n\n  onModuleInit() {\n    // Get encryption key from environment or generate a secure one\n    const key = this.configService.get<string>('ENCRYPTION_KEY');\n    if (!key) {\n      this.logger.warn('ENCRYPTION_KEY not set, using a random key (not suitable for production)');\n      this.encryptionKey = crypto.randomBytes(32); // 256 bits for AES-256\n    } else {\n      // Derive a consistent key from the provided secret\n      this.encryptionKey = crypto\n        .createHash('sha256')\n        .update(key)\n        .digest();\n    }\n  }\n\n  /**\n   * Encrypts a string using AES-256-GCM\n   */\n  encrypt(text: string): string {\n    if (!text) return text;\n    \n    try {\n      const iv = crypto.randomBytes(this.IV_LENGTH);\n      const cipher = crypto.createCipheriv(\n        this.ALGORITHM,\n        this.encryptionKey,\n        iv,\n        { authTagLength: this.AUTH_TAG_LENGTH }\n      );\n      \n      let encrypted = cipher.update(text, 'utf8', 'base64');\n      encrypted += cipher.final('base64');\n      const authTag = cipher.getAuthTag();\n      \n      // Combine IV + authTag + encrypted data\n      const result = Buffer.concat([\n        iv,\n        authTag,\n        Buffer.from(encrypted, 'base64')\n      ]);\n      \n      return result.toString('base64');\n    } catch (error) {\n      this.logger.error('Encryption failed', (error as any).stack);\n      throw new Error('Failed to encrypt data');\n    }\n  }\n\n  /**\n   * Decrypts a string encrypted with AES-256-GCM\n   */\n  decrypt(encryptedText: string): string {\n    if (!encryptedText) return encryptedText;\n    \n    try {\n      const data = Buffer.from(encryptedText, 'base64');\n      \n      // Extract IV (first 12 bytes)\n      const iv = data.subarray(0, this.IV_LENGTH);\n      \n      // Extract auth tag (next 16 bytes)\n      const authTag = data.subarray(this.IV_LENGTH, this.IV_LENGTH + this.AUTH_TAG_LENGTH);\n      \n      // Extract encrypted data (the rest)\n      const encrypted = data.subarray(this.IV_LENGTH + this.AUTH_TAG_LENGTH);\n      \n      const decipher = crypto.createDecipheriv(\n        this.ALGORITHM,\n        this.encryptionKey,\n        iv,\n        { authTagLength: this.AUTH_TAG_LENGTH }\n      );\n      \n      decipher.setAuthTag(authTag);\n      \n      let decrypted = decipher.update(encrypted, undefined, 'utf8');\n      decrypted += decipher.final('utf8');\n      \n      return decrypted;\n    } catch (error) {\n      this.logger.error('Decryption failed', (error as any).stack);\n      throw new Error('Failed to decrypt data - it may be corrupted or tampered with');\n    }\n  }\n\n  /**\n   * Encrypts an object by converting it to JSON first\n   */\n  encryptObject<T extends object>(obj: T | null): string | null {\n    if (!obj) return null;\n    return this.encrypt(JSON.stringify(obj));\n  }\n\n  /**\n   * Decrypts and parses an encrypted JSON object\n   */\n  decryptObject<T>(encrypted: string | null): T | null {\n    if (!encrypted) return null;\n    return JSON.parse(this.decrypt(encrypted)) as T;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/qos.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/qos.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigService' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PrismaModule } from '../../prisma/prisma.module';\nimport { QosController } from './qos.controller';\nimport { QosService } from './qos.service';\nimport { EncryptionService } from './encryption.service';\n\n@Module({\n  imports: [\n    PrismaModule,\n    ConfigModule,\n  ],\n  controllers: [QosController],\n  providers: [QosService, EncryptionService],\n  exports: [QosService, EncryptionService],\n})\nexport class QosModule implements OnModuleInit, OnModuleDestroy {\n  constructor(private readonly qosService: QosService) {}\n\n  async onModuleInit() {\n    // Initialize any required resources\n  }\n\n  async onModuleDestroy() {\n    // Clean up resources\n    await this.qosService.onModuleDestroy();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/qos/qos.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/rtc/types/socket-events.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/rtc/types/websocket.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/snapshots/dto/create-snapshot.dto.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[476,479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[476,479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IsArray, IsNotEmpty, IsObject, IsOptional, IsString, IsUUID } from 'class-validator';\n\nexport class FileMetadataDto {\n  @IsString()\n  path!: string;\n\n  @IsString()\n  hash!: string;\n\n  @IsString()\n  mimeType!: string;\n\n  @IsOptional()\n  size?: number;\n}\n\nexport class CreateSnapshotDto {\n  @IsUUID()\n  projectId!: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name!: string;\n\n  @IsString()\n  @IsOptional()\n  description?: string;\n\n  @IsObject()\n  metadata!: Record<string, any>;\n\n  @IsArray()\n  @IsOptional()\n  files?: FileMetadataDto[];\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/snapshots/snapshots.controller.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/snapshots/snapshots.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/snapshots/snapshots.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Prisma' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":90,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4280,4283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4280,4283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4555,4558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4555,4558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4915,4918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4915,4918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used.","line":152,"column":64,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":70}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, Logger, NotFoundException, BadRequestException, InternalServerErrorException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { Prisma } from '@prisma/client';\nimport { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { ConfigService } from '@nestjs/config';\nimport { CreateSnapshotDto, FileMetadataDto } from './dto/create-snapshot.dto';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Readable } from 'stream';\nimport * as crypto from 'crypto';\n\n@Injectable()\nexport class SnapshotsService {\n  private readonly logger = new Logger(SnapshotsService.name);\n  private readonly s3Client: S3Client;\n  private readonly bucketName: string;\n  private readonly presignedUrlExpiration = 3600; // 1 hour\n\n  constructor(\n    private prisma: PrismaService,\n    private configService: ConfigService,\n  ) {\n    const awsRegion = this.configService.get<string>('AWS_REGION');\n    const awsAccessKeyId = this.configService.get<string>('AWS_ACCESS_KEY_ID');\n    const awsSecretAccessKey = this.configService.get<string>('AWS_SECRET_ACCESS_KEY');\n    \n    if (!awsRegion || !awsAccessKeyId || !awsSecretAccessKey) {\n      throw new Error('AWS configuration is missing. Please set AWS_REGION, AWS_ACCESS_KEY_ID, and AWS_SECRET_ACCESS_KEY environment variables.');\n    }\n\n    this.s3Client = new S3Client({\n      region: awsRegion,\n      credentials: {\n        accessKeyId: awsAccessKeyId,\n        secretAccessKey: awsSecretAccessKey,\n      },\n    });\n    \n    this.bucketName = this.configService.get<string>('S3_SNAPSHOTS_BUCKET') || 'rhythm-snapshots';\n  }\n\n  async createSnapshot(userId: string, dto: CreateSnapshotDto, file?: Express.Multer.File) {\n    const { projectId, ...snapshotData } = dto;\n    const snapshotId = uuidv4();\n    \n    // Verify project exists\n    const project = await this.prisma.project.findUnique({\n      where: { id: projectId },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project not found');\n    }\n\n    // For now, allow any authenticated user to create snapshots for public projects\n    // In a real application, you might want to implement more granular permissions\n    if (!project.isPublic) {\n      throw new BadRequestException('This project is not public');\n    }\n\n    let fileMetadata: FileMetadataDto[] = [];\n    \n    // Handle file upload if present\n    if (file) {\n      const fileKey = `snapshots/${projectId}/${snapshotId}.zip`;\n      await this.uploadToS3(file.buffer, fileKey, file.mimetype);\n      \n      fileMetadata = [{\n        path: 'snapshot.zip',\n        hash: crypto.createHash('sha256').update(file.buffer).digest('hex'),\n        mimeType: file.mimetype,\n        size: file.size,\n      }];\n    }\n\n    // Create snapshot record\n    const snapshot = await this.prisma.snapshot.create({\n      data: {\n        id: snapshotId,\n        name: snapshotData.name,\n        description: snapshotData.description,\n        data: JSON.stringify({ files: fileMetadata }),\n        projectId,\n      },\n    });\n\n    return snapshot;\n  }\n\n  async getProjectSnapshots(projectId: string, userId: string) {\n    // Verify project exists and is public\n    const project = await this.prisma.project.findUnique({\n      where: { id: projectId },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project not found');\n    }\n\n    // Only allow access to public projects for now\n    if (!project.isPublic) {\n      throw new BadRequestException('This project is not public');\n    }\n\n    // Get snapshots with basic project info\n    const snapshots = await this.prisma.snapshot.findMany({\n      where: { projectId },\n      orderBy: { createdAt: 'desc' },\n      include: {\n        project: {\n          select: {\n            id: true,\n            name: true,\n            description: true,\n            isPublic: true,\n            createdAt: true,\n            updatedAt: true,\n          },\n        },\n      },\n    });\n\n    // Generate signed URLs for files\n    const snapshotsWithUrls = await Promise.all(\n      snapshots.map(async (snapshot: unknown) => {\n        const files: Array<{ path: string; downloadUrl: string }> = [];\n        try {\n          const snapshotData = (snapshot as any).data as { files?: Array<{ path: string }> };\n          if (snapshotData?.files?.length) {\n            const filePromises = snapshotData.files.map(async (file) => ({\n              ...file,\n              downloadUrl: await this.generateDownloadUrl(projectId, (snapshot as any).id, file.path),\n            }));\n            \n            const processedFiles = await Promise.all(filePromises);\n            files.push(...processedFiles);\n          }\n        } catch (error) {\n          this.logger.error('Error processing snapshot files', error);\n        }\n        \n        return {\n          ...snapshot,\n          files,\n        } as any; // Using any to avoid complex type assertions\n      }),\n    );\n\n    return snapshotsWithUrls;\n  }\n\n  async getSnapshotById(projectId: string, snapshotId: string, userId: string) {\n    // Verify project exists and is public\n    const project = await this.prisma.project.findUnique({\n      where: { id: projectId },\n    });\n\n    if (!project) {\n      throw new NotFoundException('Project not found');\n    }\n\n    if (!project.isPublic) {\n      throw new BadRequestException('This project is not public');\n    }\n\n    // Get snapshot with signed URLs for files\n    const snapshot = await this.prisma.snapshot.findUnique({\n      where: { id: snapshotId, projectId },\n    });\n\n    if (!snapshot) {\n      throw new NotFoundException('Snapshot not found');\n    }\n\n    // Process files\n    let files: Array<{ path: string; downloadUrl: string }> = [];\n    try {\n      const snapshotData = snapshot.data as { files?: Array<{ path: string }> };\n      if (snapshotData?.files?.length) {\n        files = await Promise.all(\n          snapshotData.files.map(async (file) => ({\n            ...file,\n            downloadUrl: await this.generateDownloadUrl(projectId, snapshotId, file.path),\n          })),\n        );\n      }\n    } catch (error) {\n      this.logger.error('Error processing snapshot files', error);\n    }\n\n    return {\n      ...snapshot,\n      files,\n    };\n  }\n\n  private generateFileHash(buffer: Buffer): string {\n    return crypto.createHash('sha256').update(buffer).digest('hex');\n  }\n\n  private async generateDownloadUrl(projectId: string, snapshotId: string, filePath: string): Promise<string> {\n    try {\n      const fileKey = `snapshots/${projectId}/${snapshotId}/${filePath}`;\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: fileKey,\n      });\n      return getSignedUrl(this.s3Client, command, { expiresIn: this.presignedUrlExpiration });\n    } catch (error) {\n      this.logger.error(`Error generating download URL for ${filePath}`, error);\n      throw new InternalServerErrorException('Failed to generate download URL');\n    }\n  }\n\n  private async uploadToS3(buffer: Buffer, key: string, contentType: string): Promise<string> {\n    try {\n      const command = new PutObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n        Body: buffer,\n        ContentType: contentType,\n      });\n      \n      await this.s3Client.send(command);\n      return key;\n    } catch (error) {\n      this.logger.error('Error uploading to S3', error);\n      throw new InternalServerErrorException('Failed to upload file');\n    }\n  }\n\n  private async streamToBuffer(stream: Readable): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n      const chunks: Buffer[] = [];\n      stream.on('data', (chunk) => chunks.push(chunk));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(Buffer.concat(chunks)));\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/tags/dto/update-tags.dto.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/tags/tags.controller.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":9,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Controller, Put, Param, Body, UseGuards, Get, Query, Delete } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { GetUser } from '../../common/decorators/get-user.decorator';\nimport type { JwtPayload } from '../../auth/interfaces/jwt-payload.interface';\nimport { TagsService } from './tags.service';\nimport { UpdateTagsDto } from './dto/update-tags.dto';\n// Local interface for Tag based on Prisma schema\ninterface Tag {\n  id: string;\n  name: string;\n  description: string | null;\n  color: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n  entityTags: Array<{\n    id: string;\n    entityType: string;\n    entityId: string;\n    tagId: string;\n    snapshotId: string | null;\n    createdAt: Date;\n  }>;\n}\n\n@ApiTags('tags')\n@Controller('api/tags')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n\n  @Put(':entityType/:entityId')\n  @ApiOperation({ summary: 'Update tags for an entity' })\n  @ApiParam({ name: 'entityType', description: 'Type of the entity (e.g., project, file, snapshot)' })\n  @ApiParam({ name: 'entityId', description: 'ID of the entity' })\n  @ApiResponse({ status: 200, description: 'Tags updated successfully' })\n  @ApiResponse({ status: 400, description: 'Invalid input' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async updateEntityTags(\n    @Param('entityType') entityType: string,\n    @Param('entityId') entityId: string,\n    @GetUser() user: JwtPayload,\n    @Body() updateTagsDto: UpdateTagsDto,\n  ) {\n    return this.tagsService.updateEntityTags(\n      entityType,\n      entityId,\n      user.sub,\n      updateTagsDto,\n    );\n  }\n\n  @Get(':entityType/:entityId')\n  @ApiOperation({ summary: 'Get tags for an entity' })\n  @ApiParam({ name: 'entityType', description: 'Type of the entity' })\n  @ApiParam({ name: 'entityId', description: 'ID of the entity' })\n  @ApiResponse({ status: 200, description: 'Returns the tags for the entity' })\n  @ApiResponse({ status: 404, description: 'Entity not found' })\n  getEntityTags(\n    @Param('entityType') entityType: string,\n    @Param('entityId') entityId: string,\n  ) {\n    return this.tagsService.getEntityTags(entityType, entityId);\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get all tags with counts' })\n  @ApiQuery({ name: 'search', required: false, description: 'Search term for tag names' })\n  @ApiQuery({ name: 'limit', required: false, description: 'Limit the number of results' })\n  @ApiResponse({ status: 200, description: 'Returns all tags with their usage counts' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  async findAll(\n    @Query('search') search?: string,\n    @Query('limit') limit?: number\n  ) {\n    return this.tagsService.findAll({\n      search,\n      limit: limit ? Number(limit) : undefined,\n    });\n  }\n\n  @Delete(':tagId')\n  @ApiOperation({ summary: 'Delete a tag' })\n  @ApiParam({ name: 'tagId', description: 'ID of the tag to delete' })\n  @ApiResponse({ status: 200, description: 'Tag deleted successfully' })\n  @ApiResponse({ status: 400, description: 'Cannot delete tag in use' })\n  @ApiResponse({ status: 404, description: 'Tag not found' })\n  deleteTag(\n    @Param('tagId') tagId: string,\n    @Query('force') force: boolean = false,\n  ) {\n    return this.tagsService.deleteTag(tagId, force);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/tags/tags.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/tags/tags.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Prisma' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { UpdateTagsDto } from './dto/update-tags.dto';\nimport { Prisma } from '@prisma/client';\n\n@Injectable()\nexport class TagsService {\n  constructor(private prisma: PrismaService) {}\n\n  /**\n   * Update tags for an entity\n   * @param entityType Type of the entity (e.g., 'project', 'file', 'snapshot')\n   * @param entityId ID of the entity\n   * @param userId ID of the user performing the update\n   * @param dto UpdateTagsDto containing tag names and optional default color\n   * @returns The updated tags for the entity\n   */\n  async updateEntityTags(\n    entityType: string,\n    entityId: string,\n    userId: string,\n    dto: UpdateTagsDto,\n  ) {\n    const { tags: tagNames, defaultColor = '#6B7280' } = dto;\n\n    // Normalize tag names (trim, lowercase, etc.)\n    const normalizedTags = tagNames\n      .map((name) => name.trim().toLowerCase())\n      .filter((name) => name.length > 0);\n\n    // Get existing tags for this entity\n    const existingTags = await this.prisma.entityTag.findMany({\n      where: {\n        entityType,\n        entityId,\n      },\n      include: {\n        tag: {\n          include: {\n            _count: {\n              select: { entityTags: true }\n            }\n          }\n        },\n      },\n    });\n\n    const existingTagNames = new Set(existingTags.map((et: unknown) => (et as { tag: { name: string } }).tag.name));\n    const newTagNames = normalizedTags.filter((name) => !existingTagNames.has(name));\n\n    // Remove tags that are no longer present\n    const tagsToRemove = existingTags.filter((et: unknown) => !normalizedTags.includes((et as { tag: { name: string } }).tag.name));\n\n    // Create any new tags that don't exist\n    const newTags = await Promise.all(\n      newTagNames.map((name) =>\n        this.prisma.tag.upsert({\n          where: { name },\n          create: {\n            name,\n            color: defaultColor,\n          },\n          update: {},\n        }),\n      ),\n    );\n\n    // Use a transaction to ensure data consistency\n    await this.prisma.$transaction(async (prisma: unknown) => {\n      // Remove old tags that are not in the new list\n      if (tagsToRemove.length > 0) {\n        await prisma.entityTag.deleteMany({\n          where: {\n            entityType,\n            entityId,\n            tagId: { in: tagsToRemove.map((t: unknown) => (t as { id: string }).id) },\n          },\n        });\n      }\n\n      // Add new tags\n      if (newTags.length > 0) {\n        // First, find existing entity tags to avoid duplicates\n        const existingEntityTags = await prisma.entityTag.findMany({\n          where: {\n            entityType,\n            entityId,\n            tagId: { in: newTags.map((tag) => tag.id) },\n          },\n          select: { tagId: true },\n        });\n\n        const existingTagIds = new Set(existingEntityTags.map((et: unknown) => (et as { tagId: string }).tagId));\n        const tagsToCreate = newTags.filter((tag) => !existingTagIds.has(tag.id));\n\n        if (tagsToCreate.length > 0) {\n          await prisma.entityTag.createMany({\n            data: tagsToCreate.map((tag) => ({\n              entityType,\n              entityId,\n              tagId: tag.id,\n              createdById: userId,\n            })),\n          });\n        }\n      }\n    });\n\n    // Return all tags for the entity after update\n    const result = await Promise.all(\n      existingTags.map(async (et: unknown) => {\n        const tag = await this.prisma.tag.findUnique({\n          where: { id: (et as { tagId: string }).tagId },\n        });\n        \n        if (!tag) {\n          throw new NotFoundException(`Tag with ID ${(et as { tagId: string }).tagId} not found`);\n        }\n        \n        return {\n          id: tag.id,\n          name: tag.name,\n          color: tag.color,\n          createdAt: (et as { createdAt: Date }).createdAt,\n        };\n      })\n    );\n\n    const newTagResults = await Promise.all(\n      newTags.map(async (tag) => {\n        const entityTag = await this.prisma.entityTag.create({\n          data: {\n            entityType,\n            entityId,\n            tagId: tag.id,\n          },\n          include: {\n            tag: true,\n          },\n        });\n\n        return {\n          id: entityTag.tag.id,\n          name: entityTag.tag.name,\n          color: entityTag.tag.color,\n          createdAt: entityTag.createdAt,\n        };\n      }),\n    );\n\n    return [...result, ...newTagResults];\n  }\n\n  /**\n   * Get all tags for an entity\n   * @param entityType Type of the entity\n   * @param entityId ID of the entity\n   * @returns Array of tags with their details\n   */\n  async getEntityTags(entityType: string, entityId: string) {\n    const entityTags = await this.prisma.entityTag.findMany({\n      where: {\n        entityType,\n        entityId,\n      },\n      include: {\n        tag: true,\n      },\n    });\n\n    return entityTags.map((et: unknown) => ({\n      id: (et as { tag: { id: string } }).tag.id,\n      name: (et as { tag: { name: string } }).tag.name,\n      color: (et as { tag: { color: string } }).tag.color,\n      createdAt: (et as { tag: { createdAt: Date } }).tag.createdAt,\n    }));\n  }\n\n  /**\n   * Get all tags with counts\n   * @param filter Optional filter by search and limit\n   * @returns Array of tags with their usage counts\n   */\n  async findAll(filter?: { search?: string; limit?: number }) {\n    const where: unknown = {}; // Using unknown to avoid Prisma type issues\n    \n    if (filter?.search) {\n      where.OR = [\n        { name: { contains: filter.search } },\n        { name: { contains: filter.search.toLowerCase() } },\n        { name: { contains: filter.search.toUpperCase() } },\n      ];\n    }\n    \n    const tags = await this.prisma.tag.findMany({\n      where,\n      include: {\n        _count: {\n          select: { entityTags: true },\n        },\n      },\n      take: filter?.limit,\n    });\n    \n    return tags.map((tag: unknown) => ({\n      id: (tag as { id: string }).id,\n      name: (tag as { name: string }).name,\n      description: (tag as { description: string }).description,\n      color: (tag as { color: string }).color,\n      count: (tag as { _count: { entityTags: number } })._count.entityTags,\n    }));\n  }\n\n  /**\n   * Find entities by tags\n   * @param entityType Type of entities to find\n   * @param tags Array of tag names to filter by\n   * @returns Array of entity IDs that have all the specified tags\n   */\n  async findEntitiesByTags(entityType: string, tags: string[]): Promise<string[]> {\n    if (!tags.length) return [];\n\n    interface QueryResult {\n      entityId: string;\n    }\n\n    // Convert tags to a comma-separated string with proper escaping\n    const tagsList = tags.map(tag => `'${tag.replace(/'/g, \"''\")}'`).join(',');\n    \n    const query = `\n      SELECT \"entityId\"\n      FROM \"EntityTag\" et\n      JOIN \"Tag\" t ON et.\"tagId\" = t.id\n      WHERE et.\"entityType\" = $1\n      AND t.name IN (${tagsList})\n      GROUP BY \"entityId\"\n      HAVING COUNT(DISTINCT t.name) = $2\n    `;\n\n    const result = await this.prisma.$queryRawUnsafe(query, entityType, tags.length) as QueryResult[];\n    return result.map(r => r.entityId);\n  }\n\n  /**\n   * Delete a tag by ID\n   * @param tagId ID of the tag to delete\n   * @param force If true, will delete the tag even if it's in use\n   */\n  async deleteTag(tagId: string, force = false) {\n    const tag = await this.prisma.tag.findUnique({\n      where: { id: tagId },\n      include: {\n        _count: { select: { entityTags: true } },\n      },\n    });\n\n    if (!tag) {\n      throw new NotFoundException(`Tag with ID ${tagId} not found`);\n    }\n\n    if (tag._count.entityTags > 0 && !force) {\n      throw new BadRequestException(\n        `Cannot delete tag '${tag.name}' as it's still in use. Use force=true to delete anyway.`,\n      );\n    }\n\n    await this.prisma.$transaction([\n      this.prisma.entityTag.deleteMany({\n        where: { tagId },\n      }),\n      this.prisma.tag.delete({\n        where: { id: tagId },\n      }),\n    ]);\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/users/entities/user.entity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/websocket/chat.gateway.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'OnGatewayInit' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UseFilters' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UseInterceptors' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ClientEvents' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServerEvents' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'InterServerEvents' is defined but never used.","line":36,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SocketData' is defined but never used.","line":37,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1323,1326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1323,1326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2510,2513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2510,2513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9720,9723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9720,9723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":339,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9894,9897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9894,9897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":406,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":406,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11956,11959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11956,11959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'key' is defined but never used.","line":500,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":500,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'map' is defined but never used.","line":500,"column":72,"nodeType":null,"messageId":"unusedVar","endLine":500,"endColumn":75}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n  WebSocketGateway, \n  WebSocketServer, \n  OnGatewayInit, \n  OnGatewayConnection, \n  OnGatewayDisconnect, \n  SubscribeMessage, \n  MessageBody, \n  ConnectedSocket \n} from '@nestjs/websockets';\nimport { \n  Logger, \n  UseFilters, \n  UseGuards, \n  UseInterceptors, \n  Inject, \n  forwardRef, \n  OnModuleInit, \n  OnModuleDestroy \n} from '@nestjs/common';\nimport { Server as IoServer, Socket } from 'socket.io';\nimport { v4 as uuidv4 } from 'uuid';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\n\nimport { JwtWsAuthGuard } from '../auth/guards/jwt-ws-auth.guard';\nimport { AuthService } from '../auth/auth.service';\nimport { WsThrottlerGuard } from './guards/ws-throttler.guard';\nimport { ConfigService } from '@nestjs/config';\nimport { PresenceService } from '../presence/presence.service';\nimport { MessageQueue } from './message-queue';\n\n// Import types first to avoid circular dependencies\nimport { \n  ClientEvents, \n  ServerEvents, \n  InterServerEvents, \n  SocketData \n} from './types/websocket.types';\n\n// Extended socket type with our custom properties\ninterface CustomSocket extends Socket {\n  userId?: string;\n  username?: string;\n  isAlive: boolean;\n  lastPing: number;\n  handshake: {\n    query: {\n      userId?: string;\n      username?: string;\n      [key: string]: any;\n    };\n    [key: string]: any;\n  };\n}\n\ninterface ConnectedClient {\n  socket: CustomSocket;\n  userId: string;\n  username: string;\n  isAlive: boolean;\n  lastPing: number;\n}\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n    methods: ['GET', 'POST'],\n    credentials: true,\n  },\n  namespace: 'chat',\n  pingInterval: 30000,\n  pingTimeout: 10000,\n})\n@UseGuards(JwtWsAuthGuard, WsThrottlerGuard)\nexport class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect, OnModuleInit, OnModuleDestroy {\n  @WebSocketServer()\n  private io!: IoServer;\n  \n  // Alias for backward compatibility\n  get server(): IoServer {\n    return this.io;\n  }\n  \n  private readonly logger = new Logger(ChatGateway.name);\n  private readonly rateLimiter: RateLimiterMemory;\n  private readonly clientQueues = new Map<string, MessageQueue>();\n  private readonly HEARTBEAT_INTERVAL = 30000; // 30 seconds\n  private readonly heartbeatIntervals = new Map<string, NodeJS.Timeout>();\n  private readonly MAX_QUEUE_SIZE = 100; // Max messages in queue before backpressure\n  private readonly connectedClients = new Map<string, ConnectedClient>();\n  private readonly messageQueues = new Map<string, any>();\n  private readonly rooms = new Map<string, Set<string>>();\n\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    private readonly configService: ConfigService,\n    private readonly presenceService: PresenceService,\n  ) {\n    this.rateLimiter = new RateLimiterMemory({\n      points: 100, // 100 messages\n      duration: 60, // per 60 seconds\n    });\n    \n    this.logger = new Logger(ChatGateway.name);\n    this.logger.log('ChatGateway initialized');\n  }\n  \n  afterInit(server: IoServer) {\n    this.io = server;\n  }\n\n  onModuleInit() {\n    this.logger.log('ChatGateway initialized');\n  }\n\n  async handleConnection(client: CustomSocket) {\n    try {\n      // Initialize client properties\n      client.isAlive = true;\n      client.lastPing = Date.now();\n      \n      const userId = client.handshake?.query?.userId as string | undefined;\n      const username = (client.handshake?.query?.username as string | undefined) || 'anonymous';\n      \n      if (!userId) {\n        this.logger.warn('Connection rejected: Missing userId');\n        client.disconnect(true);\n        return;\n      }\n      \n      // Store connected client with required properties\n      const connectedClient: ConnectedClient = {\n        socket: client,\n        userId,\n        username,\n        isAlive: true,\n        lastPing: Date.now()\n      };\n      \n      this.connectedClients.set(client.id, connectedClient);\n      this.logger.log(`Client connected: ${client.id} (User: ${username})`);\n      \n      // Set up ping-pong for connection health\n      const pingInterval = setInterval(() => {\n        const clientData = this.connectedClients.get(client.id);\n        if (!clientData?.isAlive) {\n          client.disconnect(true);\n          return clearInterval(pingInterval);\n        }\n        \n        clientData.isAlive = false;\n        client.emit('ping');\n      }, this.HEARTBEAT_INTERVAL);\n      \n      // Clean up interval on disconnect\n      client.once('disconnect', () => {\n        clearInterval(pingInterval);\n        this.connectedClients.delete(client.id);\n      });\n      \n      client.on('pong', () => {\n        const clientData = this.connectedClients.get(client.id);\n        if (clientData) {\n          clientData.isAlive = true;\n          clientData.lastPing = Date.now();\n        }\n      });\n      \n      // Initialize message queue for this client\n      if (!this.messageQueues.has(client.id)) {\n        const messageQueue = new MessageQueue(client);\n        this.messageQueues.set(client.id, messageQueue);\n        this.clientQueues.set(client.id, messageQueue);\n      }\n      \n      // Set up heartbeat\n      this.setupHeartbeat(client);\n      \n      // Update presence\n      this.presenceService.updateUserPresence(userId);\n      \n      // Notify others about the new connection using the server instance\n      this.server.emit('userConnected', {\n        userId,\n        username,\n        timestamp: new Date().toISOString(),\n      });\n      \n      // Send the list of connected users to the new client\n      const connectedUsers = Array.from(this.connectedClients.values())\n        .filter(c => c.userId)\n        .map(({ userId, username }) => ({ userId, username }));\n      \n      client.emit('userList', connectedUsers);\n      client.on('pong', () => {\n        client.isAlive = true;\n        client.lastPing = Date.now();\n      });\n      \n      // Update presence if userId is available from handshake\n      const presenceUserId = client.handshake.query.userId as string;\n      if (presenceUserId) {\n        this.presenceService.updateUserPresence(presenceUserId);\n      }\n      \n    } catch (error) {\n      this.logger.error('Error in handleConnection:', error);\n      client.disconnect(true);\n    }\n  }\n\n  async handleDisconnect(client: CustomSocket) {\n    try {\n      const disconnectedClient = this.connectedClients.get(client.id);\n      \n      if (!disconnectedClient) {\n        this.logger.warn(`No client found for socket ID: ${client.id}`);\n        return;\n      }\n      \n      const { userId, username } = disconnectedClient;\n      const logPrefix = `[${client.id}] [User: ${username || 'unknown'}]`;\n      \n      this.logger.log(`${logPrefix} Disconnecting...`);\n      \n      // Notify others about the disconnection\n      this.server.emit('userDisconnected', {\n        userId,\n        username,\n        timestamp: new Date().toISOString(),\n      });\n      \n      // Clean up resources\n      this.cleanupClientResources(client.id);\n      \n      // Remove presence on disconnect if we have a valid userId\n      if (userId) {\n        this.presenceService.removeUserPresence(userId);\n      }\n      \n      this.logger.log(`${logPrefix} Disconnected successfully`);\n    } catch (error) {\n      this.logger.error(`Error in handleDisconnect for client ${client.id}:`, error);\n    }\n  }\n  \n  /**\n   * Cleans up all resources associated with a client\n   * @param clientId - The ID of the client to clean up\n   */\n  private cleanupClientResources(clientId: string): void {\n    // Remove from connected clients\n    this.connectedClients.delete(clientId);\n    \n    // Clean up message queue\n    const queue = this.clientQueues.get(clientId);\n    if (queue) {\n      queue.stop();\n      this.clientQueues.delete(clientId);\n    }\n    \n    // Clean up heartbeat\n    this.clearHeartbeat(clientId);\n    \n    // Clean up message queues\n    this.messageQueues.delete(clientId);\n    \n    // Remove from all rooms\n    this.rooms.forEach((sockets, roomId) => {\n      if (sockets.has(clientId)) {\n        sockets.delete(clientId);\n        if (sockets.size === 0) {\n          this.rooms.delete(roomId);\n        }\n      }\n    });\n  }\n\n  async onModuleDestroy() {\n    this.logger.log('Cleaning up WebSocket resources...');\n    \n    // Clear all heartbeat intervals\n    this.heartbeatIntervals.forEach((interval, clientId) => {\n      clearInterval(interval);\n      this.heartbeatIntervals.delete(clientId);\n    });\n    \n    // Disconnect all clients\n    this.connectedClients.forEach(client => {\n      try {\n        if (client?.socket) {\n          client.socket.disconnect(true);\n        }\n      } catch (err) {\n        this.logger.error(`Error disconnecting client: ${err}`);\n      }\n    });\n    \n    // Clear all collections\n    this.connectedClients.clear();\n    this.messageQueues.clear();\n    this.rooms.clear();\n    this.clientQueues.clear();\n    \n    this.logger.log('WebSocket resources cleaned up');\n  }\n\n  private async sendToClient(client: CustomSocket, event: string, data: unknown): Promise<void> {\n    try {\n      const queue = this.clientQueues.get(client.id);\n      if (queue) {\n        await queue.enqueue(event, data);\n      } else {\n        client.emit(event, data);\n      }\n    } catch (error) {\n      this.logger.error(`Error sending to client ${client.id}:`, error);\n    }\n  }\n\n  @SubscribeMessage('authenticate')\n  async handleAuth(\n    @ConnectedSocket() client: CustomSocket,\n    @MessageBody() data: { token: string; projectId?: string },\n  ) {\n    try {\n      const user = await this.authService.verifyToken(data.token);\n      if (!user) {\n        throw new Error('Invalid token');\n      }\n\n      // Store user info on the socket\n      (client as any).user = user;\n\n      // Join project room if projectId is provided\n      if (data.projectId) {\n        await client.join(`project:${data.projectId}`);\n        (client as any).projectId = data.projectId;\n      }\n\n      return { success: true, user: { id: user.id, username: user.username } };\n    } catch (error) {\n      this.logger.error('Authentication error:', error);\n      throw new Error('Authentication failed');\n    }\n  }\n\n  private clearHeartbeat(clientId: string): void {\n    const interval = this.heartbeatIntervals.get(clientId);\n    if (interval) {\n      clearInterval(interval);\n      this.heartbeatIntervals.delete(clientId);\n      this.logger.debug(`Cleared heartbeat for client ${clientId}`);\n    }\n  }\n\n  private setupHeartbeat(client: CustomSocket): void {\n    const clientId = client.id;\n    // Clear any existing heartbeat for this client\n    this.clearHeartbeat(clientId);\n    \n    const interval = setInterval(() => {\n      const clientData = this.connectedClients.get(clientId);\n      if (!clientData?.isAlive) {\n        this.logger.warn(`Client ${clientId} heartbeat timeout`);\n        return client.disconnect(true);\n      }\n      \n      clientData.isAlive = false;\n      client.emit('ping');\n    }, this.HEARTBEAT_INTERVAL);\n    \n    this.heartbeatIntervals.set(clientId, interval);\n    \n    const onPong = () => {\n      const clientData = this.connectedClients.get(clientId);\n      if (clientData) {\n        clientData.isAlive = true;\n        clientData.lastPing = Date.now();\n      }\n    };\n    \n    const onDisconnect = () => {\n      this.clearHeartbeat(clientId);\n      client.off('pong', onPong);\n      client.off('disconnect', onDisconnect);\n    };\n    \n    client.on('pong', onPong);\n    client.once('disconnect', onDisconnect);\n  }\n\n  private async handleRateLimit(client: CustomSocket): Promise<boolean> {\n    try {\n      await this.rateLimiter.consume(client.id);\n      return true;\n    } catch (error) {\n      this.logger.warn(`Rate limit exceeded for client ${client.id}`);\n      client.emit('error', { message: 'Rate limit exceeded. Please try again later.' });\n      client.disconnect(true);\n      return false;\n    }\n  }\n\n  private async broadcastToRoom(roomId: string, event: string, data: any, excludeClientId?: string): Promise<void> {\n    const room = this.rooms.get(roomId);\n    if (!room) {\n      this.logger.warn(`Attempted to broadcast to non-existent room: ${roomId}`);\n      return;\n    }\n\n    const sockets = Array.from(room)\n      .map(socketId => this.connectedClients.get(socketId)?.socket)\n      .filter((socket): socket is CustomSocket => !!socket);\n\n    await Promise.all(\n      sockets.map(socket => {\n        if (socket.id !== excludeClientId) {\n          return this.sendToClient(socket, event, data);\n        }\n        return Promise.resolve();\n      })\n    );\n  }\n\n  @SubscribeMessage('message')\n  async handleMessage(\n    @ConnectedSocket() client: CustomSocket,\n    @MessageBody() data: { content?: string; roomId?: string },\n  ) {\n    const userId = client.handshake?.query?.userId as string | undefined;\n    const username = (client.handshake?.query?.username as string | undefined) || 'Anonymous';\n    const logPrefix = `[${client.id}] [User: ${username}]`;\n  \n    if (!userId) {\n      this.logger.warn(`${logPrefix} Unauthenticated message attempt`);\n      client.emit('error', { \n        code: 'UNAUTHENTICATED',\n        message: 'Authentication required' \n      });\n      return;\n    }\n    \n    if (!data?.content?.trim()) {\n      this.logger.warn(`${logPrefix} Empty message content`);\n      client.emit('error', {\n        code: 'INVALID_INPUT',\n        message: 'Message content cannot be empty'\n      });\n      return;\n    }\n  \n    try {\n      // Apply rate limiting\n      const canProceed = await this.handleRateLimit(client);\n      if (!canProceed) {\n        this.logger.warn(`${logPrefix} Rate limit exceeded`);\n        return;\n      }\n  \n      const timestamp = new Date().toISOString();\n      const message = {\n        id: uuidv4(),\n        content: data.content.trim(),\n        userId,\n        username,\n        timestamp,\n        roomId: data.roomId\n      };\n      \n      this.logger.log(`${logPrefix} Sending message to ${data.roomId ? `room ${data.roomId}` : 'all clients'}`);\n  \n      // Broadcast message to room or all clients\n      if (data.roomId) {\n        await this.broadcastToRoom(data.roomId, 'message', message, client.id);\n      } else {\n        this.server.emit('message', message);\n      }\n      \n      // Acknowledge the message was sent\n      client.emit('messageAck', { id: message.id, timestamp });\n    } catch (error) {\n      const errorId = uuidv4();\n      this.logger.error(`${logPrefix} Error handling message (${errorId}):`, error);\n      \n      client.emit('error', { \n        id: errorId,\n        code: 'MESSAGE_DELIVERY_FAILED',\n        message: 'Failed to send message',\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  private getUserClients(userId: string): CustomSocket[] {\n    const clients: CustomSocket[] = [];\n    \n    if (this.server?.sockets?.sockets) {\n      this.server.sockets.sockets.forEach((value: Socket, key: string, map: Map<string, Socket>) => {\n        const socket = value as CustomSocket;\n        const socketUserId = (socket.handshake.query.userId as string) || '';\n        if (socketUserId === userId) {\n          clients.push(socket);\n        }\n      });\n    }\n    \n    return clients;\n  }\n\n  async broadcastToProject(projectId: string, message: unknown): Promise<void> {\n    const clients = this.getUserClients(projectId);\n    \n    await Promise.all(\n      clients.map(client => {\n        try {\n          return new Promise<void>((resolve) => {\n            client.emit('broadcast', message, () => resolve());\n          }).catch((err: Error) => {\n            this.logger.error(`Broadcast failed: ${err.message}`);\n          });\n        } catch (err) {\n          this.logger.error('Error in broadcastToProject:', err);\n          return Promise.resolve();\n        }\n      })\n    );\n  }\n\n  private findRecipientQueue(userId: string): MessageQueue | undefined {\n    for (const [clientId, queue] of this.clientQueues.entries()) {\n      const client = this.connectedClients.get(clientId);\n      if (client?.userId === userId) {\n        return queue;\n      }\n    }\n    return undefined;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/websocket/guards/ws-throttler.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[927,930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[927,930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { WsException } from '@nestjs/websockets';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\n\n@Injectable()\nexport class WsThrottlerGuard implements CanActivate {\n  private readonly rateLimiter: RateLimiterMemory;\n  private readonly logger = console;\n\n  constructor() {\n    // 100 messages per second per connection\n    this.rateLimiter = new RateLimiterMemory({\n      points: 100,\n      duration: 1,\n    });\n  }\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const client = context.switchToWs().getClient();\n    const ip = this.getClientIp(client);\n    \n    try {\n      await this.rateLimiter.consume(`ws:${ip}`);\n      return true;\n    } catch (error) {\n      this.logger.warn(`Rate limit exceeded for IP: ${ip}`);\n      throw new WsException('Rate limit exceeded');\n    }\n  }\n\n  private getClientIp(client: any): string {\n    // Try to get IP from WebSocket connection\n    if (client._socket && client._socket.remoteAddress) {\n      return client._socket.remoteAddress;\n    }\n    // Fallback to connection ID if IP is not available\n    return client.id || 'unknown';\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/websocket/message-queue.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98,101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98,101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[436,439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[436,439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Socket } from 'socket.io';\n\nexport interface QueuedMessage {\n  event: string;\n  payload: any;\n}\n\nexport class MessageQueue {\n  private queue: QueuedMessage[] = [];\n  private isProcessing = false;\n  private client: Socket;\n  private isActive = true;\n\n  constructor(client: Socket) {\n    this.client = client;\n  }\n\n  /**\n   * Add a message to the queue and start processing if not already\n   */\n  enqueue(event: string, payload: any): void {\n    if (!this.isActive) return;\n\n    this.queue.push({ event, payload });\n    this.processQueue();\n  }\n\n  /**\n   * Process messages in the queue with a small delay between each\n   */\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.queue.length === 0 || !this.isActive) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    try {\n      // Process messages with a small delay between each\n      while (this.queue.length > 0 && this.isActive) {\n        const { event, payload } = this.queue.shift()!;\n        \n        // Emit the message to the client\n        this.client.emit(event, payload);\n        \n        // Add a small delay between messages if there are more in the queue\n        if (this.queue.length > 0) {\n          await new Promise(resolve => setTimeout(resolve, 10));\n        }\n      }\n    } catch (error) {\n      console.error('Error processing message queue:', error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Stop processing and clean up the queue\n   */\n  stop(): void {\n    this.isActive = false;\n    this.queue = [];\n  }\n\n  /**\n   * Get the current queue size\n   */\n  get size(): number {\n    return this.queue.length;\n  }\n\n  /**\n   * Check if the queue is currently processing messages\n   */\n  get processing(): boolean {\n    return this.isProcessing;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/websocket/types/websocket.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/modules/websocket/websocket.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Logger' is defined but never used.","line":1,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1368,1371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1368,1371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module, OnModuleInit, OnModuleDestroy, Logger, Global } from '@nestjs/common';\nimport { ChatGateway } from './chat.gateway';\nimport { WsThrottlerGuard } from '../../common/guards/ws-throttler.guard';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtWsAuthGuard } from '../auth/guards/jwt-ws-auth.guard';\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Global()\n@Module({\n  imports: [\n    ConfigModule,\n    AuthModule,\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        throttlers: [{\n          ttl: config.get<number>('THROTTLE_TTL', 60) * 1000, // Convert to milliseconds\n          limit: config.get<number>('THROTTLE_LIMIT', 100),\n        }],\n      }),\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get<string>('JWT_SECRET'),\n        signOptions: { expiresIn: '1d' },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  providers: [\n    ChatGateway,\n    // In-memory storage for WebSocket connections\n    {\n      provide: 'WS_CONNECTIONS',\n      useValue: new Map<string, any>(),\n    },\n    {\n      provide: APP_GUARD,\n      useClass: JwtWsAuthGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: WsThrottlerGuard,\n    },\n  ],\n  exports: [ChatGateway],\n})\nexport class WebSocketModule implements OnModuleInit, OnModuleDestroy {\n  constructor(private readonly gateway: ChatGateway) {}\n\n  onModuleInit() {\n    // WebSocket server is started automatically by NestJS\n  }\n\n  onModuleDestroy() {\n    // Remove or comment out:\n    // if (this.gateway.cleanup) {\n    //   this.gateway.cleanup();\n    // }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/prisma/prisma.module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/prisma/prisma.service.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Prisma' is defined but never used.","line":2,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';\nimport { PrismaClient, Prisma } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async clearDatabase() {\n    if (process.env.NODE_ENV === 'production') return;\n    \n    // List of model names in the schema\n    const modelNames = [\n      'User',\n      'ActivityLog',\n      'Project',\n      // Add other model names as needed\n    ];\n    \n    return Promise.all(\n      modelNames.map((modelName) => {\n        const prismaModelKey = modelName[0].toLowerCase() + modelName.slice(1);\n        return (this as any)[prismaModelKey]?.deleteMany?.({});\n      }),\n    ).then(results => {\n      // Filter out undefined results in case some models don't have deleteMany\n      return results.filter(Boolean);\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/express.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/express/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/socket-io.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/socket.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/types/socket.io.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[405,408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[405,408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[438,441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[438,441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[450,453],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[450,453],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[520,523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[520,523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[591,594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[591,594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1057,1060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1057,1060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1106,1109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1106,1109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1337,1340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1337,1340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1522,1525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1522,1525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1557,1560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1557,1560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1595,1598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1595,1598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1635,1638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1635,1638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1827,1830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1827,1830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1866,1869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1866,1869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1995,1998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1995,1998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2270,2273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2270,2273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2316,2319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2316,2319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2425,2428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2425,2428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2492,2495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2492,2495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2569,2572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2569,2572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3533,3536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3533,3536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3603,3606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3603,3606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3654,3657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3654,3657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type declarations for socket.io v4.8.1 with @types/socket.io v3.0.2\ndeclare module 'socket.io' {\n  import { Server as HttpServer } from 'http';\n  import { Server as HttpsServer } from 'https';\n  import { Server as NetServer } from 'net';\n  import { EventEmitter } from 'events';\n\n  interface Server extends EventEmitter {\n    // Server methods\n    attach(srv: HttpServer | HttpsServer | number, opts?: any): Server;\n    attachApp(app: any, opts?: any): void;\n    listen(srv: HttpServer | HttpsServer | number, opts?: any): Server;\n    bind(srv: NetServer): void;\n    onconnection(socket: any): void;\n    of(nsp: string): Namespace;\n    close(callback?: () => void): void;\n    \n    // Socket.IO v4 methods\n    to(room: string | string[]): Server;\n    in(room: string | string[]): Server;\n    except(room: string | string[]): Server;\n    socketsJoin(room: string | string[]): void;\n    socketsLeave(room: string | string[]): void;\n    disconnectSockets(close?: boolean): void;\n    fetchSockets(): Promise<Socket[]>;\n    serverSideEmit(ev: string, ...args: any[]): void;\n    \n    // Properties\n    engine: any;\n    nsps: { [namespace: string]: Namespace };\n    sockets: Namespace;\n  }\n\n  interface Namespace extends EventEmitter {\n    name: string;\n    connected: { [id: string]: Socket };\n    sockets: Map<string, Socket>;\n    adapter: any;\n    \n    to(room: string): Namespace;\n    in(room: string): Namespace;\n    use(fn: (socket: Socket, next: (err?: Error) => void) => void): Namespace;\n    emit(ev: string, ...args: any[]): boolean;\n    send(...args: any[]): Namespace;\n    write(...args: any[]): Namespace;\n    clients(...args: any[]): Namespace;\n    compress(compress: boolean): Namespace;\n  }\n\n  interface Socket extends EventEmitter {\n    id: string;\n    connected: boolean;\n    disconnected: boolean;\n    handshake: any;\n    rooms: Set<string>;\n    data: any;\n    \n    // Custom properties\n    user?: {\n      id: string;\n      email: string;\n      name?: string;\n      [key: string]: any;\n    };\n    \n    // Socket.IO v4 methods\n    join(room: string | string[]): Promise<string[]>;\n    leave(room: string): void;\n    to(room: string | string[]): Socket;\n    in(room: string | string[]): Socket;\n    except(room: string | string[]): Socket;\n    send(...args: any[]): Socket;\n    emit(ev: string, ...args: any[]): boolean;\n    broadcast: Socket;\n    \n    // Event handling\n    on(event: string, listener: (...args: any[]) => void): this;\n    once(event: string, listener: (...args: any[]) => void): this;\n    removeListener(event: string, listener: (...args: any[]) => void): this;\n    removeAllListeners(event?: string): this;\n    disconnect(close?: boolean): Socket;\n  }\n\n  interface ServerOptions {\n    path?: string;\n    serveClient?: boolean;\n    connectTimeout?: number;\n    cors?: {\n      origin: string | string[] | ((origin: string, callback: (err: Error | null, success: boolean) => void) => void);\n      methods?: string[];\n      allowedHeaders?: string[];\n      credentials?: boolean;\n    };\n    allowEIO3?: boolean;\n    pingTimeout?: number;\n    pingInterval?: number;\n    maxHttpBufferSize?: number;\n    httpCompression?: boolean | object;\n    transports?: string[];\n    allowUpgrades?: boolean;\n    perMessageDeflate?: boolean | object;\n    cookie?: string | boolean | object;\n    // Add other options as needed\n  }\n\n  function listen(srv: HttpServer | HttpsServer | number, opts?: ServerOptions): Server;\n  function listen(port: number, opts?: ServerOptions): Server;\n  function listen(port: number, opts?: any, fn?: () => void): Server;\n  \n  export const Server: {\n    (srv?: any, opts?: ServerOptions): Server;\n    new (srv?: any, opts?: ServerOptions): Server;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/src/ws/ws-adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IncomingMessage' is defined but never used.","line":5,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ServerResponse' is defined but never used.","line":5,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":77}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Injectable, Logger } from '@nestjs/common';\nimport type { INestApplication } from '@nestjs/common';\nimport { ServerOptions, Server as SocketIOServer, Socket } from 'socket.io';\nimport { createServer, Server as HttpServer, IncomingMessage, ServerResponse } from 'http';\nimport { Server as WsServer } from 'ws';\nimport { INestApplicationContext } from '@nestjs/common/interfaces/nest-application-context.interface';\n\n// Global error handler for uncaught exceptions in WebSocket handlers\nprocess.on('uncaughtException', (error) => {\n  console.error('WebSocket uncaught exception:', error);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('WebSocket unhandled rejection at:', promise, 'reason:', reason);\n});\n\n@Injectable()\nexport class WsAdapter extends IoAdapter {\n  private readonly logger = new Logger(WsAdapter.name);\n  protected httpServer: HttpServer | null = null;\n  private wsServer: WsServer | null = null;\n  private app: INestApplicationContext;\n\n  constructor(app: INestApplication) {\n    super(app);\n    this.app = app;\n    this.createHttpServer();\n  }\n\n  private createHttpServer() {\n    if (!this.httpServer) {\n      this.logger.log('Creating HTTP server for WebSockets');\n      this.httpServer = createServer((req, res) => {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('RHYTHM WebSocket Server');\n      });\n\n      // Add error handling\n      this.httpServer.on('error', (error) => {\n        this.logger.error('HTTP server error:', error);\n      });\n\n      this.httpServer.on('listening', () => {\n        const address = this.httpServer?.address();\n        this.logger.log(`HTTP server listening on ${typeof address === 'string' ? address : address?.port}`);\n      });\n    }\n  }\n  \n  public createIOServer(port: number, options?: ServerOptions): unknown {\n    try {\n      this.logger.log(`Creating Socket.IO server on port ${port}`);\n      \n      if (!this.httpServer) {\n        throw new Error('HTTP server not initialized');\n      }\n      \n      const io = new SocketIOServer(this.httpServer, {\n        ...options,\n        cors: {\n          origin: process.env.CORS_ORIGINS?.split(',') || '*',\n          methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n          credentials: true,\n        },\n        pingTimeout: 60000,\n        pingInterval: 25000,\n        maxHttpBufferSize: 1e8, // 100MB\n      });\n\n      io.on('connection', (socket: Socket) => {\n        this.logger.log(`Client connected: ${socket.id}`);\n        \n        socket.on('disconnect', (reason) => {\n          this.logger.log(`Client disconnected: ${socket.id}, reason: ${reason}`);\n        });\n\n        socket.on('error', (error) => {\n          this.logger.error(`Socket error (${socket.id}):`, error);\n        });\n      });\n\n      io.engine.on('connection_error', (error: unknown) => {\n        this.logger.error('Socket.IO connection error:', error);\n      });\n      \n      return io;\n    } catch (error) {\n      this.logger.error('Failed to create Socket.IO server:', error);\n      throw error;\n    }\n  }\n\n  create(port: number, options?: ServerOptions): unknown {\n    try {\n      this.logger.log(`Creating WebSocket server on port ${port}`);\n      \n      // Ensure HTTP server is created\n      this.createHttpServer();\n\n      if (!this.httpServer) {\n        throw new Error('Failed to create HTTP server');\n      }\n\n      // If the server is already listening, close it first\n      if (this.httpServer.listening) {\n        this.logger.log('HTTP server is already running, closing it first...');\n        this.close();\n      }\n\n      // Bind to the specified port\n      return new Promise((resolve, reject) => {\n        if (!this.httpServer) {\n          return reject(new Error('HTTP server not initialized'));\n        }\n\n        // Handle server errors during binding\n        const errorHandler = (error: Error) => {\n          this.logger.error(`Failed to bind to port ${port}:`, error);\n          reject(error);\n        };\n\n        this.httpServer.once('error', errorHandler);\n\n        // Start listening\n        this.httpServer.listen(port, () => {\n          // Remove the error handler after successful binding\n          this.httpServer?.removeListener('error', errorHandler);\n          this.logger.log(`WebSocket server bound to port ${port}`);\n\n          try {\n            // Create and return the Socket.IO server\n            const io = this.createIOServer(port, options);\n            \n            // Store the IO instance for cleanup\n            (this as unknown as { io?: unknown }).io = io;\n            \n            // Handle process exit to clean up resources\n            process.on('SIGTERM', () => this.close());\n            process.on('SIGINT', () => this.close());\n            \n            resolve(io);\n          } catch (error) {\n            this.logger.error('Failed to create Socket.IO server:', error);\n            reject(error);\n          }\n        });\n      });\n    } catch (error) {\n      this.logger.error('Failed to create WebSocket server:', error);\n      throw error;\n    }\n  }\n\n  // Allow e2e tests to swap CORS quickly\n  updateCors(app: INestApplication, origin = '*') {\n    const io = (app.getHttpServer() as unknown as { io?: unknown }).io as unknown;\n    if (io?.engine) {\n      io.opts.cors = { \n        origin, \n        methods: ['GET', 'POST'] \n      };\n    }\n  }\n\n  // Cleanup method to close servers\n  async close() {\n    try {\n      this.logger.log('Closing WebSocket server...');\n      \n      // Close Socket.IO server if it exists\n      if ((this as unknown as { io?: { close: (cb: () => void) => void } }).io) {\n        await new Promise<void>((resolve) => {\n          (this as unknown as { io?: { close: (cb: () => void) => void } }).io.close(() => {\n            this.logger.log('Socket.IO server closed');\n            resolve();\n          });\n        });\n      }\n      \n      // Close WebSocket server if it exists\n      if (this.wsServer) {\n        this.wsServer.close(() => {\n          this.logger.log('WebSocket server closed');\n        });\n        this.wsServer = null;\n      }\n      \n      // Close HTTP server if it exists\n      if (this.httpServer) {\n        await new Promise<void>((resolve) => {\n          this.httpServer?.close((err) => {\n            if (err) {\n              this.logger.error('Error closing HTTP server:', err);\n            } else {\n              this.logger.log('HTTP server closed');\n            }\n            resolve();\n          });\n        });\n        this.httpServer = null;\n      }\n      \n      this.logger.log('WebSocket server shutdown complete');\n    } catch (error) {\n      this.logger.error('Error during WebSocket server shutdown:', error);\n      throw error;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/@nestjs/common.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[200,203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[200,203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":8,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":9,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[243,246],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[243,246],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'trace' is defined but never used.","line":9,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":9,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":10,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[301,304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[301,304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":11,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[344,347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[344,347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":11,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":12,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":12,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'logger' is defined but never used.","line":13,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[447,450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[447,450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Import the actual module first\nconst actual = jest.requireActual('@nestjs/common');\n\n// Create a proper Logger class\nclass NoopLogger {\n  constructor(private context?: string) {}\n  \n  log(message: any, context?: string) {}\n  error(message: any, trace?: string, context?: string) {}\n  warn(message: any, context?: string) {}\n  debug(message: any, context?: string) {}\n  verbose(message: any, context?: string) {}\n  static overrideLogger(logger: any) {}\n  static flush() {}\n}\n\n// Create a new object with all the actual exports\nconst mocks = {\n  ...actual,\n  Logger: NoopLogger,\n};\n\n// Export all the actual exports plus our mocks\nmodule.exports = {\n  ...mocks,\n  // Make sure all decorators are properly exported\n  Injectable: actual.Injectable,\n  Inject: actual.Inject,\n  // Export our mocked Logger\n  Logger: NoopLogger,\n  // Re-export other commonly used items\n  HttpStatus: actual.HttpStatus,\n  HttpException: actual.HttpException,\n  UnauthorizedException: actual.UnauthorizedException,\n  ForbiddenException: actual.ForbiddenException,\n  NotFoundException: actual.NotFoundException,\n  BadRequestException: actual.BadRequestException,\n  InternalServerErrorException: actual.InternalServerErrorException,\n  // Add other commonly used exports as needed\n};\n\n// Also export the Logger as a named export\nexport const Logger = NoopLogger;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/@prisma/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/@prisma/client/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/auth.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/aws-sdk.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/aws-sdk/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/bcrypt.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/guards/jwt-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/guards/local-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class LocalAuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/guards/refresh-token.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class RefreshTokenGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/jwt-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n\nexport const mockJwtAuthGuard = {\n  canActivate: jest.fn().mockImplementation((context) => {\n    const request = context.switchToHttp().getRequest();\n    request.user = { id: 'test-user-id', email: 'test@example.com' };\n    return true;\n  }),\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/local-auth.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class LocalAuthGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n\nexport const mockLocalAuthGuard = {\n  canActivate: jest.fn().mockReturnValue(true),\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/prisma.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/refresh-token.guard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class RefreshTokenGuard implements CanActivate {\n  canActivate(context: ExecutionContext): boolean {\n    return true;\n  }\n}\n\nexport const mockRefreshTokenGuard = {\n  canActivate: jest.fn().mockImplementation((context) => {\n    const request = context.switchToHttp().getRequest();\n    request.user = { \n      id: 'test-user-id', \n      email: 'test@example.com',\n      refreshToken: 'test-refresh-token'\n    };\n    return true;\n  }),\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/rtc.gateway.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/socket-io.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[190,193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[190,193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[203,206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[203,206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":34,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'close' is assigned a value but never used.","line":43,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1020,1023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1020,1023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1145,1148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1145,1148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1302,1305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1302,1305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1317,1320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1317,1320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1743,1746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1743,1746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":90,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":94,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'namespace' is defined but never used.","line":98,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":98,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'middleware' is defined but never used.","line":102,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2003,2006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2003,2006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2084,2087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2084,2087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2209,2212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2209,2212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\n// Mock Socket class\nclass MockSocket extends EventEmitter {\n  id: string;\n  connected: boolean = true;\n  disconnected: boolean = false;\n  handshake: any;\n  data: any = {};\n  rooms: Set<string> = new Set();\n  broadcast: MockSocket;\n\n  constructor(id: string = 'mock-socket-id') {\n    super();\n    this.id = id;\n    this.handshake = {\n      query: {},\n      headers: {},\n      user: null\n    };\n    this.broadcast = this;\n  }\n\n  join(room: string): Promise<void> {\n    this.rooms.add(room);\n    return Promise.resolve();\n  }\n\n  leave(room: string): Promise<void> {\n    this.rooms.delete(room);\n    return Promise.resolve();\n  }\n\n  to(room: string): MockSocket {\n    return this;\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    super.emit(event, ...args);\n    return true;\n  }\n\n  disconnect(close: boolean = true): void {\n    this.connected = false;\n    this.disconnected = true;\n    this.emit('disconnect', 'disconnected');\n  }\n\n  once(event: string, listener: (...args: any[]) => void): MockSocket {\n    super.once(event, listener);\n    return this;\n  }\n\n  on(event: string, listener: (...args: any[]) => void): MockSocket {\n    super.on(event, listener);\n    return this;\n  }\n}\n\n// Mock Server class\nclass MockServer extends EventEmitter {\n  sockets: any;\n  engine: any;\n\n  constructor() {\n    super();\n    this.sockets = {\n      sockets: new Map(),\n      emit: jest.fn(),\n      to: jest.fn().mockReturnThis(),\n      in: jest.fn().mockReturnThis(),\n      join: jest.fn(),\n      leave: jest.fn(),\n      disconnect: jest.fn(),\n      adapter: {\n        rooms: new Map(),\n        sids: new Map()\n      }\n    };\n    this.engine = {\n      clientsCount: 0\n    };\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    super.emit(event, ...args);\n    return true;\n  }\n\n  to(room: string): MockServer {\n    return this;\n  }\n\n  in(room: string): MockServer {\n    return this;\n  }\n\n  of(namespace: string): MockServer {\n    return this;\n  }\n\n  use(middleware: any): MockServer {\n    return this;\n  }\n\n  on(event: string, listener: (...args: any[]) => void): MockServer {\n    super.on(event, listener);\n    return this;\n  }\n\n  once(event: string, listener: (...args: any[]) => void): MockServer {\n    super.once(event, listener);\n    return this;\n  }\n}\n\n// Mock Server constructor\nconst Server = jest.fn().mockImplementation(() => {\n  return new MockServer();\n});\n\n// Mock Socket constructor\nconst Socket = jest.fn().mockImplementation((id?: string) => {\n  return new MockSocket(id);\n});\n\nexport class MockIoServer extends EventEmitter {\n  to = () => this;\n  emit = this.emit.bind(this);\n  on = this.on.bind(this);\n  sockets = { leave: jest.fn(), join: jest.fn() };\n}\n\n// Export the mock\nexport default {\n  Server,\n  Socket,\n  MockSocket,\n  MockServer\n};\n\n// Named exports\nexport { Server, Socket, MockSocket, MockServer }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/socket.io-client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":7,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":10,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[321,324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[321,324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[355,358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[355,358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[387,390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[387,390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'url' is defined but never used.","line":19,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":19,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[467,470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[467,470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1148,1151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1148,1151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1260,1263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1260,1263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1390,1393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1390,1393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":87,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":91,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":95,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":99,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'compress' is defined but never used.","line":103,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2556,2559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2556,2559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2586,2589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2586,2589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2678,2681],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2678,2681],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2704,2707],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2704,2707],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2737,2740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2737,2740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2776,2779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2776,2779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\n// Mock Socket class that extends EventEmitter\nclass MockSocketClient extends EventEmitter {\n  id: string;\n  connected: boolean = true;\n  disconnected: boolean = false;\n  io: any;\n  _pid: string;\n  _lastOffset: string;\n  recovered: boolean;\n  handshake: {\n    auth: Record<string, any>;\n    headers: Record<string, any>;\n    query: Record<string, any>;\n    user: Record<string, any>;\n  };\n\n  constructor(url: string, options?: any) {\n    super();\n    this.id = `test-socket-${Math.random().toString(36).substr(2, 9)}`;\n    this.io = {\n      reconnection: jest.fn().mockReturnThis(),\n      reconnectionAttempts: jest.fn().mockReturnThis(),\n      reconnectionDelay: jest.fn().mockReturnThis(),\n      reconnectionDelayMax: jest.fn().mockReturnThis(),\n      timeout: jest.fn().mockReturnThis(),\n    };\n    this._pid = 'test-pid';\n    this._lastOffset = '0';\n    this.recovered = false;\n    this.handshake = {\n      auth: {},\n      headers: {},\n      query: {},\n      user: {}\n    };\n\n    // Simulate connection\n    process.nextTick(() => {\n      this.emit('connect');\n    });\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    super.emit(event, ...args);\n    return true;\n  }\n\n  on(event: string, listener: (...args: any[]) => void): MockSocketClient {\n    super.on(event, listener);\n    return this;\n  }\n\n  off(event: string, listener: (...args: any[]) => void): MockSocketClient {\n    super.off(event, listener);\n    return this;\n  }\n\n  close(): MockSocketClient {\n    this.connected = false;\n    this.disconnected = true;\n    this.emit('disconnect');\n    return this;\n  }\n\n  disconnect(): MockSocketClient {\n    this.connected = false;\n    this.disconnected = true;\n    this.emit('disconnect');\n    return this;\n  }\n\n  listeners(event: string): any[] {\n    return super.listeners(event);\n  }\n\n  hasListeners(event: string): boolean {\n    return super.listenerCount(event) > 0;\n  }\n\n  removeAllListeners(event?: string): MockSocketClient {\n    super.removeAllListeners(event);\n    return this;\n  }\n\n  join(room: string): MockSocketClient {\n    return this;\n  }\n\n  leave(room: string): MockSocketClient {\n    return this;\n  }\n\n  to(room: string): MockSocketClient {\n    return this;\n  }\n\n  in(room: string): MockSocketClient {\n    return this;\n  }\n\n  compress(compress: boolean): MockSocketClient {\n    return this;\n  }\n\n  get volatile(): MockSocketClient {\n    return this;\n  }\n\n  get broadcast(): MockSocketClient {\n    return this;\n  }\n}\n\n// Mock the io function\nconst io = jest.fn<MockSocketClient, [string, any]>((url: string, options?: any) => {\n  return new MockSocketClient(url, options);\n});\n\n// Add static properties\n(io as any).protocol = 4;\n(io as any).Manager = jest.fn();\n(io as any).Socket = MockSocketClient;\n(io as any).connect = io;\n\nexport { io, MockSocketClient };\nexport default io;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__mocks__/ws.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[416,419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[416,419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[424,427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[424,427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[482,485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[482,485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[490,493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[490,493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[550,553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[550,553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[558,561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[558,561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[615,618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[615,618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[623,626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[623,626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'protocols' is defined but never used.","line":23,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[952,955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[952,955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1641,1644],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1641,1644],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1771,1774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1771,1774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2085,2088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2085,2088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2424,2427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2424,2427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\n// Mock WebSocket class\nclass MockWebSocket extends EventEmitter {\n  static CONNECTING = 0;\n  static OPEN = 1;\n  static CLOSING = 2;\n  static CLOSED = 3;\n\n  binaryType: 'arraybuffer' | 'blob' = 'arraybuffer';\n  bufferedAmount = 0;\n  extensions = '';\n  protocol = '';\n  readyState = MockWebSocket.OPEN;\n  url: string;\n\n  // Event handlers\n  onclose: ((this: MockWebSocket, ev: any) => any) | null = null;\n  onerror: ((this: MockWebSocket, ev: any) => any) | null = null;\n  onmessage: ((this: MockWebSocket, ev: any) => any) | null = null;\n  onopen: ((this: MockWebSocket, ev: any) => any) | null = null;\n\n  constructor(url: string, protocols?: string | string[]) {\n    super();\n    this.url = url;\n    \n    // Auto-open the connection\n    process.nextTick(() => {\n      this.readyState = MockWebSocket.OPEN;\n      if (this.onopen) this.onopen({ type: 'open' });\n      this.emit('open');\n    });\n  }\n\n  send(data: any) {\n    this.emit('send', data);\n    \n    // Simulate server response for echo functionality\n    if (typeof data === 'string' && data.includes('Hello')) {\n      process.nextTick(() => {\n        const response = `Echo: ${data}`;\n        if (this.onmessage) this.onmessage({ data: response, type: 'message' });\n        this.emit('message', response);\n      });\n    }\n  }\n\n  close(code?: number, reason?: string) {\n    this.readyState = MockWebSocket.CLOSED;\n    if (this.onclose) this.onclose({ code, reason, type: 'close' });\n    this.emit('close', { code, reason });\n  }\n\n  // Override EventEmitter methods to return this for chaining\n  override once(event: string, listener: (...args: any[]) => void): this {\n    super.once(event, listener);\n    return this;\n  }\n\n  override off(event: string, listener?: (...args: any[]) => void): this {\n    if (listener) {\n      super.off(event, listener);\n    } else {\n      super.removeAllListeners(event);\n    }\n    return this;\n  }\n\n  override removeAllListeners(event?: string): this {\n    super.removeAllListeners(event);\n    return this;\n  }\n\n  // Test helpers\n  _simulateMessage(data: any) {\n    if (this.onmessage) this.onmessage({ data, type: 'message' });\n    this.emit('message', { data });\n  }\n\n  _simulateError(error: Error) {\n    if (this.onerror) this.onerror({ error, type: 'error' });\n    this.emit('error', error);\n  }\n}\n\n// Mock WebSocket Server class\nclass MockWebSocketServer extends EventEmitter {\n  options: any;\n  clients = new Set<MockWebSocket>();\n  \n  constructor(options: any) {\n    super();\n    this.options = options;\n  }\n  \n  // Mock WebSocket server methods\n  handleUpgrade() {\n    // Simulate upgrade\n  }\n  \n  close(cb?: () => void) {\n    this.emit('close');\n    if (cb) cb();\n  }\n  \n  // Test helpers\n  _simulateConnection(ws: MockWebSocket) {\n    this.clients.add(ws);\n    this.emit('connection', ws);\n  }\n}\n\n// Export as default (WebSocket constructor)\nconst WebSocket = MockWebSocket;\n\n// Export named exports\nexport { MockWebSocketServer as Server };\nexport { WebSocket };\n\n// Default export for `import WebSocket from 'ws'`\nexport default WebSocket; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__utils__/socket-mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/__utils__/websocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/auth.e2e-spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'configService' is assigned a value but never used.","line":24,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport request from 'supertest';\nimport { AppModule } from '../src/app.module';\nimport { PrismaService } from '../src/prisma/prisma.service';\nimport AuthConfig from '../src/config/auth.config';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaModule } from '../prisma/prisma.module';\n\ndescribe('AuthController (e2e)', () => {\n  let app: INestApplication;\n  let prisma: PrismaService;\n  let authConfig: ReturnType<typeof AuthConfig>;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [ConfigModule.forRoot(), AppModule, PrismaModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ whitelist: true }));\n    \n    prisma = moduleFixture.get<PrismaService>(PrismaService);\n    const configService = moduleFixture.get('ConfigService');\n    authConfig = AuthConfig();\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await prisma.$disconnect();\n    await app.close();\n  });\n\n  beforeEach(async () => {\n    // Reset database before each test\n    await prisma.$executeRaw`TRUNCATE TABLE \"User\" CASCADE;`;\n  });\n\n  describe('POST /auth/signup', () => {\n    it('should register a new user', async () => {\n      const userData = {\n        email: 'test@example.com',\n        password: 'StrongPass123!',\n        name: 'Test User',\n      };\n\n      const response = await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.email).toBe(userData.email);\n      expect(response.body.name).toBe(userData.name);\n    });\n\n    it('should reject weak password', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send({\n          email: 'test@example.com',\n          password: 'weak',\n          name: 'Test User',\n        })\n        .expect(400);\n\n      expect(response.body.message).toContain('Password must contain');\n    });\n  });\n\n  describe('POST /auth/login', () => {\n    const testUser = {\n      email: 'test@example.com',\n      password: 'StrongPass123!',\n      name: 'Test User',\n    };\n\n    beforeEach(async () => {\n      await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(testUser);\n    });\n\n    it('should login with valid credentials', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/auth/login')\n        .send({\n          email: testUser.email,\n          password: testUser.password,\n        })\n        .expect(200);\n\n      expect(response.body).toHaveProperty('accessToken');\n      expect(response.body.email).toBe(testUser.email);\n      \n      // Check for httpOnly cookie\n      const cookies = response.headers['set-cookie'] as string[] | string | undefined;\n      expect(cookies).toBeDefined();\n      if (Array.isArray(cookies)) {\n        expect(cookies.some(cookie => cookie.includes('refreshToken='))).toBeTruthy();\n      } else if (typeof cookies === 'string') {\n        expect(cookies.includes('refreshToken=')).toBeTruthy();\n      } else {\n        fail('Expected cookies to be defined');\n      }\n    });\n\n    it('should reject invalid credentials', async () => {\n      await request(app.getHttpServer())\n        .post('/auth/login')\n        .send({\n          email: testUser.email,\n          password: 'wrongpassword',\n        })\n        .expect(401);\n    });\n  });\n\n  describe('POST /auth/refresh', () => {\n    let refreshToken: string;\n    \n    beforeEach(async () => {\n      // Create a test user and login\n      const user = {\n        email: 'test@example.com',\n        password: 'StrongPass123!',\n        name: 'Test User',\n      };\n\n      await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(user);\n\n      const loginResponse = await request(app.getHttpServer())\n        .post('/auth/login')\n        .send({\n          email: user.email,\n          password: user.password,\n        });\n\n      const cookies = loginResponse.headers['set-cookie'] as string[] | string | undefined;\n      if (Array.isArray(cookies)) {\n        refreshToken = cookies.find(cookie => cookie.includes('refreshToken=')) || '';\n      } else if (typeof cookies === 'string') {\n        refreshToken = cookies.includes('refreshToken=') ? cookies : '';\n      } else {\n        refreshToken = '';\n      }\n    });\n\n    it('should refresh access token with valid refresh token', async () => {\n      const response = await request(app.getHttpServer())\n        .post('/auth/refresh')\n        .set('Cookie', [refreshToken])\n        .expect(200);\n\n      expect(response.body).toHaveProperty('accessToken');\n    });\n\n    it('should reject invalid refresh token', async () => {\n      await request(app.getHttpServer())\n        .post('/auth/refresh')\n        .set('Cookie', [`${authConfig.refreshToken.cookieName}=invalidtoken`])\n        .expect(401);\n    });\n  });\n\n  describe('POST /auth/logout', () => {\n    let accessToken: string;\n    let refreshToken: string;\n    \n    beforeEach(async () => {\n      // Create a test user and login\n      const user = {\n        email: 'test@example.com',\n        password: 'StrongPass123!',\n        name: 'Test User',\n      };\n\n      await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(user);\n\n      const loginResponse = await request(app.getHttpServer())\n        .post('/auth/login')\n        .send({\n          email: user.email,\n          password: user.password,\n        });\n\n      accessToken = loginResponse.body.accessToken;\n      const cookies = loginResponse.headers['set-cookie'] as string[] | string | undefined;\n      if (Array.isArray(cookies)) {\n        refreshToken = cookies.find(cookie => cookie.includes('refreshToken=')) || '';\n      } else if (typeof cookies === 'string') {\n        refreshToken = cookies.includes('refreshToken=') ? cookies : '';\n      } else {\n        refreshToken = '';\n      }\n    });\n\n    it('should logout successfully', async () => {\n      await request(app.getHttpServer())\n        .post('/auth/logout')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .set('Cookie', [refreshToken])\n        .expect(201);\n\n      // Verify refresh token is invalidated\n      await request(app.getHttpServer())\n        .post('/auth/refresh')\n        .set('Cookie', [refreshToken])\n        .expect(401);\n    });\n  });\n\n  describe('GET /auth/profile', () => {\n    let accessToken: string;\n    \n    beforeEach(async () => {\n      // Create a test user and login\n      const user = {\n        email: 'test@example.com',\n        password: 'StrongPass123!',\n        name: 'Test User',\n      };\n\n      await request(app.getHttpServer())\n        .post('/auth/signup')\n        .send(user);\n\n      const loginResponse = await request(app.getHttpServer())\n        .post('/auth/login')\n        .send({\n          email: user.email,\n          password: user.password,\n        });\n\n      accessToken = loginResponse.body.accessToken;\n    });\n\n    it('should return user profile with valid token', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/auth/profile')\n        .set('Authorization', `Bearer ${accessToken}`)\n        .expect(200);\n\n      expect(response.body).toHaveProperty('email', 'test@example.com');\n    });\n\n    it('should reject with invalid token', async () => {\n      await request(app.getHttpServer())\n        .get('/auth/profile')\n        .set('Authorization', 'Bearer invalidtoken')\n        .expect(401);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/auth/auth.controller.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UnauthorizedException' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2702,2705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2702,2705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2732,2735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2732,2735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3426,3429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3426,3429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3438,3441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3438,3441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UnauthorizedException } from '@nestjs/common';\nimport { AuthController } from '../../src/modules/auth/auth.controller';\nimport { AuthService } from '../../src/modules/auth/auth.service';\nimport { createMockResponse, type MockResponse } from '../unit/__mocks__/express.mock';\n\nconst TEST_USER = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Test User',\n  refreshToken: 'test-refresh-token'\n};\n\n// Mock the response object\nconst mockResponse = (): MockResponse => {\n  const res = createMockResponse();\n  res.cookie = jest.fn();\n  res.clearCookie = jest.fn();\n  return res;\n};\n\ndescribe('AuthController', () => {\n  let controller: AuthController;\n  let authService: jest.Mocked<AuthService>;\n  let res: MockResponse;\n\n  // Create a mock auth service with all required methods\n  const createMockAuthService = (): jest.Mocked<AuthService> => ({\n    login: jest.fn(),\n    signup: jest.fn(),\n    refreshTokens: jest.fn(),\n    logout: jest.fn(),\n    setRefreshTokenCookie: jest.fn(),\n    clearRefreshTokenCookie: jest.fn(),\n    validateUser: jest.fn(),\n    verifyToken: jest.fn(),\n    getUserById: jest.fn(),\n  } as unknown as jest.Mocked<AuthService>);\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Create mock service\n    authService = createMockAuthService();\n    \n    // Manually create the controller with the mock service\n    controller = new AuthController(authService);\n    \n    // Create mock response\n    res = mockResponse();\n    \n    // Setup default mocks\n    authService.refreshTokens.mockResolvedValue({\n      accessToken: 'new-access-token',\n      refreshToken: 'new-refresh-token',\n      user: {\n        id: TEST_USER.id,\n        email: TEST_USER.email,\n        name: TEST_USER.name,\n      },\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('refreshToken', () => {\n    it('should return new access token with valid refresh token', async () => {\n      // Arrange\n      const refreshToken = 'valid-refresh-token';\n      const req = {\n        user: { sub: TEST_USER.id },\n        cookies: { refreshToken },\n      };\n\n      const tokens = {\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        user: {\n          id: TEST_USER.id,\n          email: TEST_USER.email,\n          name: TEST_USER.name,\n        },\n      };\n\n      // Mock the refreshTokens method\n      authService.refreshTokens.mockResolvedValue(tokens);\n\n      // Mock setRefreshTokenCookie to do nothing\n      authService.setRefreshTokenCookie.mockImplementation(() => {});\n\n      // Act - Call the controller method directly\n      const result = await controller.refreshToken(req as any, { cookie: jest.fn() } as any);\n\n      // Assert\n      expect(authService.refreshTokens).toHaveBeenCalledWith(\n        TEST_USER.id,\n        refreshToken,\n      );\n      expect(authService.setRefreshTokenCookie).toHaveBeenCalled();\n      expect(result).toEqual({\n        accessToken: tokens.accessToken,\n        user: {\n          id: TEST_USER.id,\n          email: TEST_USER.email,\n          name: TEST_USER.name,\n        },\n      });\n    });\n\n    it('should throw HttpException if refresh token is missing', async () => {\n      // Arrange\n      const req = {\n        user: { sub: TEST_USER.id },\n        cookies: {}, // No refresh token\n      };\n\n      // Act & Assert\n      await expect(controller.refreshToken(req as any, res as any))\n        .rejects\n        .toThrow('Refresh token is required');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/auth/auth.service.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestingModule' is defined but never used.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaService' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":19,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":19,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":65},{"ruleId":"@typescript-eslint/no-namespace","severity":2,"message":"ES2015 module syntax is preferred over namespaces.","line":55,"column":3,"nodeType":"TSModuleDeclaration","messageId":"moduleSyntaxIsPreferred","endLine":59,"endColumn":4},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3122,3125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3122,3125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'where' is defined but never used.","line":125,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":170,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":170,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5750,5753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5750,5753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":247,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":247,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":247,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":280,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":280,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":59}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../../src/modules/auth/auth.service';\nimport { PrismaService } from '../../src/prisma/prisma.service';\nimport { prismaMock } from '../utils/auth-test-setup';\nimport * as bcrypt from 'bcrypt';\n\n// Create a mock JWT service that implements the required methods\nconst createMockJwtService = (): jest.Mocked<JwtService> => {\n  const mock = {\n    sign: jest.fn().mockImplementation((payload: unknown, options?: unknown) => {\n      if (options?.expiresIn === '15m') return 'mocked-access-token';\n      if (options?.expiresIn === '7d') return 'mocked-refresh-token';\n      return 'mocked-token';\n    }),\n    \n    verify: jest.fn().mockImplementation((token: string, options: unknown) => ({\n      sub: 'test-user-id',\n      email: 'test@example.com',\n      name: 'Test User'\n    })),\n    \n    signAsync: jest.fn().mockImplementation((payload: unknown, options?: unknown) => {\n      if (options?.expiresIn === '15m') return Promise.resolve('mocked-access-token');\n      if (options?.expiresIn === '7d') return Promise.resolve('mocked-refresh-token');\n      return Promise.resolve('mocked-token');\n    }),\n    \n    verifyAsync: jest.fn().mockResolvedValue({\n      sub: 'test-user-id',\n      email: 'test@example.com',\n      name: 'Test User'\n    }),\n    \n    // Add other required methods with default mock implementations\n    decode: jest.fn(),\n    signSync: jest.fn().mockReturnValue('mocked-token'),\n    verifySync: jest.fn().mockReturnValue({ sub: 'test-user-id' }),\n    decodeSync: jest.fn().mockReturnValue({ sub: 'test-user-id' }),\n    \n    // Add any other methods that might be called\n    mergeJwtOptions: jest.fn().mockReturnThis(),\n    overrideSecretFromOptions: jest.fn().mockReturnThis(),\n    getSecretKey: jest.fn().mockReturnValue('test-secret'),\n    createToken: jest.fn().mockReturnValue({ token: 'mocked-token' })\n  };\n  \n  return mock as unknown as jest.Mocked<JwtService>;\n};\n\n// Extend the NodeJS namespace to include our custom global types\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      prisma: typeof prismaMock;\n    }\n  }\n}\n\nconst TEST_USER = {\n  id: 'test-user-id',\n  email: 'test@example.com',\n  name: 'Test User',\n  password: 'hashed-password',\n  refreshToken: 'hashed-refresh-token',\n  isApproved: true,\n  createdAt: new Date(),\n  updatedAt: new Date(),\n};\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let prisma: unknown;\n  let jwtService: jest.Mocked<JwtService>;\n  let configService: unknown;\n  let consoleErrorSpy: jest.SpyInstance;\n\n  beforeEach(async () => {\n    // Mock console.error to prevent test output pollution\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    \n    // Create fresh mocks for each test\n    jwtService = createMockJwtService();\n    \n    // Create a simple mock ConfigService\n    configService = {\n      get: jest.fn((key: string) => {\n        const config: Record<string, any> = {\n          'auth.accessToken.secret': 'test-secret',\n          'auth.accessToken.expiresIn': '15m',\n          'auth.refreshToken.secret': 'test-refresh-secret',\n          'auth.refreshToken.expiresIn': '7d',\n          'JWT_REFRESH_SECRET': 'test-refresh-secret',\n        };\n        return config[key];\n      })\n    };\n\n    // Setup bcrypt mocks with proper typing\n    (bcrypt.hash as jest.Mock) = jest.fn().mockResolvedValue('hashed-password');\n    (bcrypt.compare as jest.Mock) = jest.fn().mockResolvedValue(true);\n\n    // Reset Prisma mock\n    prisma = {\n      ...prismaMock,\n      user: {\n        findUnique: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n        findFirst: jest.fn(),\n      }\n    };\n\n    // Setup Prisma mocks\n    prisma.user.findUnique.mockImplementation(({ where }: unknown) => {\n      if (where.id === 'test-user-id' || where.email === 'test@example.com') {\n        return Promise.resolve({ ...TEST_USER, ...where });\n      }\n      return Promise.resolve(null);\n    });\n    \n    prisma.user.create.mockResolvedValue(TEST_USER);\n    prisma.user.update.mockImplementation(({ where, data }: unknown) => \n      Promise.resolve({ ...TEST_USER, ...data })\n    );\n    prisma.user.findFirst.mockResolvedValue(TEST_USER);\n\n    // Initialize the service with mocks in the correct order\n    service = new AuthService(\n      jwtService,\n      prisma,\n      configService\n    );\n    \n    // Mock bcrypt\n    jest.spyOn(bcrypt, 'compare').mockImplementation(() => Promise.resolve(true));\n    jest.spyOn(bcrypt, 'hash').mockImplementation(() => Promise.resolve('hashed-password'));\n    \n    // Clear all mocks before each test\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n    if (consoleErrorSpy) {\n      consoleErrorSpy.mockRestore();\n    }\n  });\n\n  describe('refreshTokens', () => {\n    it('should return new tokens with valid refresh token', async () => {\n      // Arrange\n      const userId = TEST_USER.id;\n      const refreshToken = 'valid-refresh-token';\n      \n      // Mock user with matching refresh token\n      const mockUser = {\n        ...TEST_USER,\n        id: userId,\n        refreshToken,\n      };\n      \n      // Mock Prisma and JWT service\n      prisma.user.findUnique.mockResolvedValue(mockUser);\n      \n      // Mock JWT verify to return a valid payload\n      jwtService.verify.mockImplementation((token, options) => ({\n        sub: userId,\n        email: TEST_USER.email,\n        name: TEST_USER.name,\n      }));\n      \n      // Mock the private getTokens method\n      const getTokensSpy = jest.spyOn(service as any, 'getTokens');\n      getTokensSpy.mockImplementation(async () => ({\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        user: { \n          id: userId, \n          email: TEST_USER.email, \n          name: TEST_USER.name \n        }\n      }));\n      \n      // Mock the user update\n      prisma.user.update.mockResolvedValue({\n        ...mockUser,\n        refreshToken: 'new-refresh-token',\n      });\n\n      // Act\n      const result = await service.refreshTokens(userId, refreshToken);\n\n      // Assert\n      expect(result).toEqual({\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        user: {\n          id: userId,\n          email: TEST_USER.email,\n          name: TEST_USER.name,\n        },\n      });\n      \n      expect(prisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n      \n      expect(jwtService.verify).toHaveBeenCalledWith(refreshToken, {\n        secret: 'test-refresh-secret',\n      });\n      \n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: userId },\n        data: { refreshToken: 'new-refresh-token' },\n      });\n    });\n\n    it('should throw UnauthorizedException if refresh token is invalid', async () => {\n      // Arrange\n      const userId = TEST_USER.id;\n      const invalidToken = 'invalid-refresh-token';\n      \n      // Mock JWT verification to throw an error\n      jwtService.verify.mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      // Act & Assert\n      await expect(\n        service.refreshTokens(userId, invalidToken)\n      ).rejects.toThrow(UnauthorizedException);\n      \n      expect(prisma.user.findUnique).not.toHaveBeenCalled();\n      expect(prisma.user.update).not.toHaveBeenCalled();\n    });\n\n    it('should throw UnauthorizedException when user is not found', async () => {\n      // Arrange\n      const userId = 'non-existent-user-id';\n      const refreshToken = 'valid-token';\n      \n      // Mock JWT verification to pass\n      jwtService.verify.mockImplementation((token, options) => ({\n        sub: userId,\n        email: 'test@example.com',\n        name: 'Test User'\n      }));\n      \n      // Mock user not found\n      prisma.user.findUnique.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        service.refreshTokens(userId, refreshToken)\n      ).rejects.toThrow(UnauthorizedException);\n      \n      expect(prisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n      expect(prisma.user.update).not.toHaveBeenCalled();\n    });\n\n    it('should throw UnauthorizedException when refresh token does not match', async () => {\n      // Arrange\n      const userId = TEST_USER.id;\n      const refreshToken = 'valid-refresh-token';\n      \n      // Mock user with different refresh token\n      const mockUser = {\n        ...TEST_USER,\n        id: userId,\n        refreshToken: 'different-refresh-token',\n      };\n      \n      // Mock JWT verification to pass\n      jwtService.verify.mockImplementation((token, options) => ({\n        sub: userId,\n        email: 'test@example.com',\n        name: 'Test User'\n      }));\n      \n      // Mock user found but with different token\n      prisma.user.findUnique.mockResolvedValue(mockUser);\n\n      // Act & Assert\n      await expect(\n        service.refreshTokens(userId, refreshToken)\n      ).rejects.toThrow(UnauthorizedException);\n      \n      expect(prisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n      expect(prisma.user.update).not.toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/auth/basic-auth.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestingModule' is defined but never used.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigModule' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'JwtModule' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HttpStatus' is defined but never used.","line":4,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PassportModule' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'JwtStrategy' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'JwtRefreshStrategy' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'JwtAuthGuard' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RefreshTokenGuard' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prismaMock' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'bcrypt' is defined but never used.","line":13,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaClient' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prisma' is assigned a value but never used.","line":20,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockVerify' is assigned a value but never used.","line":79,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":21},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":99,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":99,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":100,"column":16,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":100,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3973,3976],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3973,3976],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5705,5708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5705,5708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { UnauthorizedException, HttpStatus } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthService } from '../../src/modules/auth/auth.service';\nimport { PrismaService } from '../../src/prisma/prisma.service';\nimport { JwtStrategy } from '../../src/modules/auth/strategies/jwt.strategy';\nimport { JwtRefreshStrategy } from '../../src/modules/auth/strategies/jwt-refresh.strategy';\nimport { JwtAuthGuard } from '../../src/modules/auth/guards/jwt-auth.guard';\nimport { RefreshTokenGuard } from '../../src/modules/auth/guards/refresh-token.guard';\nimport { prismaMock, resetPrismaMocks } from '../utils/prisma-mock';\nimport * as bcrypt from 'bcryptjs';\nimport { PrismaClient } from '@prisma/client';\n\ndescribe('AuthService', () => {\n  let authService: AuthService;\n  let jwtService: JwtService;\n  let configService: ConfigService;\n  let prisma: jest.Mocked<PrismaService>;\n  \n  // Define test user data\n  const TEST_USER = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    name: 'Test User',\n    password: 'hashed-password',\n    isApproved: true,\n    refreshToken: 'test-refresh-token',\n  };\n\n  const mockPrisma = {\n    user: {\n      findUnique: jest.fn(),\n      update: jest.fn(),\n      create: jest.fn(),\n      findFirst: jest.fn(),\n    },\n  } as unknown as jest.Mocked<PrismaService>;\n\n  beforeEach(async () => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    resetPrismaMocks();\n    \n    // Create config service first\n    configService = new ConfigService({\n      JWT_SECRET: 'test-access-secret',\n      JWT_REFRESH_SECRET: 'test-refresh-secret',\n      JWT_ACCESS_EXPIRATION: '15m',\n      JWT_REFRESH_EXPIRATION: '7d',\n    });\n\n    // Create JWT service with test secret\n    jwtService = new JwtService({\n      secret: 'test-jwt-secret',\n      signOptions: { expiresIn: '15m' },\n    });\n\n    // Reset mock implementations\n    mockPrisma.user.findUnique.mockReset();\n    mockPrisma.user.update.mockReset();\n    mockPrisma.user.create.mockImplementation(({ data }: { data: unknown }) => Promise.resolve({\n      ...TEST_USER,\n      email: data.email,\n      name: data.name || data.email.split('@')[0],\n      password: data.password,\n    }));\n    mockPrisma.user.findFirst.mockReset();\n    \n    // Setup default mock implementations\n    mockPrisma.user.findUnique.mockResolvedValue(TEST_USER);\n    mockPrisma.user.update.mockResolvedValue({\n      ...TEST_USER,\n      refreshToken: 'new-refresh-token',\n    });\n\n    // Mock JWT methods\n    const mockVerify = jest.spyOn(jwtService, 'verify').mockImplementation((token: string, options: unknown) => {\n      if (options.secret === 'test-refresh-secret' || options.secret === 'test-access-secret') {\n        return { sub: 'test-user-id', email: TEST_USER.email, name: TEST_USER.name };\n      }\n      throw new Error('Invalid token');\n    });\n    \n    jest.spyOn(jwtService, 'sign').mockImplementation(() => 'test-token');\n    jest.spyOn(jwtService, 'signAsync').mockImplementation((payload: unknown, options: unknown) => {\n      if (options.secret === 'test-refresh-secret') {\n        return Promise.resolve('test-refresh-token');\n      }\n      return Promise.resolve('test-access-token');\n    });\n    \n    jest.spyOn(jwtService, 'verifyAsync').mockImplementation(() => \n      Promise.resolve({ sub: 'test-user-id', email: TEST_USER.email, name: TEST_USER.name })\n    );\n\n    // Mock bcrypt\n    jest.spyOn(require('bcrypt'), 'compare').mockImplementation(() => Promise.resolve(true));\n    jest.spyOn(require('bcrypt'), 'hash').mockImplementation(() => Promise.resolve('hashed-password'));\n\n    // Create auth service with mocked dependencies\n    authService = new AuthService(jwtService, mockPrisma, configService);\n    \n    // Mock the getTokens method\n    jest.spyOn(authService as any, 'getTokens').mockImplementation(async (userId: string, email: string, name: string) => ({\n      accessToken: 'test-access-token',\n      refreshToken: 'test-refresh-token',\n      user: { id: userId, email, name }\n    }));\n    \n    // Make prisma available for test assertions\n    prisma = mockPrisma;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('refreshTokens', () => {\n    it('should return new tokens with valid refresh token', async () => {\n      // Arrange\n      const userId = 'test-user-id';\n      const refreshToken = 'valid-refresh-token';\n      \n      // Mock the config service to return test secrets\n      const configSpy = jest.spyOn(configService, 'get').mockImplementation((key: string) => {\n        if (key === 'JWT_REFRESH_SECRET') return 'test-refresh-secret';\n        if (key === 'JWT_SECRET') return 'test-access-secret';\n        return null;\n      });\n      \n      // Mock the JWT verification to return a valid payload\n      const mockVerify = jest.spyOn(jwtService, 'verify').mockImplementation((token: string, options: unknown) => {\n        if (options.secret !== 'test-refresh-secret') {\n          throw new Error('Invalid token');\n        }\n        return {\n          sub: userId,\n          email: TEST_USER.email,\n          name: TEST_USER.name,\n        };\n      });\n      \n      // Mock the getTokens method to return test tokens\n      const mockTokens = {\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        user: {\n          id: userId,\n          email: TEST_USER.email,\n          name: TEST_USER.name\n        }\n      };\n      \n      // Mock the getTokens method on the instance\n      const getTokensSpy = jest.spyOn(authService as any, 'getTokens').mockResolvedValue(mockTokens);\n      \n      // Mock the user lookup to return a user with the refresh token\n      mockPrisma.user.findUnique.mockResolvedValueOnce({\n        ...TEST_USER,\n        id: userId,\n        refreshToken, // Ensure the refresh token matches\n      });\n      \n      // Mock the user update\n      mockPrisma.user.update.mockResolvedValueOnce({\n        ...TEST_USER,\n        id: userId,\n        refreshToken: mockTokens.refreshToken,\n      });\n\n      // Act\n      const result = await authService.refreshTokens(userId, refreshToken);\n\n      // Assert\n      expect(configSpy).toHaveBeenCalledWith('JWT_REFRESH_SECRET');\n      expect(mockVerify).toHaveBeenCalledWith(refreshToken, {\n        secret: 'test-refresh-secret',\n      });\n      expect(mockPrisma.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n      expect(getTokensSpy).toHaveBeenCalledWith(\n        userId,\n        TEST_USER.email,\n        TEST_USER.name\n      );\n      expect(mockPrisma.user.update).toHaveBeenCalledWith({\n        where: { id: userId },\n        data: { refreshToken: mockTokens.refreshToken },\n      });\n      expect(result).toEqual(mockTokens);\n      \n      // Clean up\n      configSpy.mockRestore();\n      mockVerify.mockRestore();\n      getTokensSpy.mockRestore();\n    });\n\n    it('should throw UnauthorizedException if refresh token is missing', async () => {\n      // Act & Assert\n      await expect(authService.refreshTokens('test-user-id', '')).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('should throw UnauthorizedException if user not found', async () => {\n      // Arrange\n      const userId = 'non-existent-user-id';\n      const refreshToken = 'valid-refresh-token';\n      \n      // Mock the config service\n      const configSpy = jest.spyOn(configService, 'get').mockReturnValue('test-secret');\n      \n      // Mock the JWT verification to succeed\n      const mockVerify = jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: userId });\n      \n      // Mock the user lookup to return null\n      mockPrisma.user.findUnique.mockResolvedValueOnce(null);\n      \n      // Act & Assert\n      await expect(authService.refreshTokens(userId, refreshToken)).rejects.toThrow(UnauthorizedException);\n      \n      // Clean up\n      configSpy.mockRestore();\n      mockVerify.mockRestore();\n    });\n    \n    it('should throw UnauthorizedException if refresh token does not match', async () => {\n      // Arrange\n      const userId = 'test-user-id';\n      const refreshToken = 'invalid-refresh-token';\n      \n      // Mock the config service\n      const configSpy = jest.spyOn(configService, 'get').mockReturnValue('test-secret');\n      \n      // Mock the JWT verification to succeed\n      const mockVerify = jest.spyOn(jwtService, 'verify').mockReturnValue({ sub: userId });\n      \n      // Mock the user lookup to return a user with a different refresh token\n      mockPrisma.user.findUnique.mockResolvedValueOnce({\n        ...TEST_USER,\n        id: userId,\n        refreshToken: 'different-refresh-token',\n      });\n      \n      // Act & Assert\n      await expect(authService.refreshTokens(userId, refreshToken)).rejects.toThrow(UnauthorizedException);\n      \n      // Clean up\n      configSpy.mockRestore();\n      mockVerify.mockRestore();\n    });\n\n    it('should throw UnauthorizedException if refresh token is invalid', async () => {\n      // Arrange\n      const userId = 'test-user-id';\n      const invalidToken = 'invalid-refresh-token';\n      \n      // Mock JWT verification to throw an error\n      jest.spyOn(jwtService, 'verify').mockImplementation(() => {\n        throw new Error('Invalid token');\n      });\n\n      // Act & Assert\n      await expect(\n        authService.refreshTokens(userId, invalidToken)\n      ).rejects.toThrow(UnauthorizedException);\n      \n      expect(jwtService.verify).toHaveBeenCalledWith(invalidToken, {\n        secret: expect.any(String),\n      });\n      expect(mockPrisma.user.findUnique).not.toHaveBeenCalled();\n      expect(mockPrisma.user.update).not.toHaveBeenCalled();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/auth/refresh-token.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestingModule' is defined but never used.","line":1,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ForbiddenException' is defined but never used.","line":6,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'configService' is assigned a value but never used.","line":18,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockTokens' is assigned a value but never used.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1740,1743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1740,1743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":57,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1872,1875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1872,1875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":62,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3083,3086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3083,3086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3435,3438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3435,3438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3467,3470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3467,3470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3499,3502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3499,3502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3604,3607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3604,3607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4628,4631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4628,4631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4674,4677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4674,4677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4720,4723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4720,4723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":17,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaService } from '../../src/prisma/prisma.service';\nimport { AuthService } from '../../src/modules/auth/auth.service';\nimport { UnauthorizedException, ForbiddenException } from '@nestjs/common';\nimport * as bcrypt from 'bcryptjs';\n\n// Mock bcrypt\njest.mock('bcryptjs', () => ({\n  compare: jest.fn(),\n}));\n\ndescribe('AuthService', () => {\n  let authService: AuthService;\n  let jwtService: JwtService;\n  let prismaService: PrismaService;\n  let configService: ConfigService;\n\n  // Mock user data\n  const mockUser = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    name: 'Test User',\n    password: 'hashed-password',\n    refreshToken: 'test-refresh-token',\n  };\n\n  // Mock tokens\n  const mockTokens = {\n    accessToken: 'test-access-token',\n    refreshToken: 'test-refresh-token',\n  };\n\n  // Mock implementations\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key: string) => {\n      const config: Record<string, string> = {\n        'JWT_ACCESS_SECRET': 'test-access-secret',\n        'JWT_REFRESH_SECRET': 'test-refresh-secret',\n      };\n      return config[key] || null;\n    }),\n  };\n  \n  // Mock bcrypt.compare to always return true for valid tokens\n  (bcrypt.compare as jest.Mock).mockImplementation((token: string, hashedToken: string) => {\n    return Promise.resolve(token === hashedToken);\n  });\n\n  // Create a mock JWT service with proper typing\n  const mockJwtService = {\n    sign: jest.fn().mockReturnValue('mocked-token'),\n    signAsync: jest.fn().mockImplementation((payload: unknown, options: unknown) => {\n      if (options && (options as any).secret === 'test-access-secret') {\n        return Promise.resolve('new-access-token');\n      } else if (options && (options as any).secret === 'test-refresh-secret') {\n        return Promise.resolve('new-refresh-token');\n      }\n      return Promise.resolve('mocked-token');\n    }),\n    verify: jest.fn().mockImplementation((token: string, options: unknown) => {\n      // For testing purposes, we'll accept any token that's not explicitly invalid\n      if (token === 'invalid-refresh-token') {\n        throw new Error('Invalid token');\n      }\n      \n      // For test-refresh-token, return a valid payload\n      if (token === 'test-refresh-token') {\n        return { sub: 'test-user-id', email: 'test@example.com' };\n      }\n      \n      // For non-existent-user-token, return a different user ID\n      if (token === 'non-existent-user-token') {\n        return { sub: 'non-existent-user-id', email: 'nonexistent@example.com' };\n      }\n      \n      // Default case\n      throw new Error('Invalid token');\n    }),\n  };\n\n  const mockPrismaService = {\n    user: {\n      findUnique: jest.fn().mockResolvedValue({\n        ...mockUser,\n        refreshToken: 'test-refresh-token',\n      }),\n      update: jest.fn().mockImplementation((args: unknown) => {\n        return Promise.resolve({\n          ...mockUser,\n          refreshToken: (args as any).data.refreshToken || 'new-refresh-token',\n        });\n      }),\n      updateMany: jest.fn().mockResolvedValue({ count: 1 }),\n    },\n  };\n\n  beforeEach(async () => {\n    // Reset all mocks\n    jest.clearAllMocks();\n    \n    // Create a new instance of AuthService with mocked dependencies\n    authService = new AuthService(\n      mockJwtService as any,\n      mockPrismaService as any,\n      mockConfigService as any\n    );\n    \n    // Mock the getTokens method to return our mock tokens\n    jest.spyOn(authService as any, 'getTokens').mockImplementation(async () => ({\n      accessToken: 'new-access-token',\n      refreshToken: 'new-refresh-token',\n      user: {\n        id: 'test-user-id',\n        email: 'test@example.com',\n        name: 'Test User'\n      }\n    }));\n    \n    // Mock the updateRefreshToken method\n    jest.spyOn(authService as any, 'updateRefreshToken').mockImplementation(async () => {\n      // Update the mock user's refresh token\n      mockPrismaService.user.findUnique.mockResolvedValueOnce({\n        ...mockUser,\n        refreshToken: 'new-refresh-token'\n      });\n    });\n    \n    // Mock the config service to return the correct secrets\n    (mockConfigService.get as jest.Mock).mockImplementation((key: string) => {\n      const config: Record<string, string> = {\n        'JWT_ACCESS_SECRET': 'test-access-secret',\n        'JWT_REFRESH_SECRET': 'test-refresh-secret',\n      };\n      return config[key] || null;\n    });\n    \n    // Assign mocks to the variables for test assertions\n    jwtService = mockJwtService as any;\n    configService = mockConfigService as any;\n    prismaService = mockPrismaService as any;\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('refreshTokens', () => {\n    it('should refresh tokens with valid refresh token', async () => {\n      const userId = 'test-user-id';\n      const refreshToken = 'test-refresh-token';\n      \n      // Update the mock user to have the same refresh token\n      mockPrismaService.user.findUnique.mockResolvedValueOnce({\n        ...mockUser,\n        refreshToken: refreshToken, // Make sure this matches the token we're passing\n      });\n      \n      // Mock the update method to return the updated user\n      mockPrismaService.user.update.mockResolvedValueOnce({\n        ...mockUser,\n        refreshToken: 'new-refresh-token',\n      });\n      \n      // Call the method\n      const result = await authService.refreshTokens(userId, refreshToken);\n      \n      // Verify the result\n      expect(result).toEqual({\n        accessToken: 'new-access-token',\n        refreshToken: 'new-refresh-token',\n        user: {\n          id: 'test-user-id',\n          email: 'test@example.com',\n          name: 'Test User',\n        },\n      });\n      \n      // Verify the service method was called with the correct arguments\n      expect(jwtService.verify).toHaveBeenCalledWith(refreshToken, expect.objectContaining({\n        secret: 'test-refresh-secret',\n      }));\n      expect(prismaService.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n      expect(prismaService.user.update).toHaveBeenCalledWith({\n        where: { id: userId },\n        data: { refreshToken: 'new-refresh-token' },\n      });\n    });\n\n    it('should throw UnauthorizedException if refresh token is invalid', async () => {\n      const userId = 'test-user-id';\n      const refreshToken = 'invalid-refresh-token';\n      \n      // Call the method and expect an exception\n      await expect(authService.refreshTokens(userId, refreshToken)).rejects.toThrow(\n        new UnauthorizedException('Invalid refresh token')\n      );\n      \n      // Verify the service method was called with the correct arguments\n      expect(jwtService.verify).toHaveBeenCalledWith(refreshToken, expect.objectContaining({\n        secret: 'test-refresh-secret',\n      }));\n    });\n\n    it('should throw UnauthorizedException with generic message when user not found', async () => {\n      const userId = 'non-existent-user-id';\n      const refreshToken = 'non-existent-user-token';\n      \n      // Mock user not found\n      (prismaService.user.findUnique as jest.Mock).mockResolvedValueOnce(null);\n      \n      // Call the method and expect an exception\n      await expect(authService.refreshTokens(userId, refreshToken)).rejects.toThrow(\n        new UnauthorizedException('Invalid refresh token')\n      );\n      \n      // Verify the service method was called with the correct arguments\n      expect(jwtService.verify).toHaveBeenCalledWith(refreshToken, expect.objectContaining({\n        secret: 'test-refresh-secret',\n      }));\n      expect(prismaService.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n      });\n    });\n\n    it('should throw UnauthorizedException with generic message when refresh token does not match', async () => {\n      const userId = 'test-user-id';\n      const wrongToken = 'wrong-refresh-token';\n      \n      // Mock JWT verify to succeed\n      (jwtService.verify as jest.Mock).mockReturnValueOnce({ sub: userId });\n      \n      // Mock user with different refresh token\n      (prismaService.user.findUnique as jest.Mock).mockResolvedValueOnce({\n        ...mockUser,\n        refreshToken: 'different-refresh-token',\n      });\n\n      // The service wraps all errors in a generic 'Invalid refresh token' message\n      await expect(authService.refreshTokens(userId, wrongToken)).rejects.toThrow(\n        new UnauthorizedException('Invalid refresh token')\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/chat.gateway.fixed.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Server' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'attachMockServer' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[487,490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[487,490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[579,582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[579,582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[983,986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[983,986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1030,1033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1030,1033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1680,1683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1680,1683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2114,2117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2114,2117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2644,2647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2644,2647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2716,2719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2716,2719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3320,3323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3320,3323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3392,3395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3392,3395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Server, Socket } from 'socket.io';\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { attachMockServer } from './utils/gateway';\n\n// Mock the dependencies\nconst mockPresenceService: jest.Mocked<PresenceService> = {\n  updateUserPresence: jest.fn(),\n  removeUserPresence: jest.fn(),\n  isOnline: jest.fn(() => true),\n} as any;\n\nconst mockRtcGateway: jest.Mocked<RtcGateway> = {\n  registerWsServer: jest.fn(),\n} as any;\n\ndescribe('ChatGateway', () => {\n  let gateway: ChatGateway;\n  let mockServer: unknown;\n  \n  beforeEach(() => {\n    mockServer = {\n      emit : jest.fn(),\n      to   : jest.fn().mockReturnThis(),\n      sockets: { sockets: new Map() },\n    };\n    gateway = new ChatGateway(mockPresenceService, mockRtcGateway);\n    Object.defineProperty(gateway, 'server', { get: () => mockServer });\n    (gateway as any).userSockets  = new Map();\n    (gateway as any).socketToUser = new Map();\n    mockPresenceService.updateUserPresence = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(gateway).toBeDefined();\n  });\n\n  describe('handleConnection', () => {\n    it('should update user presence when a user connects', () => {\n      const client = {\n        id: 'test-client-id',\n        data: { user: { userId: 'test-user-id' } },\n        join: jest.fn(),\n      } as unknown as Socket;\n\n      gateway.handleConnection(client);\n\n      expect(mockPresenceService.updateUserPresence).toHaveBeenCalledWith('test-user-id');\n      expect((mockServer as any).emit).toHaveBeenCalledWith('userOnline', { userId: 'test-user-id' });\n    });\n  });\n\n  describe('handleDisconnect', () => {\n    it('should notify when a user disconnects', () => {\n      const client = {\n        id: 'test-client-id',\n        data: { user: { userId: 'test-user-id' } },\n        rooms: new Set(['room1', 'room2']),\n      } as unknown as Socket;\n\n      gateway.handleDisconnect(client);\n\n      expect((mockServer as any).emit).toHaveBeenCalledWith('userOffline', { userId: 'test-user-id' });\n    });\n  });\n\n  describe('handleMessage', () => {\n    it('should broadcast message to room', () => {\n      const client = {\n        id: 'test-client-id',\n        data: { user: { userId: 'test-user-id', username: 'test-user' } },\n        join: jest.fn(),\n      } as unknown as Socket;\n\n      const message = {\n        to: 'test-room',\n        content: 'Hello, world!',\n      };\n\n      gateway.handleMessage(client, message);\n\n      expect((mockServer as any).to).toHaveBeenCalledWith('test-room');\n      expect((mockServer as any).emit).toHaveBeenCalledWith('message', {\n        from: 'test-user-id',\n        to: 'test-room',\n        content: 'Hello, world!',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('handleTyping', () => {\n    it('should broadcast typing status', () => {\n      const client = {\n        id: 'test-client-id',\n        data: { user: { userId: 'test-user-id', username: 'test-user' } },\n      } as unknown as Socket;\n\n      const typingData = {\n        to: 'test-room',\n        isTyping: true,\n      };\n\n      gateway.handleTyping(client, typingData);\n\n      expect((mockServer as any).to).toHaveBeenCalledWith('test-room');\n      expect((mockServer as any).emit).toHaveBeenCalledWith('typing', {\n        from: 'test-user-id',\n        isTyping: true,\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/chat.gateway.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/chat.gateway.unit.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MockIoServer' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'attachMockServer' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":26}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { presenceServiceMock } from './utils/presence-mock';\nimport { MockIoServer } from './__mocks__/socket-io';\nimport { attachMockServer } from './utils/gateway';\n\n// Mock dependencies\nconst mockRtcGateway = {\n  registerWsServer: jest.fn(),\n};\n\n\n\ndescribe('ChatGateway (Unit)', () => {\n  let gateway: ChatGateway;\n  let mockServer: unknown;\n\n  beforeEach(() => {\n    mockServer = {\n      emit : jest.fn(),\n      to   : jest.fn().mockReturnThis(),\n      sockets: { sockets: new Map() },\n    };\n    gateway = new ChatGateway(presenceServiceMock, mockRtcGateway);\n    Object.defineProperty(gateway, 'server', { get: () => mockServer });\n    (gateway as unknown as { userSockets: Map<unknown, unknown> }).userSockets  = new Map();\n    (gateway as unknown as { socketToUser: Map<unknown, unknown> }).socketToUser = new Map();\n    presenceServiceMock.updateUserPresence = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(gateway).toBeDefined();\n  });\n\n  describe('handleConnection', () => {\n    it('should update user presence when a user connects', async () => {\n      const mockSocket = {\n        id: 'test-socket-id',\n        data: {\n          user: {\n            userId: 'test-user',\n          },\n        },\n        on: jest.fn(),\n        once: jest.fn(),\n        join: jest.fn(),\n        leave: jest.fn(),\n        emit: jest.fn(),\n        to: jest.fn().mockReturnThis(),\n        disconnect: jest.fn(),\n        connected: true,\n      };\n\n      await gateway.handleConnection(mockSocket as unknown);\n      \n      expect(presenceServiceMock.updateUserPresence).toHaveBeenCalledWith('test-user');\n      expect(mockServer.emit).toHaveBeenCalledWith('userOnline', { userId: 'test-user' });\n    });\n  });\n\n  describe('handleDisconnect', () => {\n    it('should notify when a user disconnects', async () => {\n      const mockSocket = {\n        id: 'test-socket-id',\n        data: {\n          user: {\n            userId: 'test-user',\n          },\n        },\n        on: jest.fn(),\n        join: jest.fn(),\n        leave: jest.fn(),\n        emit: jest.fn(),\n        to: jest.fn().mockReturnThis(),\n        disconnect: jest.fn(),\n        connected: false,\n      };\n\n      await gateway.handleDisconnect(mockSocket as unknown);\n      expect(mockServer.emit).toHaveBeenCalledWith('userOffline', { userId: 'test-user' });\n    });\n  });\n\n  describe('handleMessage', () => {\n    it('should broadcast message to room', async () => {\n      const mockSocket = {\n        id: 'test-socket-id',\n        data: {\n          user: {\n            userId: 'test-user',\n          },\n        },\n        on: jest.fn(),\n        once: jest.fn(),\n        join: jest.fn(),\n        leave: jest.fn(),\n        emit: jest.fn(),\n        to: jest.fn().mockReturnThis(),\n        disconnect: jest.fn(),\n        connected: true,\n      };\n\n      const messageData = {\n        to: 'room:test-room',\n        content: 'Hello, world!',\n      };\n\n      const result = await gateway.handleMessage(mockSocket as unknown, messageData);\n      \n      expect(result).toBeUndefined();\n      \n      expect(mockServer.to).toHaveBeenCalledWith('room:test-room');\n      expect(mockServer.emit).toHaveBeenCalledWith('message', expect.any(Object));\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/chat.heartbeat.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/chat.heartbeat.unit.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Socket' is defined but never used.","line":8,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Namespace' is defined but never used.","line":8,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MockSocket' is defined but never used.","line":12,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIntervalSpy' is defined but never used.","line":46,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearIntervalSpy' is defined but never used.","line":47,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pingIntervalCallback' is assigned a value but never used.","line":50,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'checkIntervalCallback' is assigned a value but never used.","line":51,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createMockInterval' is assigned a value but never used.","line":57,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearIntervalSpy' is assigned a value but never used.","line":87,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":87,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9280,9283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9280,9283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9479,9482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9479,9482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { WsJwtGuard } from '../src/modules/auth/guards/ws-jwt.guard';\nimport { Server, Socket, Namespace } from 'socket.io';\nimport { MockIoServer } from './__mocks__/socket-io';\nimport { attachMockServer } from './utils/gateway';\n\ntype MockSocket = {\n  id: string;\n  data: unknown;\n  connected: boolean;\n  disconnected: boolean;\n  rooms: Set<string>;\n  handshake: unknown;\n  nsp: unknown;\n  client: unknown;\n  on: jest.Mock;\n  once: jest.Mock;\n  emit: jest.Mock;\n  disconnect: jest.Mock;\n  join: jest.Mock;\n  leave: jest.Mock;\n  to: jest.Mock;\n  in: jest.Mock;\n  listeners: jest.Mock;\n  removeListener: jest.Mock;\n  removeAllListeners: jest.Mock;\n  broadcast: {\n    to: jest.Mock;\n    emit: jest.Mock;\n  };\n  use: jest.Mock;\n  compress: jest.Mock;\n  timeout: jest.Mock;\n  send: jest.Mock;\n};\n\ntype PongHandler = (data: { timestamp: number }) => void;\ntype DisconnectHandler = () => void;\n\n// Mock global timers\nlet setIntervalSpy: jest.SpyInstance;\nlet clearIntervalSpy: jest.SpyInstance;\n\n// Track intervals and callbacks\nlet pingIntervalCallback: (() => void) | undefined;\nlet checkIntervalCallback: (() => void) | undefined;\nconst pongHandlers = new Map<string, PongHandler>();\nconst disconnectHandlers = new Map<string, DisconnectHandler>();\nconst activeIntervals: Set<NodeJS.Timeout> = new Set();\n\n// Mock implementation for setInterval that tracks callbacks\nconst createMockInterval = (callback: () => void, ms: number): NodeJS.Timeout => {\n  const mockInterval = {\n    [Symbol.toPrimitive]() { return ''; },\n    hasRef: () => true,\n    refresh: () => {},\n    unref: () => {},\n    ref: () => {},\n    _callback: callback,\n    _ms: ms\n  } as unknown as NodeJS.Timeout;\n  \n  if (ms === 30000) { // Ping interval (30 seconds)\n    pingIntervalCallback = callback;\n  } else if (ms === 35000) { // Check interval (35 seconds)\n    checkIntervalCallback = callback;\n  }\n  \n  activeIntervals.add(mockInterval);\n  return mockInterval;\n};\n\ndescribe('ChatGateway Heartbeat (Unit)', () => {\n  let gateway: ChatGateway;\n  let mockServer: unknown;\n  let mockSocket: unknown;\n  let mockPresenceService: unknown;\n  let mockRtcGateway: unknown;\n  \n  // Mock functions for tracking intervals\n  let setIntervalSpy: jest.SpyInstance;\n  let clearIntervalSpy: jest.SpyInstance;\n  \n  // Track intervals\n  const intervals = new Map<number, () => void>();\n  let intervalId = 0;\n\n  // Setup before each test\n  beforeEach(async () => {\n    // Reset intervals\n    intervals.clear();\n    intervalId = 0;\n    \n    // Create a mock server\n    mockServer = new MockIoServer();\n\n    // Mock PresenceService\n    mockPresenceService = {\n      updateUserPresence: jest.fn(),\n      removeUserPresence: jest.fn(),\n      getUserPresence: jest.fn()\n    };\n\n    // Mock RtcGateway\n    mockRtcGateway = {\n      emitToUser: jest.fn(),\n      registerWsServer: jest.fn()\n    };\n\n    // Mock JwtService\n    const mockJwtService = {\n      verifyAsync: jest.fn().mockResolvedValue({ sub: 'test-user-1', username: 'testuser' })\n    };\n\n    // Mock ConfigService\n    const mockConfigService = {\n      get: jest.fn().mockReturnValue('test-secret')\n    };\n\n    // Create testing module\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ChatGateway,\n        { provide: PresenceService, useValue: mockPresenceService },\n        { provide: RtcGateway, useValue: mockRtcGateway },\n        { provide: JwtService, useValue: mockJwtService },\n        { provide: ConfigService, useValue: mockConfigService }\n      ]\n    })\n      .overrideGuard(WsJwtGuard)\n      .useValue({ canActivate: () => true })\n      .compile();\n\n    // Get gateway instance\n    gateway = module.get<ChatGateway>(ChatGateway);\n    attachMockServer(gateway, mockServer as unknown as Server);\n\n    // Mock setInterval and clearInterval\n    setIntervalSpy = jest.spyOn(global, 'setInterval').mockImplementation((callback: unknown) => {\n      const id = ++intervalId;\n      intervals.set(id, callback as () => void);\n      return id as unknown as NodeJS.Timeout;\n    });\n\n    clearIntervalSpy = jest.spyOn(global, 'clearInterval').mockImplementation((id: unknown) => {\n      intervals.delete(id as number);\n    });\n\n    // Create a mock socket implementation\n    const mockSocketImpl: unknown = {\n      id: 'test-socket-1',\n      data: {\n        user: {\n          userId: 'test-user-1',\n          username: 'testuser'\n        }\n      },\n      connected: true,\n      disconnected: false,\n      rooms: new Set(),\n      emit: jest.fn(),\n      on: jest.fn(),\n      disconnect: jest.fn(),\n    };\n    \n    // Add all socket methods\n    mockSocketImpl.disconnect = jest.fn().mockImplementation(function(this: unknown) {\n      this.connected = false;\n      this.disconnected = true;\n      return this;\n    });\n    mockSocketImpl.emit = jest.fn().mockImplementation((event: string, data: unknown) => {\n      // For ping events, simulate pong response after a short delay\n      if (event === 'ping') {\n        process.nextTick(() => {\n          const pongHandler = pongHandlers.get('test-socket-1');\n          if (pongHandler) {\n            pongHandler({ timestamp: (data as { timestamp: number }).timestamp });\n          }\n        });\n      }\n      return mockSocketImpl;\n    });\n    mockSocketImpl.on = jest.fn((event: string, callback: unknown) => {\n      if (event === 'pong') {\n        pongHandlers.set('test-socket-1', callback as PongHandler);\n      } else if (event === 'disconnect') {\n        disconnectHandlers.set('test-socket-1', callback as DisconnectHandler);\n      }\n      return mockSocketImpl;\n    });\n    // Set up all mock methods\n    mockSocketImpl.once = jest.fn().mockImplementation((event: string, callback: unknown) => {\n      return mockSocketImpl.on?.(event, callback) || mockSocketImpl;\n    });\n    \n    mockSocketImpl.listeners = jest.fn(() => []);\n    mockSocketImpl.join = jest.fn().mockImplementation(() => mockSocketImpl);\n    mockSocketImpl.leave = jest.fn();\n    mockSocketImpl.to = jest.fn().mockReturnThis();\n    mockSocketImpl.in = jest.fn().mockReturnThis();\n    \n    // Set up broadcast mock\n    const broadcastMock = {\n      to: jest.fn().mockReturnThis(),\n      emit: jest.fn()\n    };\n    mockSocketImpl.broadcast = broadcastMock;\n    \n    // Set up handshake mock\n    mockSocketImpl.handshake = {};\n    \n    // Set up namespace mock\n    mockSocketImpl.nsp = {\n      name: '/',\n      sockets: new Map()\n    };\n    \n    // Set up client mock\n    mockSocketImpl.client = {\n      conn: {\n        remoteAddress: '127.0.0.1'\n      }\n    };\n    \n    // Set up remaining mock methods\n    mockSocketImpl.use = jest.fn();\n    mockSocketImpl.compress = jest.fn().mockReturnThis();\n    mockSocketImpl.timeout = jest.fn();\n    mockSocketImpl.send = jest.fn();\n    mockSocketImpl.removeListener = jest.fn();\n    mockSocketImpl.removeAllListeners = jest.fn();\n    \n    // Add mock socket to server's sockets map\n    mockServer.sockets.sockets.set('test-socket-1', mockSocketImpl);\n    \n    // Assign to test variable\n    mockSocket = mockSocketImpl;\n  });\n\n  afterEach(() => {\n    // Clear all intervals\n    activeIntervals.clear();\n    \n    // Clear all handlers\n    pongHandlers.clear();\n    disconnectHandlers.clear();\n    \n    // Reset callbacks\n    pingIntervalCallback = undefined;\n    checkIntervalCallback = undefined;\n    \n    // Clear all timers and mocks\n    jest.clearAllTimers();\n    jest.clearAllMocks();\n  });\n\n  it('should initialize with ping interval', () => {\n    // Reset mock calls before test\n    setIntervalSpy.mockClear();\n    \n    // Call onModuleInit to set up the ping interval\n    (gateway as unknown as { onModuleInit: () => void }).onModuleInit();\n    \n    // Verify the WebSocket server was registered with RTC gateway\n    expect(mockRtcGateway.registerWsServer).toHaveBeenCalledWith(expect.anything());\n    \n    // Should have set up the ping interval (30s)\n    expect(setIntervalSpy).toHaveBeenCalledWith(expect.any(Function), 30000);\n    \n    // The interval should be stored in the instance\n    expect((gateway as unknown as { pingInterval: unknown }).pingInterval).toBeDefined();\n    \n    // Clean up intervals\n    jest.clearAllTimers();\n  });\n\n  it('should send ping and handle pong', async () => {\n    // Setup\n    (gateway as unknown as { onModuleInit: () => void }).onModuleInit();\n    \n    // Simulate connection\n    gateway.handleConnection(mockSocket);\n    \n    // Get the first interval callback (ping)\n    const pingCallback = setIntervalSpy.mock.calls[0][0];\n    \n    // Reset mocks before testing\n    (mockSocket.emit as jest.Mock).mockClear();\n    \n    // Trigger ping\n    pingCallback();\n    \n    // Wait for any async operations\n    await new Promise(process.nextTick);\n    \n    // Should have sent a ping\n    expect(mockSocket.emit).toHaveBeenCalledWith('ping', { timestamp: expect.any(Number) });\n    \n    // Get the pong handler\n    const pongHandler = mockSocket.on.mock.calls.find(\n      (call: [string, any]) => call[0] === 'pong'\n    )?.[1];\n    expect(pongHandler).toBeDefined();\n    \n    // Get the timestamp from the ping\n    const pingCall = mockSocket.emit.mock.calls.find(\n      (call: [string, any]) => call[0] === 'ping'\n    );\n    expect(pingCall).toBeDefined();\n    const pingData = pingCall[1];\n    \n    // Simulate pong response with the same timestamp\n    pongHandler({ timestamp: (pingData as { timestamp: number }).timestamp });\n    \n    // Should have reset missed pongs counter\n    const missedPongs = (gateway as unknown as { missedPongs: Map<string, number> }).missedPongs as Map<string, number>;\n    expect(missedPongs.get('test-socket-1')).toBe(0);\n    \n    // Verify presence was updated\n    expect(mockPresenceService.updateUserPresence).toHaveBeenCalledWith('test-user-1');\n    \n    // Clean up\n    mockSocket.emit.mockClear();\n    mockPresenceService.updateUserPresence.mockClear();\n  });\n\n  it('should clean up on disconnection', () => {\n    // Setup\n    (gateway as unknown as { onModuleInit: () => void }).onModuleInit();\n    \n    // Simulate connection\n    gateway.handleConnection(mockSocket);\n    \n    // Get the missedPongs map\n    const missedPongs = (gateway as unknown as { missedPongs: Map<string, number> }).missedPongs as Map<string, number>;\n    \n    // Add test data\n    missedPongs.set('test-socket-1', 1);\n    \n    // Reset mocks\n    mockServer.emit.mockClear();\n    \n    // Simulate disconnection\n    gateway.handleDisconnect(mockSocket);\n    \n    // Should clean up client data\n    expect(missedPongs.has('test-socket-1')).toBe(false);\n    \n    // Verify userOffline event was emitted to all clients\n    expect(mockServer.emit).toHaveBeenCalledWith('userOffline', { userId: 'test-user-1' });\n  });\n\n  it('should handle missed pongs and disconnect', () => {\n    // Setup\n    (gateway as unknown as { onModuleInit: () => void }).onModuleInit();\n    \n    // Simulate connection\n    gateway.handleConnection(mockSocket);\n    \n    // Get the missedPongs map and set a high missed pong count\n    const missedPongs = (gateway as unknown as { missedPongs: Map<string, number> }).missedPongs as Map<string, number>;\n    const MAX_MISSED_PONGS = 2;\n    missedPongs.set('test-socket-1', MAX_MISSED_PONGS + 1);\n    \n    // Get the checkPongs interval from the connection handler\n    const checkPongsCall = setIntervalSpy.mock.calls.find(\n      (call: unknown[]) => call[1] === 35000\n    );\n    const checkPongsInterval = checkPongsCall?.[0];\n    \n    // Reset mocks\n    mockSocket.disconnect.mockClear();\n    \n    // Simulate the checkPongs interval\n    if (checkPongsInterval) {\n      checkPongsInterval();\n    }\n    \n    // Verify disconnect was called\n    expect(mockSocket.disconnect).toHaveBeenCalled();\n    \n    // Clean up\n    if (checkPongsInterval) {\n      clearInterval(checkPongsInterval);\n    }\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/controller-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/direct-controller-test.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/direct-files-controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/direct-files-service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/e2e.app.e2e-spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Server' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import request from 'supertest';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport { Test } from '@nestjs/testing';\nimport { AppModule } from '../src/app.module';\nimport { Server } from 'socket.io';\nimport { io as ClientIO, Socket as ClientSocket } from 'socket.io-client';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('App E2E (e2e)', () => {\n  let app: INestApplication;\n  let httpServer: unknown;\n  let jwtCookie: string;\n  let accessToken: string;\n\n  beforeAll(async () => {\n    const moduleFixture = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ whitelist: true, transform: true }));\n    await app.init();\n    httpServer = app.getHttpServer();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  it('POST /auth/login should return 201 and set JWT cookies', async () => {\n    const res = await request(httpServer)\n      .post('/auth/login')\n      .send({ email: 'test@example.com', password: 'testpass' });\n    expect(res.status).toBe(201);\n    expect(res.headers['set-cookie']).toBeDefined();\n    jwtCookie = res.headers['set-cookie'].find((c: string) => c.includes('accessToken'));\n    expect(jwtCookie).toBeDefined();\n    // Optionally extract access token from response body if returned\n    accessToken = res.body?.accessToken || '';\n  });\n\n  it('WS connect to /chat with JWT should receive welcome event', (done) => {\n    const client: ClientSocket = ClientIO('http://localhost:3000/chat', {\n      transports: ['websocket'],\n      extraHeaders: {\n        Cookie: jwtCookie,\n      },\n      auth: { token: accessToken },\n      forceNew: true,\n      reconnection: false,\n    });\n    client.on('connect', () => {\n      // Listen for a welcome or ready event\n      client.on('welcome', (msg: unknown) => {\n        expect(msg).toBeDefined();\n        client.disconnect();\n        done();\n      });\n      // Fallback: if no welcome, just disconnect after connect\n      setTimeout(() => {\n        client.disconnect();\n        done();\n      }, 1000);\n    });\n    client.on('connect_error', (err) => {\n      client.disconnect();\n      done(err);\n    });\n  });\n\n  it('POST /files/upload should upload a file and return 200 with ULID key', async () => {\n    const testFile = path.join(__dirname, '../__mocks__/testfile.txt');\n    fs.writeFileSync(testFile, 'test upload');\n    const res = await request(httpServer)\n      .post('/files/upload')\n      .set('Cookie', jwtCookie)\n      .attach('file', testFile);\n    expect(res.status).toBe(200);\n    expect(res.body).toHaveProperty('key');\n    expect(typeof res.body.key).toBe('string');\n    // ULID is 26 chars, Crockford base32\n    expect(res.body.key.length).toBe(26);\n    fs.unlinkSync(testFile);\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/e2e.security.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/e2e/file-share.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/ensure-s3-bucket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/files-controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/files-module.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/files.controller.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/files.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/integration.redis.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2071,2074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2071,2074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2120,2123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2120,2123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":55,"column":29,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":55,"endColumn":56},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":56,"column":29,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":56,"endColumn":56}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { INestApplication } from '@nestjs/common';\nimport { Test } from '@nestjs/testing';\nimport { createServer } from 'http';\nimport { Server as IoServer } from 'socket.io';\nimport { createAdapter } from '@socket.io/redis-adapter';\nimport { createClient } from 'redis';\nimport { AppModule } from '../src/app.module';\nimport { TestIoAdapter } from './utils/test-io-adapter';\n\ndescribe('Redis Adapter Broadcast (integration)', () => {\n  let appA: INestApplication, appB: INestApplication;\n  let httpA: ReturnType<typeof createServer>, httpB: ReturnType<typeof createServer>;\n  let ioA: IoServer, ioB: IoServer;\n  let pubA, subA, pubB, subB;\n\n  beforeAll(async () => {\n    // Setup Redis clients\n    pubA = createClient({ url: 'redis://localhost:6379' });\n    subA = pubA.duplicate();\n    pubB = createClient({ url: 'redis://localhost:6379' });\n    subB = pubB.duplicate();\n    await Promise.all([pubA.connect(), subA.connect(), pubB.connect(), subB.connect()]);\n\n    // App A\n    httpA = createServer();\n    ioA = new IoServer(httpA, { cors: { origin: '*' } });\n    ioA.adapter(createAdapter(pubA, subA));\n    await new Promise<void>(resolve => httpA.listen(0, () => resolve()));\n    const moduleA = await Test.createTestingModule({ imports: [AppModule] }).compile();\n    appA = moduleA.createNestApplication();\n    appA.useWebSocketAdapter(new TestIoAdapter(appA, ioA));\n    await appA.init();\n\n    // App B\n    httpB = createServer();\n    ioB = new IoServer(httpB, { cors: { origin: '*' } });\n    ioB.adapter(createAdapter(pubB, subB));\n    await new Promise<void>(resolve => httpB.listen(0, () => resolve()));\n    const moduleB = await Test.createTestingModule({ imports: [AppModule] }).compile();\n    appB = moduleB.createNestApplication();\n    appB.useWebSocketAdapter(new TestIoAdapter(appB, ioB));\n    await appB.init();\n  }, 20000);\n\n  afterAll(async () => {\n    await appA?.close();\n    await appB?.close();\n    ioA?.close?.();\n    ioB?.close?.();\n  }, 60000);\n\n  it('should broadcast messages between instances', done => {\n    const portA = (httpA.address() as any).port;\n    const portB = (httpB.address() as any).port;\n    const { io: clientA } = require('socket.io-client')(`http://localhost:${portA}`);\n    const { io: clientB } = require('socket.io-client')(`http://localhost:${portB}`);\n    clientB.on('test-broadcast', (msg) => {\n      expect(msg).toBe('hello-redis');\n      clientA.close();\n      clientB.close();\n      done();\n    });\n    clientA.on('connect', () => {\n      ioA.emit('test-broadcast', 'hello-redis');\n    });\n  });\n}); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/integration.ulid-upload.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/jest.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/presence.service.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc-enhanced.gateway.legacy.skip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc.gateway.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc.presign.e2e.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HttpStatus' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FilesService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AwsS3Service' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1123,1126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1123,1126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { HttpStatus } from '@nestjs/common';\nimport { FilesController } from '../src/modules/files/files.controller';\nimport { FilesService } from '../src/modules/files/files.service';\nimport { AwsS3Service } from '../src/modules/files/aws-s3.service';\nimport { FileMetaDto } from '../src/modules/files/dto/file-meta.dto';\n\n// Mock the FilesService\nconst mockFilesService = {\n  getPresignedPair: jest.fn(),\n};\n\n// Mock the AwsS3Service\nconst mockAwsS3Service = {\n  getPresignedPair: jest.fn(),\n};\n\ndescribe('FilesController', () => {\n  let filesController: FilesController;\n\n  const mockUser = { \n    id: 'test-user-id', \n    email: 'test@example.com',\n    isApproved: true\n  };\n\n  const mockPresignedUrls = {\n    putUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n    getUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n  };\n\n  beforeEach(async () => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Create a new instance of the controller with mocked services\n    filesController = new FilesController(\n      mockFilesService as any,\n    );\n    \n    // Setup default mock implementations\n    mockFilesService.getPresignedPair.mockResolvedValue(mockPresignedUrls);\n    mockAwsS3Service.getPresignedPair.mockResolvedValue(mockPresignedUrls);\n  });\n\n  describe('create', () => {\n    it('should return presigned URLs for valid file data', async () => {\n      const fileData: FileMetaDto = {\n        name: 'test-file.txt',\n        mime: 'text/plain',\n        size: 1024,\n      };\n\n      const result = await filesController.create(fileData, mockUser);\n\n      expect(result).toEqual(mockPresignedUrls);\n      expect(mockFilesService.getPresignedPair).toHaveBeenCalledWith(fileData, mockUser);\n    });\n\n    it('should handle errors from the service', async () => {\n      const fileData: FileMetaDto = {\n        name: 'test-file.txt',\n        mime: 'text/plain',\n        size: 1024,\n      };\n\n      const error = new Error('Failed to generate presigned URLs');\n      mockFilesService.getPresignedPair.mockRejectedValueOnce(error);\n\n      await expect(filesController.create(fileData, mockUser)).rejects.toThrow(error);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc.presign.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc.smoke.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IoAdapter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Server' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":25,"column":18,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":25,"endColumn":33},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":56,"column":7,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":56,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Server } from 'socket.io';\nimport { Server as HttpServer } from 'http';\nimport { AddressInfo } from 'net';\n\n// Simple smoke test to verify the testing environment works\n// This doesn't test the actual RTC functionality, just the test setup\n\ndescribe('Basic Test Environment', () => {\n  let app: INestApplication;\n  let httpServer: HttpServer;\n\n  beforeAll(async () => {\n    console.log('1. Creating test module...');\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      providers: [],\n    }).compile();\n\n    console.log('2. Creating Nest application...');\n    app = moduleFixture.createNestApplication();\n    \n    // Basic HTTP server for testing\n    httpServer = require('http').createServer();\n    \n    console.log('3. Starting HTTP server...');\n    await new Promise<void>((resolve) => {\n      httpServer.listen(0, '127.0.0.1', () => {\n        console.log(`HTTP server listening on port ${(httpServer.address() as AddressInfo).port}`);\n        resolve();\n      });\n    });\n  });\n\n  afterAll(async () => {\n    console.log('Cleaning up...');\n    if (httpServer) {\n      await new Promise<void>((resolve) => httpServer.close(() => resolve()));\n    }\n    if (app) {\n      await app.close();\n    }\n    console.log('Cleanup complete');\n  });\n\n  it('should pass a basic test', () => {\n    console.log('Running basic test...');\n    expect(true).toBe(true);\n  });\n\n  it('should make an HTTP request', async () => {\n    console.log('Testing HTTP request...');\n    const port = (httpServer.address() as AddressInfo).port;\n    const response = await new Promise<{ statusCode?: number }>((resolve) => {\n      require('http').get(`http://127.0.0.1:${port}`, (res: unknown) => {\n        let data = '';\n        res.on('data', (chunk: string) => (data += chunk));\n        res.on('end', () => resolve({ statusCode: res.statusCode, data }));\n      }).on('error', (e: Error) => resolve({ error: e.message }));\n    });\n\n    // We expect a 404 since we didn't set up any routes\n    expect(response.statusCode).toBe(404);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/rtc/ws.smoke.test.ts","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":1,"column":40,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":1,"endColumn":53},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":2,"column":26,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":2,"endColumn":41}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const { WebSocket, WebSocketServer } = require('ws');\nconst { createServer } = require('http');\n\n// Simple WebSocket echo server for testing\nfunction createWebSocketServer(port = 0) {\n  const server = createServer();\n  const wss = new WebSocketServer({ noServer: true });\n\n  // Handle WebSocket connections\n  server.on('upgrade', (request, socket, head) => {\n    console.log('WebSocket upgrade request received');\n    \n    // Simple token validation (in a real app, verify JWT)\n    const token = request.headers['sec-websocket-protocol'];\n    \n    if (!token) {\n      console.log('No token provided, rejecting connection');\n      socket.write('HTTP/1.1 401 Unauthorized\\r\\n\\r\\n');\n      socket.destroy();\n      return;\n    }\n    \n    console.log(`Client connected with token: ${token}`);\n    \n    wss.handleUpgrade(request, socket, head, (ws) => {\n      wss.emit('connection', ws, request);\n    });\n  });\n\n  // Handle new connections\n  wss.on('connection', (ws) => {\n    console.log('Client connected');\n    \n    // Echo any message back to the client\n    ws.on('message', (message) => {\n      console.log(`Received: ${message}`);\n      ws.send(`Echo: ${message}`);\n    });\n    \n    ws.on('close', () => {\n      console.log('Client disconnected');\n    });\n  });\n\n  // Start the server\n  return new Promise((resolve) => {\n    server.listen(port, () => {\n      const address = server.address();\n      const port = typeof address === 'string' ? 0 : address.port;\n      console.log(`Test WebSocket server listening on port ${port}`);\n      resolve({\n        port,\n        close: () => new Promise((resolveClose) => {\n          wss.close(() => {\n            server.close(resolveClose);\n          });\n        })\n      });\n    });\n  });\n}\n\ndescribe('WebSocket Smoke Test', () => {\n  let server;\n  let port;\n  \n  beforeAll(async () => {\n    // Start the WebSocket server\n    server = await createWebSocketServer(0);\n    port = server.port;\n  }, 10000);\n  \n  afterAll(async () => {\n    // Close the server\n    if (server) {\n      await server.close();\n      console.log('Test WebSocket server closed');\n    }\n  }, 10000);\n  \n  test('should connect with a valid token', (done) => {\n    const ws = new WebSocket(`ws://localhost:${port}`, ['valid-token']);\n    \n    ws.on('open', () => {\n      console.log('WebSocket connection opened');\n      ws.close();\n      done();\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      done.fail('Failed to connect to WebSocket server');\n    });\n  }, 10000);\n  \n  test('should reject connection without a token', (done) => {\n    const ws = new WebSocket(`ws://localhost:${port}`);\n    \n    ws.on('open', () => {\n      console.log('WebSocket connection opened unexpectedly');\n      ws.close();\n      done.fail('Connection should have been rejected');\n    });\n    \n    ws.on('error', (error) => {\n      console.log('Expected error (connection rejected):', error.message);\n      done();\n    });\n  }, 10000);\n  \n  test('should echo messages', (done) => {\n    const ws = new WebSocket(`ws://localhost:${port}`, ['valid-token']);\n    const testMessage = 'Hello, WebSocket!';\n    \n    ws.on('open', () => {\n      console.log('WebSocket connection opened for echo test');\n      ws.send(testMessage);\n    });\n    \n    ws.on('message', (message) => {\n      console.log('Received message:', message.toString());\n      expect(message.toString()).toBe(`Echo: ${testMessage}`);\n      ws.close();\n      done();\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      done.fail('WebSocket error during echo test');\n    });\n  }, 10000);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/security.e2e-spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/setup-e2e.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[411,414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[411,414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[514,517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[514,517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { AppModule } from '../src/app.module';\nimport { WsAdapter } from '../src/ws/ws-adapter';\n\nbeforeAll(async () => {\n  const module: TestingModule = await Test.createTestingModule({\n    imports: [AppModule],\n  }).compile();\n\n  const app = module.createNestApplication();\n  app.useWebSocketAdapter(new WsAdapter(app));\n  await app.init();\n  (global as any).__APP__ = app;        // reuse in individual specs\n});\n\nafterAll(async () => {\n  await (global as any).__APP__.close();\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/setup-jest.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":10,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":37}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { jest } from '@jest/globals';\n\n// Mock NestJS WebSocket decorators to avoid undefined SOCKET issues\nglobal.SOCKET = {}; // Fallback for undefined SOCKET\n\njest.mock('@nestjs/websockets', () => ({\n  ...jest.requireActual('@nestjs/websockets'),\n  ConnectedSocket: jest.fn((target, propertyKey, descriptor) => descriptor),\n  MessageBody: jest.fn((target, propertyKey, descriptor) => descriptor),\n  SubscribeMessage: jest.fn((message) => (target, propertyKey, descriptor) => descriptor),\n  WebSocketGateway: jest.fn(() => (target) => target),\n  WebSocketServer: jest.fn(() => () => ({ server: { on: jest.fn(), close: jest.fn() } })),\n}));\n\n// Add any other global mocks here\n\nconsole.log('Jest setup loaded'); ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/setup-s3.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/setup.unit.mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/simple-controller.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockAwsS3Service' is assigned a value but never used.","line":11,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mime' is assigned a value but never used.","line":81,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BadRequestException } from '@nestjs/common';\nimport { FilesController } from '../src/modules/files/files.controller';\nimport { FilesService } from '../src/modules/files/files.service';\nimport { AwsS3Service } from '../src/modules/files/aws-s3.service';\nimport { User } from '../src/modules/users/entities/user.entity';\nimport { FileMetaDto } from '../src/modules/files/dto/file-meta.dto';\n\ndescribe('FilesController (Simple)', () => {\n  let controller: FilesController;\n  let mockFilesService: Partial<FilesService>;\n  let mockAwsS3Service: Partial<AwsS3Service>;\n\n  const mockUser: User = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    name: 'Test User',\n    isApproved: true,\n  };\n\n  beforeEach(() => {\n    // Create mock implementations\n    mockAwsS3Service = {\n      getPresignedPair: jest.fn().mockResolvedValue({\n        putUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n        getUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n      }),\n    };\n\n    mockFilesService = {\n      getPresignedPair: jest.fn().mockImplementation((dto, user) => ({\n        putUrl: `https://s3.amazonaws.com/test-bucket/${user.id}/${dto.name}`,\n        getUrl: `https://s3.amazonaws.com/test-bucket/${user.id}/${dto.name}`,\n      })),\n    };\n\n    // Manually instantiate the controller with the mock service\n    controller = new FilesController(mockFilesService as FilesService);\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('create', () => {\n    const testFileData: FileMetaDto = {\n      name: 'test-file.txt',\n      mime: 'text/plain',\n      size: 1024,\n    };\n\n    it('should return presigned URLs for valid file data', async () => {\n      const result = await controller.create(testFileData, mockUser);\n      \n      expect(result).toBeDefined();\n      expect(result).toHaveProperty('putUrl');\n      expect(result).toHaveProperty('getUrl');\n      expect(result.putUrl).toContain('test-file.txt');\n      expect(result.putUrl).toContain('test-user-id');\n      \n      // Verify the service method was called with the correct arguments\n      expect(mockFilesService.getPresignedPair).toHaveBeenCalledWith(\n        testFileData,\n        mockUser\n      );\n    });\n\n    it('should handle empty file name', async () => {\n      const invalidFileData = { ...testFileData, name: '' };\n      \n      // Mock the service to throw an error for invalid data\n      (mockFilesService.getPresignedPair as jest.Mock).mockRejectedValueOnce(\n        new BadRequestException('File name cannot be empty')\n      );\n\n      await expect(controller.create(invalidFileData, mockUser)).rejects.toThrow(\n        BadRequestException\n      );\n    });\n\n    it('should handle missing mime type', async () => {\n      const { mime, ...fileDataWithoutMime } = testFileData;\n      \n      // Mock the service to handle missing mime type\n      (mockFilesService.getPresignedPair as jest.Mock).mockImplementationOnce((dto, user) => ({\n        putUrl: `https://s3.amazonaws.com/test-bucket/${user.id}/${dto.name}`,\n        getUrl: `https://s3.amazonaws.com/test-bucket/${user.id}/${dto.name}`,\n      }));\n\n      const result = await controller.create(fileDataWithoutMime as unknown, mockUser);\n      \n      expect(result).toBeDefined();\n      expect(result.putUrl).toContain(testFileData.name);\n    });\n\n    it('should handle service errors', async () => {\n      const errorMessage = 'S3 Service Unavailable';\n      \n      // Mock the service to throw an error\n      (mockFilesService.getPresignedPair as jest.Mock).mockRejectedValueOnce(\n        new Error(errorMessage)\n      );\n\n      await expect(controller.create(testFileData, mockUser)).rejects.toThrow(\n        errorMessage\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/simple-files.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2701,2704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2701,2704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { FilesController } from '../src/modules/files/files.controller';\nimport { FilesService } from '../src/modules/files/files.service';\nimport { AwsS3Service } from '../src/modules/files/aws-s3.service';\nimport { User } from '../src/modules/users/entities/user.entity';\n\ndescribe('FilesController (Direct Test)', () => {\n  let filesController: FilesController;\n  let filesService: FilesService;\n  let mockAwsS3Service: jest.Mocked<AwsS3Service>;\n  \n  // Mock user for testing\n  const testUser: User = {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    name: 'Test User',\n    isApproved: true,\n  };\n\n  beforeEach(() => {\n    // Create a mock AwsS3Service\n    mockAwsS3Service = {\n      getPresignedPair: jest.fn().mockResolvedValue({\n        uploadUrl: 'https://s3.amazonaws.com/test-bucket/test-user-id/test-file.txt',\n        downloadUrl: 'https://s3.amazonaws.com/test-bucket/test-user-id/test-file.txt',\n      })\n    } as unknown;\n    \n    // Create a new instance of FilesService with the mock AwsS3Service\n    filesService = new FilesService(mockAwsS3Service);\n    \n    // Create a new instance of the controller with the service\n    filesController = new FilesController(filesService);\n    \n    // Clear all mocks before each test\n    jest.clearAllMocks();\n  });\n\n  describe('getPresignedPair', () => {\n    it('should return presigned URLs for valid file data', async () => {\n      const fileData = {\n        name: 'test-file.txt',\n        mime: 'text/plain',\n        size: 1024,\n      };\n\n      // Call the controller method directly with the file data\n      // Using the presign endpoint which is the main endpoint\n      const result = await filesController.create(fileData, testUser);\n\n      // Verify the result\n      const keyRegex = new RegExp(`${testUser.id}/(?:([0-9A-HJKMNP-TV-Z]{26}|[0-9a-fA-F-]{36})-)?test-file\\\\.txt$`);\n      expect(result.uploadUrl).toMatch(new RegExp(`^https://s3.amazonaws.com/test-bucket/${keyRegex.source}`));\n      expect(result.downloadUrl).toMatch(new RegExp(`^https://s3.amazonaws.com/test-bucket/${keyRegex.source}`));\n      \n      // Verify the service method was called with the correct arguments\n      expect(mockAwsS3Service.getPresignedPair).toHaveBeenCalledWith(\n        expect.stringMatching(keyRegex),\n        fileData.mime,\n        fileData.size\n      );\n    });\n\n    it('should handle invalid file data gracefully', async () => {\n      // Test with partially invalid data\n      const invalidFileData = {\n        name: 'test-file.txt',\n        // Missing mime and size\n      };\n\n      // The controller doesn't validate the DTO, so it will still call the service\n      const result = await filesController.create(invalidFileData as any, testUser);\n      \n      // The service will still be called, but with undefined for missing fields\n      expect(mockAwsS3Service.getPresignedPair).toHaveBeenCalledWith(\n        expect.stringMatching(new RegExp(`${testUser.id}/(?:([0-9A-HJKMNP-TV-Z]{26}|[0-9a-fA-F-]{36})-)?test-file\\\\.txt$`)),\n        undefined,\n        undefined\n      );\n      \n      // We still expect a response with URLs\n      expect(result).toEqual({\n        uploadUrl: expect.any(String),\n        downloadUrl: expect.any(String),\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/simple.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/test-socket-utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/test-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'INestApplication' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":10,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":16,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[783,786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[783,786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1799,1802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1799,1802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1818,1821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1818,1821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1841,1844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1841,1844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3305,3308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3305,3308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, Logger as NestLogger } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { PrismaService } from '../prisma/prisma.service';\n\n// Mock JWT service\nconst mockJwtService = {\n  sign: jest.fn().mockReturnValue('mock-jwt-token'),\n  verify: jest.fn().mockImplementation((token) => ({\n    sub: 'test-user-id',\n    email: 'test@example.com',\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + 3600,\n  })),\n  decode: jest.fn().mockImplementation((token) => ({\n    sub: 'test-user-id',\n    email: 'test@example.com',\n  })),\n};\n\n// Mock Config service\nconst mockConfigService = {\n  get: jest.fn(<T = any>(key: string): T | null => {\n    const config: Record<string, unknown> = {\n      'JWT_SECRET': 'test-secret',\n      'JWT_EXPIRES_IN': '1h',\n      'REFRESH_TOKEN_SECRET': 'test-refresh-secret',\n      'REFRESH_TOKEN_EXPIRES_IN': '7d',\n      'NODE_ENV': 'test',\n    };\n    return (config[key] as T) ?? null;\n  }),\n};\n\n// Mock Prisma service\nconst mockPrismaService = {\n  $connect: jest.fn(),\n  $disconnect: jest.fn(),\n  user: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  // Add other models as needed\n};\n\n// Mock WebSocket client\ninterface MockSocket {\n  id: string;\n  handshake: {\n    auth: {\n      token?: string;\n    };\n  };\n  data: Record<string, unknown>;\n  join: jest.Mock;\n  leave: jest.Mock;\n  emit: jest.Mock;\n  to: jest.Mock;\n  disconnect: jest.Mock;\n}\n\n/**\n * Create a test application with the given providers and imports\n */\nexport async function createTestingModule({\n  providers = [],\n  imports = [],\n  controllers = [],\n}: {\n  providers?: any[];\n  imports?: any[];\n  controllers?: any[];\n} = {}) {\n  const moduleFixture: TestingModule = await Test.createTestingModule({\n    imports: [\n      ConfigModule.forRoot({\n        isGlobal: true,\n        envFilePath: '.env.test',\n      }),\n      ...imports,\n    ],\n    controllers,\n    providers: [\n      ...providers,\n      {\n        provide: JwtService,\n        useValue: mockJwtService,\n      },\n      {\n        provide: ConfigService,\n        useValue: mockConfigService,\n      },\n      {\n        provide: PrismaService,\n        useValue: mockPrismaService,\n      },\n    ],\n  })\n    .setLogger(new NestLogger())\n    .compile();\n\n  const app = moduleFixture.createNestApplication();\n  \n  // Apply global pipes, filters, guards, etc. if needed\n  // app.useGlobalPipes(new ValidationPipe());\n  \n  await app.init();\n  \n  return { \n    app, \n    module: moduleFixture,\n    mocks: {\n      jwtService: mockJwtService,\n      configService: mockConfigService,\n      prismaService: mockPrismaService,\n    },\n  };\n}\n\n/**\n * Create a mock WebSocket client\n */\nexport function createMockSocket(token?: string, user: unknown = { id: 'test-user-id' }): MockSocket {\n  return {\n    id: 'test-socket-id',\n    handshake: {\n      auth: {\n        token: token || 'mock-jwt-token',\n      },\n    },\n    data: { user },\n    join: jest.fn().mockReturnThis(),\n    leave: jest.fn().mockReturnThis(),\n    emit: jest.fn().mockReturnThis(),\n    to: jest.fn().mockReturnThis(),\n    disconnect: jest.fn().mockReturnThis(),\n  } as any;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/test.setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'INestApplication' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ConfigModule' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TestingModule' is defined but never used.","line":3,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaClient' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PrismaService' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AwsS3Service' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prisma' is defined but never used.","line":9,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":14}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { PrismaClient } from '@prisma/client';\nimport { PrismaService } from '../src/prisma/prisma.service';\nimport { AwsS3Service } from '../src/modules/files/aws-s3.service';\n\n// Import our mock Prisma client\nimport prisma from './__mocks__/@prisma/client';\n\n// Define the shape of our mock Prisma service\ninterface MockPrismaService {\n  $connect: jest.Mock<Promise<void>>;\n  $disconnect: jest.Mock<Promise<void>>;\n  $on: jest.Mock;\n  $transaction: <T>(fn: (prisma: MockPrismaService) => Promise<T>) => Promise<T>;\n  user: {\n    findUnique: jest.Mock;\n    findFirst: jest.Mock;\n    findMany: jest.Mock;\n    create: jest.Mock;\n    update: jest.Mock;\n    delete: jest.Mock;\n    upsert: jest.Mock;\n    count: jest.Mock;\n  };\n  // Add other models as needed\n}\n\n// Create a mock Prisma service with all required methods\nconst mockPrismaService: MockPrismaService = {\n  $connect: jest.fn().mockResolvedValue(undefined),\n  $disconnect: jest.fn().mockResolvedValue(undefined),\n  $on: jest.fn(),\n  $transaction: jest.fn((fn) => fn(mockPrismaService)),\n  user: {\n    findUnique: jest.fn(),\n    findFirst: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    upsert: jest.fn(),\n    count: jest.fn(),\n  },\n  // Add other models as needed\n};\n\nexport { mockPrismaService };\n\n// Mock ConfigService\ninterface MockConfigService {\n  get: jest.Mock;\n}\n\nexport const mockConfigService: MockConfigService = {\n  get: jest.fn((key: string) => {\n    const config: Record<string, string> = {\n      JWT_SECRET: 'test-secret',\n      JWT_EXPIRES_IN: '3600s',\n      REFRESH_TOKEN_EXPIRES_IN: '7d',\n      NODE_ENV: 'test',\n      AWS_REGION: 'us-east-1',\n      AWS_ACCESS_KEY_ID: 'test-access-key-id',\n      AWS_SECRET_ACCESS_KEY: 'test-secret-access-key',\n      S3_BUCKET_NAME: 'test-bucket',\n      DATABASE_URL: 'postgresql://test:test@localhost:5432/test',\n    };\n    return config[key];\n  }),\n};\n\n// Mock AwsS3Service\ninterface MockAwsS3Service {\n  uploadFile: jest.Mock;\n  deleteFile: jest.Mock;\n  getFileUrl: jest.Mock;\n  getPresignedUrl: jest.Mock;\n  getPresignedPair: jest.Mock;\n}\n\nexport const mockAwsS3Service: MockAwsS3Service = {\n  uploadFile: jest.fn().mockResolvedValue({\n    Location: 'https://s3.amazonaws.com/test-bucket/test-file.txt'\n  }),\n  deleteFile: jest.fn().mockResolvedValue({}),\n  getFileUrl: jest.fn().mockReturnValue('https://s3.amazonaws.com/test-bucket/test-file.txt'),\n  getPresignedUrl: jest.fn().mockResolvedValue('https://s3.amazonaws.com/test-bucket/test-file.txt'),\n  getPresignedPair: jest.fn().mockResolvedValue({\n    putUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n    getUrl: 'https://s3.amazonaws.com/test-bucket/test-file.txt',\n  }),\n};\n\n// Global test setup\nbeforeAll(async () => {\n  // Mock the PrismaService\n  jest.mock('../src/prisma/prisma.service', () => ({\n    PrismaService: jest.fn().mockImplementation(() => ({\n      ...mockPrismaService,\n      $on: jest.fn(),\n      $connect: jest.fn().mockResolvedValue(undefined),\n      $disconnect: jest.fn().mockResolvedValue(undefined),\n    })),\n  }));\n\n  // Mock the AwsS3Service\n  jest.mock('../src/modules/files/aws-s3.service', () => ({\n    AwsS3Service: jest.fn().mockImplementation(() => mockAwsS3Service),\n  }));\n\n  // Mock ConfigModule\n  jest.mock('@nestjs/config', () => ({\n    ConfigModule: {\n      forRoot: jest.fn(),\n    },\n  }));\n});\n\n// Clean up after each test\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\nafterAll(async () => {\n  await mockPrismaService.$disconnect();\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/test.utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/test.websocket.setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/unit/__mocks__/express.mock.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EventEmitter' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'middleware' is defined but never used.","line":99,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":57}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { EventEmitter } from 'events';\n\n// Mock Request interface\ninterface MockRequest {\n  body: unknown;\n  params: unknown;\n  query: unknown;\n  headers: unknown;\n  method: string;\n  url: string;\n  originalUrl: string;\n  path: string;\n  cookies: unknown;\n  session: unknown;\n  user: unknown;\n  [key: string]: unknown;\n}\n\n// Mock Response interface\ninterface MockResponse {\n  status: (code: number) => MockResponse;\n  json: (data: unknown) => MockResponse;\n  send: (data: unknown) => MockResponse;\n  end: () => MockResponse;\n  set: (key: string, value: string) => MockResponse;\n  header: (key: string, value: string) => MockResponse;\n  redirect: (url: string) => MockResponse;\n  render: (view: string, data?: unknown) => MockResponse;\n  locals: unknown;\n  [key: string]: unknown;\n}\n\n// Mock Next function\ntype MockNext = (error?: unknown) => void;\n\n// Create mock request\nconst createMockRequest = (overrides: Partial<MockRequest> = {}): MockRequest => {\n  return {\n    body: {},\n    params: {},\n    query: {},\n    headers: {},\n    method: 'GET',\n    url: '/',\n    originalUrl: '/',\n    path: '/',\n    cookies: {},\n    session: {},\n    user: null,\n    ...overrides,\n  };\n};\n\n// Create mock response\nconst createMockResponse = (): MockResponse => {\n  const res = {\n    statusCode: 200,\n    locals: {},\n    headers: {},\n  } as unknown as MockResponse;\n\n  // Chainable methods\n  res.status = jest.fn().mockReturnValue(res);\n  res.json = jest.fn().mockReturnValue(res);\n  res.send = jest.fn().mockReturnValue(res);\n  res.end = jest.fn().mockReturnValue(res);\n  res.set = jest.fn().mockReturnValue(res);\n  res.header = jest.fn().mockReturnValue(res);\n  res.redirect = jest.fn().mockReturnValue(res);\n  res.render = jest.fn().mockReturnValue(res);\n\n  return res;\n};\n\n// Create mock next function\nconst createMockNext = (): MockNext => jest.fn();\n\n// Mock Router\nconst Router = jest.fn().mockReturnValue({\n  get: jest.fn(),\n  post: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn(),\n  patch: jest.fn(),\n  use: jest.fn(),\n  param: jest.fn(),\n  route: jest.fn(),\n  stack: [],\n});\n\n// Mock middleware functions\nconst json = jest.fn().mockReturnValue((req: unknown, res: unknown, next: unknown) => next());\nconst urlencoded = jest.fn().mockReturnValue((req: unknown, res: unknown, next: unknown) => next());\nconst staticMiddleware = jest.fn().mockReturnValue((req: unknown, res: unknown, next: unknown) => next());\nconst cors = jest.fn().mockReturnValue((req: unknown, res: unknown, next: unknown) => next());\n\n// Mock express function\nconst express = jest.fn().mockReturnValue({\n  use: jest.fn().mockImplementation(function (middleware) {\n    // Accept helmet(), rateLimiter, or any middleware and return 'this' for chaining\n    return this;\n  }),\n  get: jest.fn(),\n  post: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn(),\n  patch: jest.fn(),\n  listen: jest.fn(),\n  set: jest.fn(),\n  engine: jest.fn(),\n  Router,\n  json,\n  urlencoded,\n  cors,\n});\n\n// Export as default and named exports\nexport default express;\nexport { Router, json, urlencoded, cors };\nexport { staticMiddleware as static };\nexport { createMockRequest, createMockResponse, createMockNext };\nexport type { MockRequest, MockResponse, MockNext }; ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/auth-test-setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[732,735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[732,735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[775,778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[775,778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[818,821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[818,821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[871,874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[871,874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PrismaClient } from '@prisma/client';\nimport { AuthModule } from '../../src/modules/auth/auth.module';\n\ntype User = {\n  id: string;\n  email: string;\n  name: string | null;\n  password: string;\n  isApproved: boolean;\n  refreshToken: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport const buildAuthTestModuleImports = () => [\n  ConfigModule.forRoot({ isGlobal: true, envFilePath: ['.env', '../.env'] }),\n  JwtModule.register({ secret: 'test-secret', signOptions: { expiresIn: '15m' } }),\n  AuthModule,\n];\n\ntype PrismaClientWithUser = Omit<PrismaClient, 'user'> & {\n  user: {\n    findUnique: jest.Mock<Promise<User | null>, any>;\n    update: jest.Mock<Promise<User>, any>;\n    create: jest.Mock<Promise<User>, any>;\n    findFirst: jest.Mock<Promise<User | null>, any>;\n  };\n};\n\nexport const prismaMock: PrismaClientWithUser = {\n  user: {\n    findUnique: jest.fn(),\n    update: jest.fn(),\n    create: jest.fn(),\n    findFirst: jest.fn(),\n  },\n} as unknown as PrismaClientWithUser;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/create-testing-module.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/gateway.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/make-io-server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[533,536],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[533,536],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport { Server as WsServer } from 'ws';\n\nexport function makeIoServer() {\n  const http = createServer();\n  \n  // Create Socket.IO server\n  const io = new Server(http, {\n    cors: { \n      origin: '*', \n      methods: ['GET', 'POST'] \n    }\n  });\n  \n  // Create WebSocket server\n  const wss = new WsServer({\n    server: http,\n    path: '/socket.io/'\n  });\n  \n  // Start listening on a random port\n  http.listen();\n  \n  // Store references for cleanup\n  (io as any).httpServer = http;\n  (io as any).wsServer = wss;\n  \n  return { io, http };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/mock-io.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/presence-mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/prisma-mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/test-auth-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/test-io-adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'port' is defined but never used.","line":6,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'opts' is defined but never used.","line":6,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Server } from 'socket.io';\n\nexport class TestIoAdapter extends IoAdapter {\n  constructor(app, private ioServer: Server) { super(app); }\n  createIOServer(port: number, opts?: unknown) {\n    return this.ioServer;\n  }\n} ","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/utils/websocket-test.utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2145,2148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2145,2148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport { WsTestContext } from '../websocket-test.setup';\n\nexport interface TestSocketClient extends Socket {\n  testId: string;\n  userId?: string;\n  projectId?: string;\n}\n\nexport interface TestSocketOptions {\n  auth?: {\n    token?: string;\n    userId?: string;\n  };\n  query?: Record<string, string>;\n  autoConnect?: boolean;\n}\n\n/**\n * Creates a test WebSocket client\n */\nexport function createTestSocket(\n  context: WsTestContext,\n  options: TestSocketOptions = {}\n): TestSocketClient {\n  const { auth = {}, query = {}, autoConnect = true } = options;\n  \n  // Build query string with auth if provided\n  const queryParams = new URLSearchParams(query);\n  if (auth.token) {\n    queryParams.set('token', auth.token);\n  }\n  if (auth.userId) {\n    queryParams.set('userId', auth.userId);\n  }\n\n  // Create socket client\n  const client = io(context.serverUrl, {\n    path: '/ws',\n    transports: ['websocket'],\n    autoConnect,\n    forceNew: true,\n    reconnection: false,\n    query: Object.fromEntries(queryParams),\n  }) as TestSocketClient;\n\n  // Add test ID for debugging\n  client.testId = `test-${Math.random().toString(36).substring(2, 8)}`;\n  \n  // Add user ID if provided\n  if (auth.userId) {\n    client.userId = auth.userId;\n  }\n\n  return client;\n}\n\n/**\n * Waits for a socket connection to be established\n */\nexport function waitForConnection(client: Socket): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (client.connected) {\n      return resolve();\n    }\n\n    const timeout = setTimeout(() => {\n      client.off('connect', onConnect);\n      client.off('connect_error', onError);\n      reject(new Error('Connection timeout'));\n    }, 5000);\n\n    const onConnect = () => {\n      clearTimeout(timeout);\n      client.off('connect_error', onError);\n      resolve();\n    };\n\n    const onError = (err: Error) => {\n      clearTimeout(timeout);\n      client.off('connect', onConnect);\n      reject(err);\n    };\n\n    client.once('connect', onConnect);\n    client.once('connect_error', onError);\n  });\n}\n\n/**\n * Waits for a specific event on a socket\n */\nexport function waitForEvent<T = any>(\n  client: Socket,\n  event: string\n): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      client.off(event, onEvent);\n      reject(new Error(`Timeout waiting for event: ${event}`));\n    }, 5000);\n\n    const onEvent = (data: T) => {\n      clearTimeout(timeout);\n      resolve(data);\n    };\n\n    client.once(event, onEvent);\n  });\n}\n\n/**\n * Disconnects all test clients\n */\nexport async function disconnectAllClients(...clients: Socket[]): Promise<void> {\n  await Promise.all(\n    clients.map(\n      (client) =>\n        new Promise<void>((resolve) => {\n          if (client.connected) {\n            client.once('disconnect', () => resolve());\n            client.disconnect();\n          } else {\n            resolve();\n          }\n        })\n    )\n  );\n}\n\n/**\n * Creates multiple test clients\n */\nexport function createTestClients(\n  context: WsTestContext,\n  count: number,\n  options: TestSocketOptions = {}\n): TestSocketClient[] {\n  return Array.from({ length: count }, (_, i) =>\n    createTestSocket(context, {\n      ...options,\n      auth: {\n        ...options.auth,\n        userId: options.auth?.userId || `test-user-${i + 1}`,\n      },\n    })\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1827,1830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1827,1830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\nimport { createServer, Server as HttpServer } from 'http';\n\ndescribe('WebSocket Integration Tests', () => {\n  let httpServer: HttpServer;\n  let wss: WebSocketServer;\n  let port: number;\n  let clients: WebSocket[] = [];\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create WebSocket server\n    wss = new WebSocketServer({ server: httpServer });\n    \n    // Handle WebSocket connections\n    wss.on('connection', (ws: WebSocket) => {\n      const clientId = Math.random().toString(36).substring(2, 9);\n      (ws as unknown as { id: string }).id = clientId;\n      \n      // Store the WebSocket connection\n      clients.push(ws);\n      \n      // Handle incoming messages\n      ws.on('message', (data: unknown) => {\n        try {\n          const message = (data as Buffer).toString();\n          \n          // Echo the message back to the client\n          ws.send(JSON.stringify({ \n            type: 'echo', \n            data: message,\n            clientId,\n            timestamp: new Date().toISOString()\n          }));\n        } catch (err) {\n          console.error(`[${clientId}] Error handling message:`, err);\n        }\n      });\n      \n      // Handle close events\n      ws.on('close', () => {\n        clients = clients.filter(c => c !== ws);\n      });\n      \n      // Handle errors\n      ws.on('error', (error: Error) => {\n        console.error(`[${clientId}] WebSocket error:`, error);\n        clients = clients.filter(c => c !== ws);\n      });\n      \n      // Send welcome message\n      ws.send(JSON.stringify({\n        type: 'connected',\n        clientId,\n        timestamp: new Date().toISOString()\n      }));\n    });\n    \n    // Start server\n    httpServer.listen(0, () => {\n      port = (httpServer.address() as any).port;\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    // Close all client connections\n    clients.forEach(client => {\n      try {\n        client.close(1000, 'Test complete');\n      } catch (err) {\n        console.error('Error closing client:', err);\n      }\n    });\n    \n    // Close WebSocket server\n    wss.close(() => {\n      // Close HTTP server\n      httpServer.close(() => {\n        clients = [];\n        console.log('Test teardown complete');\n        done();\n      });\n    });\n  });\n\n  it('should handle basic WebSocket communication', (done) => {\n    const ws = new WebSocket(`ws://localhost:${port}`);\n    \n    ws.on('open', () => {\n      ws.send(JSON.stringify({ type: 'test', message: 'Hello' }));\n    });\n    \n    ws.on('message', (data: unknown) => {\n      const message = JSON.parse((data as Buffer).toString());\n      expect(message.type).toBe('echo');\n      expect(message.data).toContain('Hello');\n      ws.close();\n      done();\n    });\n    \n    ws.on('error', (error: Error) => {\n      console.error('WebSocket error:', error);\n      done(error);\n    });\n  });\n\n  it('should handle multiple clients', (done) => {\n    const ws1 = new WebSocket(`ws://localhost:${port}`);\n    const ws2 = new WebSocket(`ws://localhost:${port}`);\n    let messagesReceived = 0;\n    \n    const checkComplete = () => {\n      messagesReceived++;\n      if (messagesReceived >= 2) {\n        ws1.close();\n        ws2.close();\n        done();\n      }\n    };\n    \n    ws1.on('open', () => {\n      ws1.send(JSON.stringify({ type: 'test', message: 'Client 1' }));\n    });\n    \n    ws2.on('open', () => {\n      ws2.send(JSON.stringify({ type: 'test', message: 'Client 2' }));\n    });\n    \n    ws1.on('message', (data: unknown) => {\n      const message = JSON.parse((data as Buffer).toString());\n      expect(message.type).toBe('echo');\n      checkComplete();\n    });\n    \n    ws2.on('message', (data: unknown) => {\n      const message = JSON.parse((data as Buffer).toString());\n      expect(message.type).toBe('echo');\n      checkComplete();\n    });\n    \n    ws1.on('error', (error: Error) => {\n      console.error('Client 1 error:', error);\n      done(error);\n    });\n    \n    ws2.on('error', (error: Error) => {\n      console.error('Client 2 error:', error);\n      done(error);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/chat.gateway.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/check-heartbeat.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'server' is defined but never used.","line":21,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2577,2580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2577,2580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2907,2910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2907,2910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3920,3923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3920,3923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4398,4401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4398,4401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4469,4472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4469,4472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simple script to verify WebSocket heartbeat functionality\nconsole.log('=== Testing WebSocket Heartbeat Functionality ===\\n');\n\n// Mock dependencies\nclass MockPresenceService {\n  updateUserPresence(userId: string) {\n    console.log(`[MockPresenceService] updateUserPresence(${userId})`);\n  }\n  \n  removeUserPresence(userId: string) {\n    console.log(`[MockPresenceService] removeUserPresence(${userId})`);\n  }\n  \n  isOnline(userId: string) {\n    console.log(`[MockPresenceService] isOnline(${userId})`);\n    return true;\n  }\n}\n\nclass MockRtcGateway {\n  registerWsServer(server: unknown) {\n    console.log('[MockRtcGateway] registerWsServer');\n  }\n}\n\n// Import the ChatGateway after mocking dependencies\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\n\n// Create test instance\nconst gateway = new ChatGateway(\n  new MockPresenceService() as unknown,\n  new MockRtcGateway() as unknown\n);\n\n// Mock WebSocket server and socket\nconst mockSocket = {\n  id: 'test-socket-1',\n  connected: true,\n  data: {\n    user: {\n      userId: 'test-user-1',\n      email: 'test@example.com',\n      name: 'Test User',\n    },\n  },\n  emit: (event: string, data: unknown) => {\n    console.log(`[Socket] Emitted '${event}':`, data);\n    \n    // Simulate pong response for ping events\n    if (event === 'ping') {\n      console.log('  [Socket] Simulating pong response...');\n      // The actual pong handler would be called here in a real scenario\n      // We'll simulate this by directly calling the pong handler\n      if (mockSocket['pongHandler']) {\n        mockSocket['pongHandler'](data);\n      }\n    }\n  },\n  join: () => console.log('[Socket] join()'),\n  leave: () => console.log('[Socket] leave()'),\n  disconnect: () => {\n    console.log('[Socket] disconnect()');\n    mockSocket.connected = false;\n  },\n  on: (event: string, handler: unknown) => {\n    console.log(`[Socket] Registered handler for '${event}'`);\n    mockSocket[`${event}Handler`] = handler;\n  },\n  once: (event: string, handler: unknown) => {\n    console.log(`[Socket] Registered one-time handler for '${event}'`);\n    mockSocket[`${event}OnceHandler`] = handler;\n  },\n} as unknown;\n\n// Mock server with sockets\nconst mockServer = {\n  emit: (event: string, data: unknown) => {\n    console.log(`[Server] Emitted '${event}':`, data);\n  },\n  to: () => ({\n    emit: (event: string, data: unknown) => {\n      console.log(`[Server] Emitted '${event}' to room:`, data);\n    }\n  }),\n  sockets: {\n    sockets: new Map([\n      [mockSocket.id, mockSocket]\n    ])\n  }\n};\n\n// Assign mock server to gateway\n(gateway as unknown as any).server = mockServer;\n\n// Test the heartbeat functionality\nasync function testHeartbeat() {\n  console.log('\\n=== Test 1: Initial Connection ===');\n  gateway.handleConnection(mockSocket);\n  \n  console.log('\\n=== Test 2: Simulate Ping ===');\n  // Manually trigger the ping interval\n  const pingInterval = (gateway as unknown as any).pingInterval;\n  \n  if (!pingInterval) {\n    console.log('No ping interval found, creating a manual test...');\n    \n    // Manually set up the ping interval for testing\n    const mockTimestamp = 1000;\n    const originalDateNow = Date.now;\n    Date.now = () => mockTimestamp;\n    \n    console.log('\\n=== Test 3: Manual Ping Test ===');\n    console.log('Sending ping to client...');\n    \n    // Manually call the ping logic that would be in the interval\n    const now = Date.now();\n    console.log(`[Server] Sending ping at ${now}`);\n    \n    // The socket.emit('ping') should trigger our mock emit which simulates a pong\n    mockSocket.emit('ping', { timestamp: now });\n    \n    // Verify the client received the ping and sent a pong\n    console.log('\\n=== Test 4: Verify Pong Handling ===');\n    console.log('Checking if pong was handled...');\n    \n    // The pong handler should have been called by our mock socket.emit\n    // and reset the missedPongs counter\n    const missedPongs = (gateway as unknown as any).missedPongs.get(mockSocket.id);\n    console.log(`Missed pongs count: ${missedPongs} (should be 0 after pong)`);\n    \n    // Test disconnection after missed pongs\n    console.log('\\n=== Test 5: Test Missed Pongs ===');\n    console.log('Simulating missed pongs...');\n    \n    // Simulate missing pongs by directly incrementing the counter\n    const MAX_MISSED_PONGS = 2;\n    for (let i = 0; i < MAX_MISSED_PONGS + 1; i++) {\n      const currentMissed = (gateway as unknown as any).missedPongs.get(mockSocket.id) || 0;\n      (gateway as unknown as any).missedPongs.set(mockSocket.id, currentMissed + 1);\n      console.log(`Set missed pongs to ${currentMissed + 1}`);\n    }\n    \n    // The next ping should trigger a disconnection\n    console.log('\\n=== Test 6: Trigger Disconnection ===');\n    console.log('Sending ping that should trigger disconnection...');\n    mockSocket.emit('ping', { timestamp: Date.now() });\n    \n    // Restore Date.now\n    Date.now = originalDateNow;\n  }\n  \n  console.log('\\n=== Test 5: Simulate Disconnection ===');\n  gateway.handleDisconnect(mockSocket);\n  \n  console.log('\\n=== Test Complete ===');\n}\n\ntestHeartbeat().catch(console.error);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/standalone-ws-server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Socket' is defined but never used.","line":1,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Server, type Socket } from 'socket.io';\nimport { createServer } from 'http';\nimport type { Server as HttpServer, AddressInfo } from 'net';\n\ninterface ShutdownMessage {\n  type: 'shutdown';\n}\n\nconst httpServer: HttpServer = createServer();\nconst io = new Server(httpServer, {\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST'],\n  },\n});\n\n// Simple echo handler\nio.on('connection', (socket) => {\n  console.log('Test client connected');\n  \n  socket.on('echo', (data, callback) => {\n    if (typeof callback === 'function') {\n      callback({ ...data, timestamp: Date.now() });\n    }\n  });\n  \n  socket.on('disconnect', () => {\n    console.log('Test client disconnected');\n  });\n});\n\n// Start server on random port\nhttpServer.listen(0, () => {\n  const address = httpServer.address() as AddressInfo;\n  if (!address || !address.port) {\n    console.error('Failed to get server address or port');\n    process.exit(1);\n  }\n  \n  const port = address.port;\n  console.log(`Test WebSocket server running on port ${port}`);\n  \n  // For testing purposes, log the port\n  if (process.send) {\n    process.send({ port });\n  }\n});\n\n// Handle graceful shutdown\nconst shutdown = () => {\n  console.log('Shutting down test WebSocket server');\n  \n  // Close all WebSocket connections\n  io.sockets.sockets.forEach(socket => {\n    socket.disconnect(true);\n  });\n  \n  // Close the server\n  io.close(() => {\n    httpServer.close(() => {\n      console.log('Test WebSocket server stopped');\n      process.exit(0);\n    });\n  });\n};\n\n// Handle process termination signals\nprocess.on('SIGINT', shutdown);\nprocess.on('SIGTERM', shutdown);\n\n// Handle parent process messages for graceful shutdown\nprocess.on('message', (message: unknown) => {\n  if (typeof message === 'object' && message !== null && 'type' in message) {\n    const msg = message as ShutdownMessage;\n    if (msg.type === 'shutdown') {\n      shutdown();\n    }\n  }\n});\n\n// Handle uncaught exceptions\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err);\n  shutdown();\n});\n\nprocess.on('unhandledRejection', (reason) => {\n  console.error('Unhandled rejection:', reason);\n  shutdown();\n});\n\nexport { io, httpServer };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/standalone-ws.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Server' is defined but never used.","line":2,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddressInfo' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reason' is defined but never used.","line":246,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":35}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, type Socket } from 'socket.io-client';\nimport type { Server } from 'socket.io';\nimport { fork, type ChildProcess } from 'child_process';\nimport { join } from 'path';\nimport { AddressInfo } from 'net';\n\ninterface ServerMessage {\n  port: number;\n}\n\ndescribe('Standalone WebSocket Server', () => {\n  let serverProcess: ChildProcess | null = null;\n  let port: number;\n  const TEST_TIMEOUT = 5000;\n\n  beforeAll((done) => {\n    try {\n      // Start the standalone WebSocket server as a child process\n      serverProcess = fork(join(__dirname, 'standalone-ws-server.ts'), [], {\n        stdio: ['ignore', 'pipe', 'pipe', 'ipc'],\n        execArgv: ['-r', 'ts-node/register/transpile-only']\n      });\n\n      if (!serverProcess) {\n        throw new Error('Failed to start WebSocket server process');\n      }\n\n      // Get the port from the child process\n      serverProcess.on('message', (message: unknown) => {\n        try {\n          const { port: serverPort } = message as ServerMessage;\n          console.log(`WebSocket server started on port ${serverPort}`);\n          port = serverPort;\n          done();\n        } catch (err) {\n          const error = err instanceof Error ? err : new Error(String(err));\n          console.error('Failed to parse server message:', error);\n          done(error);\n        }\n      });\n\n      // Log server output\n      serverProcess.stdout?.on('data', (data: Buffer) => {\n        console.log(`[Test Server] ${data.toString().trim()}`);\n      });\n      \n      serverProcess.stderr?.on('data', (data: Buffer) => {\n        console.error(`[Test Server Error] ${data.toString().trim()}`);\n      });\n\n      // Handle process errors\n      serverProcess.on('error', (err) => {\n        console.error('WebSocket server process error:', err);\n        done(err);\n      });\n\n      // Handle unexpected exit\n      serverProcess.on('exit', (code) => {\n        if (code !== 0) {\n          const error = new Error(`Test server process exited with code ${code}`);\n          console.error(error.message);\n          if (code === null) {\n            done(new Error('Test server process failed to start'));\n          }\n        }\n      });\n\n      // Set a timeout for server startup\n      const startupTimeout = setTimeout(() => {\n        console.error('WebSocket server startup timed out');\n        done(new Error('Server startup timed out'));\n      }, 10000);\n\n      // Clean up timeout on success\n      serverProcess.once('message', () => {\n        clearTimeout(startupTimeout);\n      });\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error(String(err));\n      console.error('Failed to start WebSocket server:', error);\n      done(error);\n    }\n  }, 15000); // Increased timeout for server startup\n\n  afterAll((done) => {\n    if (!serverProcess) {\n      return done();\n    }\n\n    const cleanup = () => {\n      if (serverProcess) {\n        serverProcess.removeAllListeners();\n        serverProcess.kill();\n        serverProcess = null;\n      }\n      done();\n    };\n\n    // Set a timeout to force cleanup if server doesn't shut down gracefully\n    const cleanupTimeout = setTimeout(() => {\n      console.warn('Forcing WebSocket server cleanup');\n      cleanup();\n    }, 5000);\n\n    // Try to shut down gracefully\n    if (serverProcess.connected) {\n      serverProcess.once('close', () => {\n        clearTimeout(cleanupTimeout);\n        cleanup();\n      });\n      serverProcess.send({ type: 'shutdown' });\n      \n      // Force kill after a short delay if not already done\n      setTimeout(() => {\n        if (serverProcess) {\n          serverProcess.kill('SIGKILL');\n        }\n      }, 3000);\n    } else {\n      cleanup();\n    }\n  });\n\n  it('should connect to the WebSocket server', (done) => {\n    if (!port) {\n      return done(new Error('Server port not available'));\n    }\n    \n    const socket: Socket = io(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      forceNew: true,\n      timeout: 5000\n    });\n\n    // Set up event handlers\n    const onConnect = () => {\n      try {\n        expect(socket.connected).toBe(true);\n        socket.off('connect', onConnect);\n        socket.off('connect_error', onError);\n        socket.disconnect();\n        done();\n      } catch (err) {\n        socket.disconnect();\n        done(err as Error);\n      }\n    };\n\n    const onError = (err: Error) => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      done(err);\n    };\n\n    socket.on('connect', onConnect);\n    socket.on('connect_error', onError);\n\n    // Set a timeout in case the socket doesn't connect\n    const timeout = setTimeout(() => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      done(new Error('Connection timeout'));\n    }, TEST_TIMEOUT);\n\n    // Clean up the timeout if the test completes\n    socket.once('disconnect', () => {\n      clearTimeout(timeout);\n    });\n  }, TEST_TIMEOUT * 2);\n\n  it('should echo messages', (done) => {\n    if (!port) {\n      return done(new Error('Server port not available'));\n    }\n    \n    const socket: Socket = io(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      forceNew: true,\n      timeout: 5000\n    });\n\n    const onConnect = () => {\n      const testMessage = { test: 'data' };\n      \n      const responseHandler = (response: unknown) => {\n        try {\n          expect(response).toHaveProperty('test', 'data');\n          expect(response).toHaveProperty('timestamp');\n          expect(typeof response.timestamp).toBe('number');\n          \n          // Clean up\n          socket.off('connect', onConnect);\n          socket.off('connect_error', onError);\n          socket.disconnect();\n          clearTimeout(timeout);\n          done();\n        } catch (err) {\n          socket.disconnect();\n          done(err as Error);\n        }\n      };\n\n      // Send the echo request\n      socket.emit('echo', testMessage, responseHandler);\n    };\n\n    const onError = (err: Error) => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      clearTimeout(timeout);\n      done(err);\n    };\n\n    socket.on('connect', onConnect);\n    socket.on('connect_error', onError);\n\n    // Set a timeout for the test\n    const timeout = setTimeout(() => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      done(new Error('Test timeout'));\n    }, TEST_TIMEOUT);\n  }, TEST_TIMEOUT * 2);\n\n  it('should handle disconnection', (done) => {\n    if (!port) {\n      return done(new Error('Server port not available'));\n    }\n    \n    const socket: Socket = io(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      forceNew: true,\n      timeout: 5000\n    });\n\n    const onConnect = () => {\n      expect(socket.connected).toBe(true);\n      \n      const onDisconnect = (reason: string) => {\n        try {\n          expect(socket.connected).toBe(false);\n          \n          // Clean up\n          socket.off('connect', onConnect);\n          socket.off('connect_error', onError);\n          socket.off('disconnect', onDisconnect);\n          clearTimeout(timeout);\n          done();\n        } catch (err) {\n          done(err as Error);\n        }\n      };\n      \n      socket.on('disconnect', onDisconnect);\n      \n      // Initiate disconnection\n      socket.disconnect();\n    };\n\n    const onError = (err: Error) => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      clearTimeout(timeout);\n      done(err);\n    };\n\n    socket.on('connect', onConnect);\n    socket.on('connect_error', onError);\n\n    // Set a timeout for the test\n    const timeout = setTimeout(() => {\n      socket.off('connect', onConnect);\n      socket.off('connect_error', onError);\n      socket.disconnect();\n      done(new Error('Test timeout'));\n    }, TEST_TIMEOUT);\n  }, TEST_TIMEOUT * 2);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/verify-heartbeat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[481,484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[481,484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[506,509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[506,509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1054,1057],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1054,1057],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1480,1483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1480,1483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1597,1600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1597,1600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2577,2580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2577,2580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2794,2797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2794,2797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simple verification script for WebSocket heartbeat functionality\nconsole.log('Testing WebSocket Heartbeat Functionality');\n\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\n\n// Mock dependencies\nconst mockPresenceService = {\n  updateUserPresence: jest.fn(),\n  removeUserPresence: jest.fn(),\n  isOnline: jest.fn(),\n};\n\nconst mockRtcGateway = {\n  registerWsServer: jest.fn(),\n};\n\n// Create gateway instance\nconst gateway = new ChatGateway(\n  mockPresenceService as any,\n  mockRtcGateway as any,\n);\n\n// Mock WebSocket server and socket\nconst mockSocket = {\n  id: 'test-socket-1',\n  connected: true,\n  data: {\n    user: {\n      userId: 'test-user-1',\n      email: 'test@example.com',\n      name: 'Test User',\n    },\n  },\n  emit: jest.fn(),\n  join: jest.fn(),\n  leave: jest.fn(),\n  disconnect: jest.fn(),\n};\n\n// Mock server with sockets\nconst mockServer = {\n  emit: jest.fn(),\n  to: jest.fn().mockReturnThis(),\n  sockets: {\n    sockets: new Map([\n      [mockSocket.id, mockSocket]\n    ])\n  }\n};\n\n// Assign mock server to gateway\n(gateway as any).server = mockServer;\n\n// Test 1: Verify ping interval setup\nconsole.log('\\n=== Test 1: Verify ping interval setup ===');\nlet pingCallback: () => void = () => {};\n\nconst originalSetInterval = setInterval;\n\n// Override setInterval to capture the ping callback\n(global as any).setInterval = (callback: () => void) => {\n  pingCallback = callback;\n  return 12345; // Mock interval ID\n};\n\n// Initialize the gateway\n(gateway as any).setupPingInterval();\nconsole.log('✅ Ping interval setup complete');\n\n// Restore original setInterval\n(global as any).setInterval = originalSetInterval;\n\n// Test 2: Verify ping is sent to connected clients\nconsole.log('\\n=== Test 2: Verify ping is sent ===');\nconst mockTimestamp = Date.now();\nconst originalDateNow = Date.now;\nDate.now = jest.fn(() => mockTimestamp);\n\n// Trigger the ping callback\npingCallback();\n\n// Verify ping was sent\nif (mockSocket.emit.mock.calls[0]?.[0] === 'ping' && \n    mockSocket.emit.mock.calls[0]?.[1]?.timestamp === mockTimestamp) {\n  console.log('✅ Ping sent with correct timestamp');\n} else {\n  console.error('❌ Ping not sent correctly');\n  console.log('Emit calls:', mockSocket.emit.mock.calls);\n}\n\n// Test 3: Verify pong handling\nconsole.log('\\n=== Test 3: Verify pong handling ===');\n// Get the pong handler from the ping callback\nconst pongHandler = mockSocket.emit.mock.calls[0][1];\n\n// Reset mock\nmockSocket.emit.mockClear();\n\n// Call the pong handler\npongHandler({ timestamp: mockTimestamp });\n\n// Verify missed pongs counter was reset\nif ((gateway as any).missedPongs.get(mockSocket.id) === 0) {\n  console.log('✅ Pong handled correctly, missed pongs counter reset');\n} else {\n  console.error('❌ Pong not handled correctly');\n  console.log('Missed pongs:', (gateway as any).missedPongs);\n}\n\n// Test 4: Verify disconnection after missed pongs\nconsole.log('\\n=== Test 4: Verify disconnection after missed pongs ===');\n// Simulate missed pongs\nconst MAX_MISSED_PONGS = 2;\nfor (let i = 0; i < MAX_MISSED_PONGS + 1; i++) {\n  pingCallback();\n}\n\n// Verify disconnect was called\nif (mockSocket.disconnect.mock.calls.length > 0) {\n  console.log('✅ Client disconnected after missing pongs');\n} else {\n  console.error('❌ Client not disconnected after missing pongs');\n}\n\n// Restore mocks\nDate.now = originalDateNow;\n\nconsole.log('\\n=== Test Complete ===');\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/verify-ws-heartbeat.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[211,214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[211,214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'server' is defined but never used.","line":38,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":38,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[958,961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[958,961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1327,1330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1327,1330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1352,1355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1352,1355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1506,1509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1506,1509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'findInterval' is defined but never used.","line":64,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":22},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":69,"column":42,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":69,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1992,1995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1992,1995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":75,"column":46,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":75,"endColumn":54},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":76,"column":48,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":76,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2131,2134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2131,2134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2155,2158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2155,2158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2184,2187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2184,2187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2344,2347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2344,2347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-rest-params","severity":2,"message":"Use the rest parameters instead of 'arguments'.","line":100,"column":26,"nodeType":"Identifier","messageId":"preferRestParams","endLine":100,"endColumn":35},{"ruleId":"prefer-rest-params","severity":2,"message":"Use the rest parameters instead of 'arguments'.","line":104,"column":27,"nodeType":"Identifier","messageId":"preferRestParams","endLine":104,"endColumn":36},{"ruleId":"prefer-rest-params","severity":2,"message":"Use the rest parameters instead of 'arguments'.","line":109,"column":32,"nodeType":"Identifier","messageId":"preferRestParams","endLine":109,"endColumn":41},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":111,"column":30,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":111,"endColumn":38},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":116,"column":32,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":116,"endColumn":40},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":123,"column":74,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":123,"endColumn":82},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":125,"column":65,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":125,"endColumn":73},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3927,3930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3927,3930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4004,4007],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4004,4007],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4092,4095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4092,4095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4140,4143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4140,4143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4179,4182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4179,4182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4393,4396],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4393,4396],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4946,4949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4946,4949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5230,5233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5230,5233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5245,5248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5245,5248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'assertCalled' is defined but never used.","line":201,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5637,5640],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5637,5640],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":260,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7690,7693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7690,7693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":267,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7992,7995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7992,7995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":268,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8050,8053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8050,8053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":281,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8424,8427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8424,8427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8634,8637],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8634,8637],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9472,9475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9472,9475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":39,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simple verification script for WebSocket heartbeat functionality\nconsole.log('=== Testing WebSocket Heartbeat Functionality ===\\n');\n\n// Mock dependencies\nclass MockPresenceService {\n  calls: {[key: string]: any[]} = {\n    updateUserPresence: [],\n    removeUserPresence: [],\n    isOnline: []\n  };\n\n  updateUserPresence(userId: string) {\n    console.log(`[MockPresenceService] updateUserPresence(${userId})`);\n    this.calls.updateUserPresence.push(userId);\n  }\n  \n  removeUserPresence(userId: string) {\n    console.log(`[MockPresenceService] removeUserPresence(${userId})`);\n    this.calls.removeUserPresence.push(userId);\n  }\n  \n  isOnline(userId: string) {\n    console.log(`[MockPresenceService] isOnline(${userId})`);\n    this.calls.isOnline.push(userId);\n    return true;\n  }\n\n  reset() {\n    this.calls = {\n      updateUserPresence: [],\n      removeUserPresence: [],\n      isOnline: []\n    };\n  }\n}\n\nclass MockRtcGateway {\n  registerWsServer(server: any) {\n    console.log('[MockRtcGateway] registerWsServer');\n  }\n}\n\n// Import the ChatGateway after mocking dependencies\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\n\n// Create test instance\nconst mockPresenceService = new MockPresenceService();\nconst mockRtcGateway = new MockRtcGateway();\n\nconst gateway = new ChatGateway(\n  mockPresenceService as any,\n  mockRtcGateway as any\n);\n\n// Track setInterval calls\nconst intervals: {callback: () => void; ms: number}[] = [];\nconst originalSetInterval = global.setInterval;\n(global as any).setInterval = (callback: () => void, ms: number) => {\n  intervals.push({callback, ms});\n  return originalSetInterval(callback, ms);\n};\n\n// Helper to find an interval by duration\nfunction findInterval(ms: number) {\n  return intervals.find(i => i.ms === ms)?.callback;\n}\n\n// Mock WebSocket server and socket\nconst mockSocketHandlers: Record<string, Function> = {};\nconst mockSocket = {\n  id: 'test-socket-1',\n  connected: true,\n  calls: {\n    emit: [] as Array<{event: string; data: any}>,\n    on: [] as Array<{event: string; handler: Function}>,\n    once: [] as Array<{event: string; handler: Function}>,\n    join: [] as any[],\n    leave: [] as any[],\n    disconnect: [] as any[]\n  },\n  data: {\n    user: {\n      userId: 'test-user-1',\n      email: 'test@example.com',\n      name: 'Test User',\n    },\n  },\n  emit(event: string, data: any) {\n    console.log(`[Socket] Emitted '${event}':`, data);\n    this.calls.emit.push({event, data});\n    \n    // Simulate pong response for ping events\n    if (event === 'ping' && mockSocketHandlers['pong']) {\n      console.log('  [Socket] Simulating pong response...');\n      setTimeout(() => mockSocketHandlers['pong'](data), 10);\n    }\n  },\n  join() {\n    console.log('[Socket] join()');\n    this.calls.join.push(arguments);\n  },\n  leave() {\n    console.log('[Socket] leave()');\n    this.calls.leave.push(arguments);\n  },\n  disconnect() {\n    console.log('[Socket] disconnect()');\n    this.connected = false;\n    this.calls.disconnect.push(arguments);\n  },\n  on(event: string, handler: Function) {\n    console.log(`[Socket] Registered handler for '${event}'`);\n    this.calls.on.push({event, handler});\n    mockSocketHandlers[event] = handler;\n  },\n  once(event: string, handler: Function) {\n    console.log(`[Socket] Registered one-time handler for '${event}'`);\n    this.calls.once.push({event, handler});\n    mockSocketHandlers[`${event}Once`] = handler;\n  },\n  // Helper to get a registered handler\n  getHandler(event: string) {\n    const onHandler = this.calls.on.find((call: {event: string, handler: Function}) => call.event === event)?.handler;\n    if (onHandler) return onHandler;\n    return this.calls.once.find((call: {event: string, handler: Function}) => call.event === event)?.handler;\n  },\n  reset() {\n    this.calls = {\n      emit: [],\n      on: [],\n      once: [],\n      join: [],\n      leave: [],\n      disconnect: []\n    };\n    this.connected = true;\n  }\n} as any;\n\n// Track server events\nconst serverEvents: Array<{event: string; data: any}> = [];\nconst mockServer = {\n  calls: {\n    emit: [] as Array<{event: string; data: any}>,\n    to: [] as Array<{room: string, data: any}>\n  },\n  emit(event: string, data: any) {\n    console.log(`[Server] Emitted '${event}':`, data);\n    serverEvents.push({event, data});\n    this.calls.emit.push({event, data});\n  },\n  to(room: string) {\n    return {\n      emit: (event: string, data: any) => {\n        console.log(`[Server] Emitted '${event}' to room '${room}':`, data);\n        serverEvents.push({event, data});\n        this.calls.to.push({room, data});\n      }\n    };\n  },\n  sockets: {\n    sockets: new Map([\n      [mockSocket.id, mockSocket]\n    ])\n  },\n  // Helper to check if an event was emitted\n  wasEventEmitted(eventName: string) {\n    return serverEvents.some(e => e.event === eventName);\n  },\n  reset() {\n    this.calls = { emit: [], to: [] };\n    serverEvents.length = 0;\n  }\n};\n\n// Assign mock server to gateway\n(gateway as any).server = mockServer;\n\n// Simple assertion helpers\nfunction assert(condition: boolean, message: string) {\n  if (!condition) {\n    console.error(`❌ Assertion failed: ${message}`);\n    process.exit(1);\n  } else {\n    console.log(`✅ ${message}`);\n  }\n}\n\nfunction assertEqual(actual: any, expected: any, message: string) {\n  const actualStr = JSON.stringify(actual);\n  const expectedStr = JSON.stringify(expected);\n  const condition = actualStr === expectedStr;\n  if (!condition) {\n    console.error(`❌ Assertion failed: ${message}\\n  Expected: ${expectedStr}\\n  Actual:   ${actualStr}`);\n    process.exit(1);\n  } else {\n    console.log(`✅ ${message}`);\n  }\n}\n\nfunction assertCalled(method: any, message: string) {\n  const called = Array.isArray(method) ? method.length > 0 : method.calls.length > 0;\n  if (!called) {\n    console.error(`❌ Assertion failed: ${message} was not called`);\n    process.exit(1);\n  } else {\n    console.log(`✅ ${message}`);\n  }\n}\n\n// Test the heartbeat functionality\nasync function testHeartbeat() {\n  console.log('\\n=== Test 1: Initial Connection ===');\n  \n  // Reset all mocks\n  mockPresenceService.reset();\n  mockServer.reset();\n  mockSocket.reset();\n  intervals.length = 0;\n  \n  // Test connection\n  gateway.handleConnection(mockSocket);\n  \n  // Verify presence was updated\n  assert(mockPresenceService.calls.updateUserPresence.length > 0, 'Presence updated on connection');\n  assertEqual(mockPresenceService.calls.updateUserPresence[0], 'test-user-1', 'Update presence called with correct user ID');\n  \n  // Verify socket event handlers were registered\n  const pongHandler = mockSocket.getHandler('pong');\n  const disconnectHandler = mockSocket.getHandler('disconnect');\n  \n  assert(!!pongHandler, 'Pong handler registered');\n  assert(!!disconnectHandler, 'Disconnect handler registered');\n  \n  console.log('\\n=== Test 2: Test Ping/Pong ===');\n  \n  // Manually trigger the ping interval since it's set up in the gateway\n  const pingInterval = () => {\n    const now = Date.now();\n    mockSocket.emit('ping', { timestamp: now });\n  };\n  \n  console.log('Triggering ping...');\n  mockSocket.calls.emit = []; // Clear previous emit calls\n  \n  // Trigger ping\n  pingInterval();\n  \n  // Verify ping was sent\n  assert(mockSocket.calls.emit.length > 0, 'Ping was sent');\n  const pingCall = mockSocket.calls.emit[0];\n  assert(pingCall.event === 'ping', 'Ping event was emitted');\n  assert(pingCall.data && typeof pingCall.data.timestamp === 'number', 'Ping contains timestamp');\n  \n  // Wait for pong response (simulated with setTimeout)\n  console.log('Waiting for pong response...');\n  await new Promise(resolve => setTimeout(resolve, 50));\n  \n  // Verify missed pongs was reset\n  const missedPongsAfterPong = (gateway as any).missedPongs.get(mockSocket.id);\n  assertEqual(missedPongsAfterPong, 0, 'Pong was received and processed');\n  \n  console.log('\\n=== Test 3: Test Missed Pongs ===');\n  \n  // Simulate the checkPongs interval from the gateway\n  const checkPongsInterval = () => {\n    const currentMissed = (gateway as any).missedPongs.get(mockSocket.id) || 0;\n    (gateway as any).missedPongs.set(mockSocket.id, currentMissed + 1);\n    \n    // If we've missed too many pongs, disconnect\n    if (currentMissed + 1 > 2) {\n      mockSocket.disconnect();\n    }\n  };\n  \n  // Simulate missed pongs\n  console.log('Simulating missed pongs...');\n  \n  // First check - should increment missed pongs to 1\n  checkPongsInterval();\n  let missedPongs = (gateway as any).missedPongs.get(mockSocket.id);\n  assertEqual(missedPongs, 1, 'First missed pong registered');\n  \n  // Second check - should increment missed pongs to 2\n  checkPongsInterval();\n  missedPongs = (gateway as any).missedPongs.get(mockSocket.id);\n  assertEqual(missedPongs, 2, 'Second missed pong registered');\n  \n  // Third check - should trigger disconnection\n  console.log('Triggering disconnection...');\n  checkPongsInterval();\n  \n  // Verify disconnection\n  assert(mockSocket.calls.disconnect.length > 0, 'Client was disconnected after missed pongs');\n  \n  console.log('\\n=== Test 4: Cleanup ===');\n  // Test disconnection cleanup\n  \n  // Manually call the disconnect handler that was registered during connection\n  const disconnectHandler2 = mockSocket.getHandler('disconnect');\n  if (disconnectHandler2) {\n    disconnectHandler2();\n  }\n  \n  // Call handleDisconnect directly to ensure cleanup\n  gateway.handleDisconnect(mockSocket);\n  \n  // Verify cleanup\n  // 1. Check that missedPongs was cleaned up\n  const missedPongsCount = (gateway as any).missedPongs.get(mockSocket.id);\n  assert(missedPongsCount === undefined, 'Missed pongs were cleaned up');\n  \n  // 2. Verify offline notification was sent\n  assert(mockServer.wasEventEmitted('userOffline'), 'Offline notification was sent');\n  \n  console.log('✅ Cleanup completed successfully');\n  \n  console.log('\\n✅ All tests passed successfully!');\n}\n\ntestHeartbeat().catch(console.error);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket-test.module.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'server' is defined but never used.","line":30,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Module, OnModuleInit } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { WsJwtGuard } from '../src/modules/auth/guards/ws-jwt.guard';\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { WebSocketGateway, WebSocketServer } from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n\n// Mock services\nconst mockWsJwtGuard = {\n  canActivate: jest.fn().mockImplementation((context) => {\n    const client = context.switchToWs().getClient();\n    client.user = {\n      userId: 'test-user-1',\n      email: 'test@example.com',\n      name: 'Test User'\n    };\n    return true;\n  }),\n};\n\n// Create a test WebSocket server\n@WebSocketGateway()\nclass TestWebSocketGateway {\n  @WebSocketServer()\n  server: Server;\n\n  afterInit(server: Server) {\n    console.log('Test WebSocket server initialized');\n  }\n}\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: '.env.test',\n    }),\n    JwtModule.register({\n      secret: 'test-secret',\n      signOptions: { expiresIn: '1h' },\n    }),\n  ],\n  providers: [\n    TestWebSocketGateway,\n    ChatGateway,\n    RtcGateway,\n    PresenceService,\n    {\n      provide: WsJwtGuard,\n      useValue: mockWsJwtGuard,\n    },\n  ],\n  exports: [JwtModule],\n})\nexport class WebSocketTestModule implements OnModuleInit {\n  constructor(\n    private readonly testGateway: TestWebSocketGateway,\n    private readonly chatGateway: ChatGateway,\n    private readonly rtcGateway: RtcGateway\n  ) {}\n\n  onModuleInit() {\n    // Share the WebSocket server instance between gateways\n    const server = this.testGateway.server;\n    if (server) {\n      this.chatGateway['server'] = server;\n      this.rtcGateway['server'] = server;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket-test.setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1034,1037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1034,1037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, Logger } from '@nestjs/common';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { ExpressAdapter } from '@nestjs/platform-express';\nimport express from 'express';\nimport { createServer, Server as HttpServer } from 'http';\nimport { AppModule } from '../src/app.module';\n\nconst logger = new Logger('WsTestSetup');\n\nexport interface WsTestContext {\n  app: INestApplication;\n  httpServer: HttpServer;\n  module: TestingModule;\n  serverUrl: string;\n}\n\n/**\n * Creates a test application with WebSocket support\n */\nexport async function createWsTestApp(): Promise<WsTestContext> {\n  const expressApp = express();\n  const httpServer = createServer(expressApp);\n\n  // Create testing module with required dependencies\n  const moduleRef = await Test.createTestingModule({\n    imports: [AppModule],\n  }).compile();\n\n  // Create Nest application with Express adapter\n  const app = moduleRef.createNestApplication(\n    new ExpressAdapter(expressApp as any),\n    { logger: ['error', 'warn', 'log'] }\n  ) as INestApplication;\n\n  // Configure WebSocket adapter\n  const ioAdapter = new IoAdapter(httpServer);\n  app.useWebSocketAdapter(ioAdapter);\n  \n  try {\n    // Initialize the application\n    await app.init();\n    \n    // Start the HTTP server on a random port\n    await new Promise<void>((resolve) => {\n      httpServer.listen(0, () => {\n        const address = httpServer.address();\n        if (address && typeof address === 'object') {\n          logger.log(`Test server listening on port ${address.port}`);\n        }\n        resolve();\n      });\n    });\n    \n    // Get the server URL\n    const address = httpServer.address();\n    let port: number;\n    \n    if (address === null) {\n      port = 0;\n    } else if (typeof address === 'string') {\n      port = parseInt(address.split(':').pop() || '0', 10);\n    } else {\n      port = address.port || 0;\n    }\n    \n    return { \n      app, \n      httpServer, \n      module: moduleRef,\n      serverUrl: `http://localhost:${port}`\n    };\n  } catch (error) {\n    logger.error('Failed to create test app', error);\n    await teardownTestApp(app, httpServer);\n    throw error;\n  }\n}\n\n/**\n * Tears down the test application and releases resources\n */\nexport async function teardownTestApp(\n  app: INestApplication | null | undefined, \n  httpServer: HttpServer | null | undefined\n): Promise<void> {\n  try {\n    // Close the HTTP server if it exists\n    if (httpServer) {\n      await new Promise<void>((resolve) => {\n        if (httpServer.listening) {\n          httpServer.close(() => {\n            logger.log('Test HTTP server closed');\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    }\n    \n    // Close the Nest application if it exists\n    if (app) {\n      await app.close();\n      logger.log('Nest application closed');\n    }\n  } catch (error) {\n    logger.error('Error during test teardown', error);\n    throw error;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.basic.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[265,268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[265,268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4604,4607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4604,4607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5543,5546],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5543,5546],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5708,5711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5708,5711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer, Server as HttpServer } from 'http';\nimport { Server } from 'socket.io';\nimport { AddressInfo } from 'net';\nimport { io, Socket } from 'socket.io-client';\n\ndescribe('Basic WebSocket Test', () => {\n  let httpServer: HttpServer;\n  let ioServer: any;\n  let socket: Socket;\n  let port: number;\n\n  beforeAll((done) => {\n    console.log('Setting up test environment...');\n    \n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create Socket.IO server\n    ioServer = new Server(httpServer, {\n      cors: {\n        origin: '*',\n        methods: ['GET', 'POST']\n      },\n      transports: ['websocket', 'polling'],\n      pingInterval: 10000,\n      pingTimeout: 5000\n    });\n    \n    // Handle connections\n    ioServer.on('connection', (socket) => {\n      console.log(`Client connected: ${socket.id}`);\n      \n      socket.on('message', (data) => {\n        console.log(`Received message from ${socket.id}:`, data);\n        socket.emit('message', { echo: data, timestamp: Date.now() });\n      });\n      \n      socket.on('ping', () => {\n        console.log(`Ping from ${socket.id}`);\n        socket.emit('pong', { timestamp: Date.now() });\n      });\n      \n      socket.on('disconnect', () => {\n        console.log(`Client disconnected: ${socket.id}`);\n      });\n    });\n    \n    // Start server\n    httpServer.listen(0, '127.0.0.1', () => {\n      port = (httpServer.address() as AddressInfo).port;\n      console.log(`Test server listening on port ${port}`);\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    console.log('Cleaning up...');\n    \n    // Helper function to close everything\n    const closeAll = () => {\n      if (socket && socket.connected) {\n        console.log('Disconnecting client...');\n        socket.disconnect();\n      }\n      \n      if (ioServer) {\n        console.log('Closing Socket.IO server...');\n        ioServer.close();\n      }\n      \n      if (httpServer) {\n        console.log('Closing HTTP server...');\n        httpServer.close((err) => {\n          if (err) {\n            console.error('Error closing HTTP server:', err);\n          } else {\n            console.log('Test server closed');\n          }\n          done();\n        });\n      } else {\n        done();\n      }\n    };\n    \n    // Start cleanup\n    closeAll();\n  });\n\n  it('should connect and exchange messages', (done) => {\n    const socketUrl = `http://localhost:${port}`;\n    console.log(`\\n=== Starting WebSocket Test ===`);\n    console.log(`1. Connecting to: ${socketUrl}`);\n    \n    // Log environment info\n    console.log('Environment:');\n    console.log(`- Node.js: ${process.version}`);\n    console.log(`- Platform: ${process.platform} ${process.arch}`);\n    console.log(`- NODE_ENV: ${process.env.NODE_ENV || 'not set'}`);\n    \n    // Create client with detailed options\n    const socketOptions = {\n      transports: ['websocket', 'polling'],\n      autoConnect: true,\n      reconnection: false,\n      forceNew: true,\n      upgrade: true,\n      rememberUpgrade: true,\n      timeout: 10000,\n      query: {\n        test: 'true',\n        clientType: 'test-suite',\n        timestamp: Date.now()\n      },\n      extraHeaders: {\n        'x-test-client': 'jest-test'\n      }\n    };\n    \n    console.log('2. Creating socket.io client with options:', JSON.stringify(socketOptions, null, 2));\n    \n    socket = io(socketUrl, socketOptions);\n    \n    // Log all socket events for debugging\n    const events = [\n      'connect', 'connect_error', 'error', 'disconnect', 'reconnect_attempt',\n      'reconnect_error', 'reconnect_failed', 'ping', 'pong', 'message'\n    ];\n    \n    events.forEach(event => {\n      socket.on(event, (...args) => {\n        console.log(`[client:${event}]`, ...args);\n      });\n    });\n    \n    // Test timeout\n    const testTimeout = setTimeout(() => {\n      console.error('❌ Test timeout (10s)');\n      console.log('Socket connected:', socket.connected);\n      console.log('Socket ID:', socket.id);\n      socket.disconnect();\n      done(new Error('Test timeout'));\n    }, 10000);\n    \n    // Connection established\n    socket.on('connect', () => {\n      console.log('✅ Connected to server');\n      console.log(`   - Socket ID: ${socket.id}`);\n      console.log('   - Transport:', socket.io.engine?.transport?.name || 'unknown');\n      \n      // Send test message\n      const testMessage = { \n        message: 'ping',\n        timestamp: Date.now(),\n        testId: 'test-' + Math.random().toString(36).substr(2, 9)\n      };\n      \n      console.log('3. Sending ping:', testMessage);\n      \n      // Listen for response\n      const pongListener = (response: any) => {\n        console.log('4. Received pong:', response);\n        \n        try {\n          expect(response).toHaveProperty('message', 'ping');\n          expect(response).toHaveProperty('testId', testMessage.testId);\n          expect(response).toHaveProperty('serverTime');\n          \n          console.log('✅ Test passed!');\n          socket.off('pong', pongListener);\n          clearTimeout(testTimeout);\n          socket.disconnect();\n          done();\n        } catch (error) {\n          socket.off('pong', pongListener);\n          clearTimeout(testTimeout);\n          socket.disconnect();\n          done(error instanceof Error ? error : new Error(String(error)));\n        }\n      };\n      \n      // Set up pong listener before sending ping\n      socket.on('pong', pongListener);\n      \n      // Send the ping message\n      socket.emit('ping', testMessage);\n    });\n    \n    // Error handling\n    socket.on('connect_error', (error: any) => {\n      console.error('❌ Connection error:', error.message);\n      clearTimeout(testTimeout);\n      done(error);\n    });\n    \n    socket.on('error', (error: any) => {\n      console.error('❌ Socket error:', error.message);\n      clearTimeout(testTimeout);\n      done(error);\n    });\n  }, 10000);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.connection.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddressInfo' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WS_CLOSED' is assigned a value but never used.","line":7,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1357,1360],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1357,1360],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer, Server as HttpServer } from 'http';\nimport WebSocket, { Server as WebSocketServer } from 'ws';\nimport { AddressInfo } from 'net';\n\n// WebSocket constants for readyState\nconst WS_OPEN = 1;\nconst WS_CLOSED = 3;\n\n// Helper function to create a WebSocket client with proper typing\nconst createWebSocketClient = (url: string): Promise<WebSocket> => {\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url);\n    \n    ws.on('open', () => resolve(ws));\n    ws.on('error', reject);\n  });\n};\n\ndescribe('WebSocket Connection', () => {\n  let wss: WebSocketServer;\n  let server: HttpServer;\n  let port: number;\n  const HOST = '127.0.0.1';\n\n  beforeAll((done) => {\n    // Create HTTP server\n    server = createServer();\n    \n    // Create WebSocket server using mock\n    wss = new WebSocketServer({ server, clientTracking: true });\n    \n    // Start server on a random available port\n    server.listen(0, HOST, () => {\n      const address = server.address();\n      if (address && typeof address !== 'string') {\n        port = address.port;\n        console.log(`Test WebSocket server listening on ws://${HOST}:${port}`);\n      }\n      done();\n    });\n\n    // Simple echo server implementation\n    wss.on('connection', (ws: WebSocket) => {\n      console.log('Server: Client connected');\n      \n      ws.on('message', (message: any) => {\n        const msg = message.toString();\n        console.log('Server received:', msg);\n        \n        if (ws.readyState === WS_OPEN) {\n          console.log('Server sending echo:', msg);\n          try {\n            ws.send(msg, (error) => {\n              if (error) {\n                console.error('Server send error:', error);\n              } else {\n                console.log('Server echo sent successfully');\n              }\n            });\n          } catch (error) {\n            console.error('Server send exception:', error);\n          }\n        } else {\n          console.log('Server cannot echo - connection not open. State:', ws.readyState);\n        }\n      });\n      \n      ws.on('pong', () => {\n        console.log('Server: received pong');\n      });\n      \n      ws.on('close', () => {\n        console.log('Server: Client disconnected');\n      });\n      \n      ws.on('error', (error) => {\n        console.error('Server WebSocket error:', error);\n      });\n      \n      // Send a ping to verify the connection\n      if (ws.readyState === WS_OPEN) {\n        console.log('Server: Sending ping to client');\n        ws.ping();\n      }\n    });\n  });\n\n  afterAll((done) => {\n    // Close all WebSocket connections\n    if (wss && wss.clients) {\n      wss.clients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.close();\n        }\n      });\n    }\n    \n    // Close the server\n    if (wss) {\n      wss.close(() => {\n        server.close(() => {\n          done();\n        });\n      });\n    } else {\n      server.close(() => {\n        done();\n      });\n    }\n  });\n\n  test('should establish WebSocket connection', async () => {\n    const ws = await createWebSocketClient(`ws://${HOST}:${port}`);\n    expect(ws.readyState).toBe(WebSocket.OPEN);\n    ws.close();\n  });\n\n  test('should echo messages back to client', async () => {\n    const ws = await createWebSocketClient(`ws://${HOST}:${port}`);\n    const testMessage = 'Hello, WebSocket!';\n    \n    return new Promise<void>((resolve, reject) => {\n      ws.on('message', (data) => {\n        const received = data.toString();\n        expect(received).toBe(testMessage);\n        ws.close();\n        resolve();\n      });\n      \n      ws.on('error', reject);\n      \n      ws.send(testMessage);\n    });\n  });\n\n  test('should handle multiple clients', async () => {\n    const client1 = await createWebSocketClient(`ws://${HOST}:${port}`);\n    const client2 = await createWebSocketClient(`ws://${HOST}:${port}`);\n    \n    expect(client1.readyState).toBe(WebSocket.OPEN);\n    expect(client2.readyState).toBe(WebSocket.OPEN);\n    \n    client1.close();\n    client2.close();\n  });\n\n  test('should handle connection close', async () => {\n    const ws = await createWebSocketClient(`ws://${HOST}:${port}`);\n    \n    return new Promise<void>((resolve) => {\n      ws.on('close', () => {\n        expect(ws.readyState).toBe(WebSocket.CLOSED);\n        resolve();\n      });\n      \n      ws.close();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.e2e.legacy.skip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.gateway.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'INestApplication' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppModule' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { WsTestContext, createWsTestApp, teardownTestApp } from '../websocket-test.setup';\nimport { createTestSocket, waitForConnection, waitForEvent, disconnectAllClients } from '../utils/websocket-test.utils';\nimport { AppModule } from '../../src/app.module';\n\ndescribe('WebSocket Gateway (e2e)', () => {\n  let context: WsTestContext;\n  let clients: unknown[] = [];\n\n  beforeAll(async () => {\n    // Create test application with WebSocket support\n    context = await createWsTestApp();\n  });\n\n  afterAll(async () => {\n    // Disconnect all test clients\n    await disconnectAllClients(...clients);\n    \n    // Clean up the test application\n    await teardownTestApp(context.app, context.httpServer);\n  });\n\n  afterEach(async () => {\n    // Disconnect all clients after each test\n    await disconnectAllClients(...clients);\n    clients = [];\n  });\n\n  describe('Connection', () => {\n    it('should connect to WebSocket server', async () => {\n      // Create a test client\n      const client = createTestSocket(context, {\n        auth: { userId: 'test-user-1' },\n      });\n      clients.push(client);\n\n      // Wait for connection\n      await expect(waitForConnection(client)).resolves.not.toThrow();\n      expect(client.connected).toBe(true);\n    });\n\n    it('should reject connection without authentication', async () => {\n      // Create a test client without authentication\n      const client = createTestSocket(context, { autoConnect: false });\n      clients.push(client);\n\n      // Connection should be rejected\n      await expect(waitForConnection(client)).rejects.toThrow();\n      expect(client.connected).toBe(false);\n    });\n  });\n\n  describe('Messaging', () => {\n    it('should send and receive messages', async () => {\n      // Create two test clients\n      const client1 = createTestSocket(context, { auth: { userId: 'test-user-1' } });\n      const client2 = createTestSocket(context, { auth: { userId: 'test-user-2' } });\n      clients.push(client1, client2);\n\n      // Wait for both clients to connect\n      await Promise.all([\n        waitForConnection(client1),\n        waitForConnection(client2),\n      ]);\n\n      // Join the same room\n      const testRoom = 'test-room';\n      client1.emit('join-room', { room: testRoom });\n      client2.emit('join-room', { room: testRoom });\n\n      // Wait for join confirmation\n      await Promise.all([\n        waitForEvent(client1, 'room-joined'),\n        waitForEvent(client2, 'room-joined'),\n      ]);\n\n      // Send a message from client1\n      const testMessage = { text: 'Hello from test', timestamp: new Date().toISOString() };\n      client1.emit('send-message', { \n        room: testRoom, \n        message: testMessage \n      });\n\n      // Client2 should receive the message\n      const receivedMessage = await waitForEvent(client2, 'new-message');\n      expect(receivedMessage).toMatchObject({\n        room: testRoom,\n        message: testMessage,\n        sender: 'test-user-1',\n      });\n    });\n  });\n\n  describe('Presence', () => {\n    it('should track user presence', async () => {\n      const userId = 'presence-test-user';\n      \n      // Connect first client\n      const client1 = createTestSocket(context, { \n        auth: { userId },\n        query: { deviceId: 'device-1' }\n      });\n      clients.push(client1);\n      await waitForConnection(client1);\n\n      // Join a room\n      const testRoom = 'presence-room';\n      client1.emit('join-room', { room: testRoom });\n      await waitForEvent(client1, 'room-joined');\n\n      // Check presence\n      client1.emit('get-presence', { room: testRoom });\n      const presence = await waitForEvent(client1, 'presence-update');\n      \n      expect(presence).toMatchObject({\n        room: testRoom,\n        users: expect.arrayContaining([\n          expect.objectContaining({\n            userId,\n            online: true,\n            devices: ['device-1']\n          })\n        ])\n      });\n\n      // Connect second device\n      const client2 = createTestSocket(context, { \n        auth: { userId },\n        query: { deviceId: 'device-2' }\n      });\n      clients.push(client2);\n      await waitForConnection(client2);\n\n      // Both devices should be online\n      client2.emit('get-presence', { room: testRoom });\n      const updatedPresence = await waitForEvent(client2, 'presence-update');\n      \n      const userPresence = updatedPresence.users.find((u: unknown) => u.userId === userId);\n      expect(userPresence.devices).toHaveLength(2);\n      expect(userPresence.devices).toEqual(expect.arrayContaining(['device-1', 'device-2']));\n    });\n  });\n\n  describe('Disconnection', () => {\n    it('should handle client disconnection', async () => {\n      const client = createTestSocket(context, { \n        auth: { userId: 'disconnect-test-user' } \n      });\n      clients.push(client);\n      \n      await waitForConnection(client);\n      \n      // Disconnect the client\n      const disconnectPromise = new Promise<void>((resolve) => {\n        client.once('disconnect', () => resolve());\n      });\n      \n      client.disconnect();\n      await disconnectPromise;\n      \n      expect(client.connected).toBe(false);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.heartbeat.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[827,830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[827,830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'port' is defined but never used.","line":61,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":61,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1713,1716],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1713,1716],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1719,1722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1719,1722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1943,1946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1943,1946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3195,3198],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3195,3198],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { EventEmitter } from 'events';\nimport { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport WebSocket, { Server as WebSocketServer } from 'ws';\n\n// Mock socket.io-client\nclass MockSocket extends EventEmitter {\n  id: string;\n  connected: boolean;\n  disconnected: boolean;\n  \n  constructor() {\n    super();\n    this.id = `test-socket-${Math.random().toString(36).substr(2, 9)}`;\n    this.connected = true;\n    this.disconnected = false;\n  }\n\n  disconnect() {\n    this.connected = false;\n    this.disconnected = true;\n    this.emit('disconnect');\n    return this;\n  }\n\n  emit(event: string, ...args: any[]): boolean {\n    // For ping-pong simulation\n    if (event === 'ping' && typeof args[1] === 'function') {\n      const callback = args[1];\n      process.nextTick(() => callback({ timestamp: args[0]?.timestamp || Date.now() }));\n    }\n    return super.emit(event, ...args);\n  }\n}\n\n// Mock socket.io-client\nconst mockIo = jest.fn().mockImplementation(() => new MockSocket());\n\njest.mock('socket.io-client', () => ({\n  io: mockIo\n}));\n\n// Test Gateway\n@WebSocketGateway()\nclass TestGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: WebSocketServer;\n  \n  handleConnection(client: WebSocket) {\n    console.log('Client connected:', client.id);\n  }\n\n  handleDisconnect(client: WebSocket) {\n    console.log('Client disconnected:', client.id);\n  }\n}\n\n// Mock IoAdapter\nclass MockIoAdapter extends IoAdapter {\n  createIOServer(port: number, options?: any): any {\n    return {\n      on: jest.fn(),\n      close: jest.fn(),\n      of: jest.fn().mockReturnThis(),\n      use: jest.fn().mockReturnThis(),\n      engine: { on: jest.fn() },\n      sockets: {\n        sockets: new Map<string, any>(),\n        on: jest.fn()\n      }\n    };\n  }\n}\n\ndescribe('WebSocket Heartbeat', () => {\n  let app: INestApplication;\n  let gateway: TestGateway;\n  let socket: MockSocket;\n\n  beforeAll(async () => {\n    // Create a new mock socket for each test\n    socket = new MockSocket();\n    mockIo.mockImplementation(() => socket);\n\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      providers: [TestGateway],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useWebSocketAdapter(new MockIoAdapter(app));\n    \n    await app.init();\n    gateway = moduleFixture.get<TestGateway>(TestGateway);\n  }, 10000);\n\n  afterAll(async () => {\n    await app.close();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should connect to the WebSocket server', (done) => {\n    const client = mockIo('http://localhost:3000');\n    \n    client.on('connect', () => {\n      expect(client.connected).toBe(true);\n      client.disconnect();\n      done();\n    });\n    \n    // Simulate connection\n    client.emit('connect');\n  });\n\n  it('should handle ping-pong', (done) => {\n    const client = mockIo('http://localhost:3000');\n    \n    client.emit('ping', { timestamp: 12345 }, (response: any) => {\n      expect(response).toHaveProperty('timestamp');\n      expect(response.timestamp).toBe(12345);\n      client.disconnect();\n      done();\n    });\n  });\n\n  it('should handle disconnection', (done) => {\n    const client = mockIo('http://localhost:3000');\n    \n    client.on('disconnect', () => {\n      expect(client.connected).toBe(false);\n      done();\n    });\n    \n    client.disconnect();\n  });\n\n  it('should trigger gateway connection handlers', (done) => {\n    const handleConnectionSpy = jest.spyOn(gateway, 'handleConnection');\n    const handleDisconnectSpy = jest.spyOn(gateway, 'handleDisconnect');\n    \n    const client = mockIo('http://localhost:3000');\n    \n    // Simulate connection\n    client.emit('connection');\n    \n    process.nextTick(() => {\n      expect(handleConnectionSpy).toHaveBeenCalledTimes(1);\n      \n      // Simulate disconnection\n      client.disconnect();\n      \n      process.nextTick(() => {\n        expect(handleDisconnectSpy).toHaveBeenCalledTimes(1);\n        done();\n      });\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.heartbeat.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[658,661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[658,661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'room' is defined but never used.","line":39,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'close' is defined but never used.","line":43,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1329,1332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1329,1332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'port' is defined but never used.","line":86,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":86,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2271,2274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2271,2274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2277,2280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2277,2280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2368,2371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2368,2371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport WebSocket, { Server as WebSocketServer } from 'ws';\nimport { EventEmitter } from 'events';\n\n// Increase test timeout for all tests in this file\njest.setTimeout(30000);\n\n// Simple mock socket for testing\nclass MockSocket extends EventEmitter {\n  id: string = 'test-socket-id';\n  connected: boolean = true;\n  disconnected: boolean = false;\n  rooms = new Set<string>();\n  data: any = {};\n  \n  constructor() {\n    super();\n    // Set up default event handlers\n    this.on('ping', (data, callback) => {\n      if (typeof callback === 'function') {\n        callback({ ...data, pong: true });\n      }\n    });\n  }\n  \n  join(room: string): this {\n    this.rooms.add(room);\n    return this;\n  }\n  \n  leave(room: string): this {\n    this.rooms.delete(room);\n    return this;\n  }\n  \n  to(room: string): this {\n    return this;\n  }\n  \n  disconnect(close?: boolean): this {\n    this.connected = false;\n    this.disconnected = true;\n    this.emit('disconnect', 'io client disconnect');\n    return this;\n  }\n  \n  // Mock other required methods\n  get broadcast(): any {\n    return {\n      to: () => ({\n        emit: () => {}\n      })\n    };\n  }\n}\n\n// Test Gateway for WebSocket testing\n@WebSocketGateway()\nclass TestWebSocketGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: WebSocketServer;\n  connectedClient: WebSocket | null = null;\n  \n  constructor() {\n    // Ensure proper 'this' binding\n    this.handleConnection = this.handleConnection.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  handleConnection(client: WebSocket) {\n    this.connectedClient = client;\n    console.log('Client connected:', client.id);\n  }\n\n  handleDisconnect(client: WebSocket) {\n    console.log('Client disconnected:', client.id);\n    // Always clear the connected client on disconnect\n    this.connectedClient = null;\n  }\n}\n\n// Mock IoAdapter with minimal implementation\nclass MockIoAdapter extends IoAdapter {\n  createIOServer(port: number, options?: any): any {\n    return {\n      on: jest.fn(),\n      close: jest.fn((cb) => cb && cb()),\n    } as any;\n  }\n}\n\ndescribe('WebSocket Heartbeat', () => {\n  let app: INestApplication;\n  let gateway: TestWebSocketGateway;\n  let mockSocket: MockSocket;\n  let moduleFixture: TestingModule;\n\n  beforeAll(async () => {\n    moduleFixture = await Test.createTestingModule({\n      providers: [TestWebSocketGateway],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useWebSocketAdapter(new MockIoAdapter(app));\n    await app.init();\n\n    gateway = moduleFixture.get<TestWebSocketGateway>(TestWebSocketGateway);\n    mockSocket = new MockSocket();\n    \n    // Mock the server instance with proper typing\n    const mockServer: Partial<WebSocketServer> = {\n      to: jest.fn().mockReturnThis(),\n      emit: jest.fn(),\n    };\n    gateway.server = mockServer as WebSocketServer;\n  });\n\n  afterAll(async () => {\n    try {\n      if (app) {\n        await new Promise<void>((resolve, reject) => {\n          // Close the app with a timeout\n          const timeout = setTimeout(() => {\n            console.warn('Forcing app close due to timeout');\n            resolve();\n          }, 3000);\n          \n          app.close().then(() => {\n            clearTimeout(timeout);\n            resolve();\n          }).catch(reject);\n        });\n      }\n    } catch (error) {\n      console.error('Error during test cleanup:', error);\n    }\n  }, 10000); // 10 second timeout for cleanup\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockSocket = new MockSocket();\n  });\n\n  it('should call handleConnection when a client connects', () => {\n    const handleConnectionSpy = jest.spyOn(gateway, 'handleConnection');\n    \n    // Simulate connection with proper typing\n    gateway.handleConnection(mockSocket as unknown as WebSocket);\n    \n    expect(handleConnectionSpy).toHaveBeenCalledTimes(1);\n    expect(handleConnectionSpy).toHaveBeenCalledWith(mockSocket);\n    expect(gateway.connectedClient).toBe(mockSocket);\n  });\n\n  it('should call handleDisconnect when a client disconnects', () => {\n    // First connect\n    gateway.handleConnection(mockSocket as unknown as WebSocket);\n    expect(gateway.connectedClient).toBeDefined();\n    \n    const handleDisconnectSpy = jest.spyOn(gateway, 'handleDisconnect');\n    \n    // Then disconnect\n    gateway.handleDisconnect(mockSocket as unknown as WebSocket);\n    \n    expect(handleDisconnectSpy).toHaveBeenCalledTimes(1);\n    expect(handleDisconnectSpy).toHaveBeenCalledWith(mockSocket);\n    // The socket should be removed from connectedClient\n    expect(gateway.connectedClient).toBeNull();\n  });\n\n  it('should handle ping-pong messages', (done) => {\n    const pingData = { timestamp: Date.now() };\n    \n    // Set a test timeout\n    const testTimeout = setTimeout(() => {\n      done(new Error('Test timeout: ping-pong response not received'));\n    }, 5000);\n    \n    // Simulate ping with a callback\n    mockSocket.emit('ping', pingData, (response: { timestamp: number; pong: boolean }) => {\n      try {\n        clearTimeout(testTimeout);\n        expect(response).toEqual({ ...pingData, pong: true });\n        done();\n      } catch (err) {\n        clearTimeout(testTimeout);\n        done(err as Error);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.integration.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddressInfo' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WS_CONNECTING' is assigned a value but never used.","line":6,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WS_CLOSING' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WS_CLOSED' is assigned a value but never used.","line":9,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TEST_PORT' is assigned a value but never used.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TEST_HOST' is assigned a value but never used.","line":13,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[666,669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[666,669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createTestClient' is defined but never used.","line":26,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'closeTestClients' is defined but never used.","line":81,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TEST_TIMEOUT' is assigned a value but never used.","line":99,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3241,3244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3241,3244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3322,3325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3322,3325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3345,3348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3345,3348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3386,3389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3386,3389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3479,3482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3479,3482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3977,3980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3977,3980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4163,4166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4163,4166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4470,4473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4470,4473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4585,4588],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4585,4588],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4615,4618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4615,4618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4958,4961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4958,4961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5324,5327],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5324,5327],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6299,6302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6299,6302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6470,6473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6470,6473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\nimport { createServer, Server as HttpServer } from 'http';\nimport { AddressInfo } from 'net';\n\n// WebSocket readyState constants\nconst WS_CONNECTING = 0;\nconst WS_OPEN = 1;\nconst WS_CLOSING = 2;\nconst WS_CLOSED = 3;\n\n// Test configuration\nconst TEST_PORT = 0; // 0 means random available port\nconst TEST_HOST = 'localhost';\nconst MESSAGE_TIMEOUT = 5000; // 5 seconds\n\n// Enable debug logging if DEBUG environment variable is set\nconst DEBUG = process.env.DEBUG === 'true';\nconst log = DEBUG ? console.log : () => {};\n\ninterface TestWebSocketClient extends WebSocket {\n  testId?: string;\n  receivedMessages: any[];\n  waitForMessages: (count: number, timeout?: number) => Promise<void>;\n}\n\nfunction createTestClient(url: string, id: string): Promise<TestWebSocketClient> {\n  return new Promise((resolve, reject) => {\n    const client = new WebSocket(url) as TestWebSocketClient;\n    client.testId = id;\n    client.receivedMessages = [];\n    \n    const messageResolvers: Array<() => void> = [];\n    \n    client.on('message', (data: string) => {\n      try {\n        const message = JSON.parse(data);\n        client.receivedMessages.push(message);\n        \n        // Resolve any waiting message promises\n        while (messageResolvers.length > 0) {\n          const resolver = messageResolvers.shift();\n          if (resolver) resolver();\n        }\n      } catch (error) {\n        console.error(`[Client ${id}] Error parsing message:`, error);\n      }\n    });\n    \n    client.on('open', () => {\n      log(`[Client ${id}] Connected to WebSocket server`);\n      \n      client.waitForMessages = (count: number, timeout = MESSAGE_TIMEOUT) => {\n        return new Promise<void>((resolve, reject) => {\n          const timer = setTimeout(() => {\n            reject(new Error(`Timeout waiting for ${count} messages`));\n          }, timeout);\n          \n          const checkMessages = () => {\n            if (client.receivedMessages.length >= count) {\n              clearTimeout(timer);\n              resolve();\n            } else {\n              messageResolvers.push(checkMessages);\n            }\n          };\n          \n          checkMessages();\n        });\n      };\n      \n      resolve(client);\n    });\n    \n    client.on('error', (error) => {\n      console.error(`[Client ${id}] WebSocket error:`, error);\n      reject(error);\n    });\n  });\n}\n\nasync function closeTestClients(...clients: TestWebSocketClient[]): Promise<void> {\n  await Promise.all(\n    clients.map(\n      (client) =>\n        new Promise<void>((resolve) => {\n          if (client.readyState === WS_OPEN) {\n            client.close(1000, 'Test complete');\n          }\n          resolve();\n        })\n    )\n  );\n}\n\ndescribe('WebSocket Integration Tests', () => {\n  let httpServer: HttpServer;\n  let wss: WebSocketServer;\n  let port: number;\n  const TEST_TIMEOUT = 5000;\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create WebSocket server using mock\n    wss = new WebSocketServer({ server: httpServer });\n    \n    // Handle WebSocket connections\n    wss.on('connection', (ws: WebSocket) => {\n      const clientId = Math.random().toString(36).substring(2, 9);\n      (ws as any).id = clientId;\n      \n      // Store the WebSocket connection\n      (wss as any).clients = (wss as any).clients || new Set();\n      (wss as any).clients.add(ws);\n      \n      // Handle incoming messages\n      ws.on('message', (data: any) => {\n        try {\n          const message = data.toString();\n          \n          // Echo the message back to the client\n          ws.send(JSON.stringify({ \n            type: 'echo', \n            data: message,\n            clientId,\n            timestamp: new Date().toISOString()\n          }));\n        } catch (err) {\n          console.error(`[${clientId}] Error handling message:`, err);\n        }\n      });\n      \n      // Handle close events\n      ws.on('close', () => {\n        (wss as any).clients.delete(ws);\n      });\n      \n      // Handle errors\n      ws.on('error', (error: Error) => {\n        console.error(`[${clientId}] WebSocket error:`, error);\n        (wss as any).clients.delete(ws);\n      });\n      \n      // Send welcome message\n      ws.send(JSON.stringify({\n        type: 'connected',\n        clientId,\n        timestamp: new Date().toISOString()\n      }));\n    });\n    \n    // Start server\n    httpServer.listen(0, () => {\n      port = (httpServer.address() as any).port;\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    // Close all client connections\n    if ((wss as any).clients) {\n      (wss as any).clients.forEach((client: WebSocket) => {\n        try {\n          client.close(1000, 'Test complete');\n        } catch (err) {\n          console.error('Error closing client:', err);\n        }\n      });\n    }\n    \n    // Close WebSocket server\n    wss.close(() => {\n      // Close HTTP server\n      httpServer.close(() => {\n        (wss as any).clients = [];\n        console.log('Test teardown complete');\n        done();\n      });\n    });\n  });\n\n  it('should handle basic WebSocket communication', (done) => {\n    const ws = new WebSocket(`ws://localhost:${port}`);\n    \n    ws.on('open', () => {\n      ws.send(JSON.stringify({ type: 'test', message: 'Hello' }));\n    });\n    \n    ws.on('message', (data: any) => {\n      const message = JSON.parse(data.toString());\n      expect(message.type).toBe('echo');\n      expect(message.data).toContain('Hello');\n      ws.close();\n      done();\n    });\n    \n    ws.on('error', (error: Error) => {\n      console.error('WebSocket error:', error);\n      done(error);\n    });\n  });\n\n  it('should handle multiple clients', (done) => {\n    const client1 = new WebSocket(`ws://localhost:${port}`);\n    const client2 = new WebSocket(`ws://localhost:${port}`);\n    let messagesReceived = 0;\n    \n    const checkComplete = () => {\n      messagesReceived++;\n      if (messagesReceived >= 2) {\n        client1.close();\n        client2.close();\n        done();\n      }\n    };\n    \n    client1.on('open', () => {\n      client1.send(JSON.stringify({ type: 'test', message: 'Client 1' }));\n    });\n    \n    client2.on('open', () => {\n      client2.send(JSON.stringify({ type: 'test', message: 'Client 2' }));\n    });\n    \n    client1.on('message', (data: any) => {\n      const message = JSON.parse(data.toString());\n      expect(message.type).toBe('echo');\n      checkComplete();\n    });\n    \n    client2.on('message', (data: any) => {\n      const message = JSON.parse(data.toString());\n      expect(message.type).toBe('echo');\n      checkComplete();\n    });\n    \n    client1.on('error', (error: Error) => {\n      console.error('Client 1 error:', error);\n      done(error);\n    });\n    \n    client2.on('error', (error: Error) => {\n      console.error('Client 2 error:', error);\n      done(error);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.minimal.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.simple.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":71,"column":20,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":71,"endColumn":47},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":86,"column":20,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":86,"endColumn":47}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Server, Socket } from 'socket.io';\nimport { createServer } from 'http';\nimport { AddressInfo } from 'net';\n\n// Simple Test Gateway\n@WebSocketGateway()\nclass TestGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: Server;\n  \n  handleConnection(client: Socket) {\n    console.log('Client connected:', client.id);\n  }\n\n  handleDisconnect(client: Socket) {\n    console.log('Client disconnected:', client.id);\n  }\n\n  // Simple echo handler\n  handleEcho(client: Socket, data: unknown) {\n    client.emit('echo', data);\n  }\n}\n\ndescribe('WebSocket (Simple)', () => {\n  let app: INestApplication;\n  let httpServer: unknown;\n  let port: number;\n  \n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      providers: [TestGateway],\n    }).compile();\n\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create NestJS app\n    app = moduleFixture.createNestApplication();\n    \n    // Use WebSocket adapter\n    const ioAdapter = new IoAdapter(httpServer);\n    app.useWebSocketAdapter(ioAdapter);\n    \n    // Initialize app\n    await app.init();\n    \n    // Start HTTP server\n    await new Promise<void>((resolve) => {\n      httpServer.listen(0, () => {\n        port = (httpServer.address() as AddressInfo).port;\n        console.log(`Test WebSocket server running on port ${port}`);\n        resolve();\n      });\n    });\n  }, 10000);\n\n  afterAll(async () => {\n    await app.close();\n    httpServer.close();\n  });\n\n  it('should be defined', () => {\n    expect(app).toBeDefined();\n  });\n\n  it('should connect to the WebSocket server', (done) => {\n    const client = require('socket.io-client')(`http://localhost:${port}`);\n    \n    client.on('connect', () => {\n      expect(client.connected).toBe(true);\n      client.disconnect();\n      done();\n    });\n    \n    client.on('connect_error', (error: unknown) => {\n      console.error('Connection error:', error);\n      done(error);\n    });\n  });\n\n  it('should handle disconnection', (done) => {\n    const client = require('socket.io-client')(`http://localhost:${port}`);\n    \n    client.on('connect', () => {\n      client.on('disconnect', () => {\n        expect(client.connected).toBe(false);\n        done();\n      });\n      \n      client.disconnect();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.smoke.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocket' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocketServer' is defined but never used.","line":1,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Server' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1712,1715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1712,1715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1957,1960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1957,1960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2396,2399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2396,2399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2473,2476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2473,2476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":127,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3503,3506],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3503,3506],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3583,3586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3583,3586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\nimport { JwtService } from '@nestjs/jwt';\nimport { createWsTestApp, teardownTestApp } from './websocket-test.setup';\nimport { INestApplication } from '@nestjs/common';\nimport { Server } from 'socket.io';\n\n// Test configuration\nconst TEST_CONFIG = {\n  TEST_USER: {\n    id: 'test-user-1',\n    email: 'test@example.com',\n    name: 'Test User'\n  },\n  TIMEOUT: 10000, // 10 seconds\n  PING_INTERVAL: 30000, // 30 seconds\n  PONG_TIMEOUT: 5000 // 5 seconds\n};\n\ndescribe('WebSocket Smoke Test', () => {\n  let app: INestApplication;\n  let port: number;\n  let jwtService: JwtService;\n  let testToken: string;\n  \n  beforeAll(async () => {\n    // Setup test application\n    const testApp = await createWsTestApp();\n    app = testApp.app;\n    port = app.getHttpServer().address().port;\n    \n    // Get JWT service from the app\n    const moduleFixture = app.select(AppModule);\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    \n    // Generate test token\n    testToken = jwtService.sign({\n      sub: TEST_CONFIG.TEST_USER.id,\n      email: TEST_CONFIG.TEST_USER.email,\n      name: TEST_CONFIG.TEST_USER.name\n    });\n  }, 30000);\n\n  afterAll(async () => {\n    await teardownTestApp();\n  });\n\n  // Helper function to create a WebSocket client\n  const createSocketClient = (options = {}) => {\n    return io(`http://localhost:${port}`, {\n      auth: { token: testToken },\n      transports: ['websocket', 'polling'],\n      reconnection: false,\n      timeout: TEST_CONFIG.PONG_TIMEOUT,\n      forceNew: true,\n      ...options\n    });\n  };\n\n  // Helper function to wait for an event\n  const waitForEvent = (socket: Socket, event: string, timeout = 5000): Promise<any> => {\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        socket.off(event, handler);\n        reject(new Error(`Timeout waiting for ${event}`));\n      }, timeout);\n      \n      const handler = (data: any) => {\n        clearTimeout(timer);\n        resolve(data);\n      };\n      \n      socket.once(event, handler);\n    });\n  };\n\n  // 1. Test connection\n  it('should establish WebSocket connection', async () => {\n    const socket = createSocketClient();\n    \n    try {\n      await waitForEvent(socket, 'connect');\n      expect(socket.connected).toBe(true);\n      \n      // Test basic event emission\n      const testEvent = await new Promise<any>((resolve) => {\n        socket.emit('test', { test: 'data' }, (response: any) => {\n          resolve(response);\n        });\n      });\n      \n      expect(testEvent).toBeDefined();\n    } finally {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    }\n  });\n\n  // 2. Test authentication\n  it('should reject connection with invalid token', async () => {\n    const socket = createSocketClient({\n      auth: { token: 'invalid-token' }\n    });\n\n    await expect(\n      new Promise((resolve, reject) => {\n        socket.on('connect', () => resolve('connected'));\n        socket.on('connect_error', (error) => reject(error));\n      })\n    ).rejects.toThrow();\n\n    if (socket.connected) {\n      socket.disconnect();\n    }\n  });\n\n  // 3. Test message exchange\n  it('should send and receive messages', async () => {\n    const socket = createSocketClient();\n    const testMessage = { type: 'test', data: 'Hello WebSocket' };\n    \n    try {\n      // Wait for connection\n      await waitForEvent(socket, 'connect');\n      \n      // Test echo functionality\n      const response = await new Promise<any>((resolve, reject) => {\n        socket.emit('echo', testMessage, (response: any) => {\n          if (response.error) {\n            reject(new Error(response.error));\n          } else {\n            resolve(response);\n          }\n        });\n        \n        setTimeout(() => {\n          reject(new Error('No response received'));\n        }, TEST_CONFIG.TIMEOUT);\n      });\n      \n      expect(response).toEqual(expect.objectContaining({\n        ...testMessage,\n        timestamp: expect.any(Number)\n      }));\n    } finally {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    }\n  });\n\n  // 4. Test ping/pong heartbeat\n  it('should maintain connection with ping/pong', async () => {\n    const socket = createSocketClient({\n      pingTimeout: 10000,\n      pingInterval: 5000\n    });\n    \n    try {\n      await waitForEvent(socket, 'connect');\n      \n      // Verify connection is maintained\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      expect(socket.connected).toBe(true);\n    } finally {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    }\n  });\n\n  // 5. Test disconnection\n  it('should handle disconnection', async () => {\n    const socket = createSocketClient();\n    \n    try {\n      await waitForEvent(socket, 'connect');\n      expect(socket.connected).toBe(true);\n      \n      // Test graceful disconnection\n      await new Promise<void>((resolve) => {\n        socket.on('disconnect', (reason) => {\n          expect(reason).toBe('io client disconnect');\n          resolve();\n        });\n        socket.disconnect();\n      });\n      \n      expect(socket.connected).toBe(false);\n    } finally {\n      if (socket.connected) {\n        socket.disconnect();\n      }\n    }\n  });\n  \n  // 6. Test concurrent connections\n  it('should handle multiple concurrent connections', async () => {\n    const NUM_CLIENTS = 5;\n    const clients = Array(NUM_CLIENTS).fill(0).map(() => createSocketClient());\n    \n    try {\n      // Wait for all clients to connect\n      await Promise.all(\n        clients.map(client => waitForEvent(client, 'connect'))\n      );\n      \n      // Verify all clients are connected\n      clients.forEach(client => {\n        expect(client.connected).toBe(true);\n      });\n      \n      // Test message broadcasting\n      const testMessage = { type: 'broadcast', message: 'Hello all' };\n      const responses = await Promise.all(\n        clients.map(client => \n          new Promise(resolve => {\n            client.on('broadcast', resolve);\n            client.emit('broadcast', testMessage);\n          })\n        )\n      );\n      \n      // Each client should receive the broadcast\n      responses.forEach(response => {\n        expect(response).toEqual(expect.objectContaining(testMessage));\n      });\n    } finally {\n      // Clean up all clients\n      clients.forEach(client => {\n        if (client.connected) {\n          client.disconnect();\n        }\n      });\n    }\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.smoke.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'token' is defined but never used.","line":10,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":46},{"ruleId":"@typescript-eslint/no-var-requires","severity":2,"message":"Require statement not part of import statement.","line":49,"column":22,"nodeType":"CallExpression","messageId":"noVarReqs","endLine":49,"endColumn":42}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { createServer, Server as HttpServer } from 'http';\nimport { AddressInfo } from 'net';\nimport { io, Socket } from 'socket.io-client';\n\n// Simple mock for JWT service\nconst mockJwtService = {\n  verify: jest.fn().mockImplementation((token: string) => {\n    return { userId: 'test-user-1' };\n  })\n};\n\n// Mock JwtWsAuthGuard\nconst mockJwtWsAuthGuard = {\n  canActivate: jest.fn().mockImplementation(() => true),\n};\n\ndescribe('WebSocket Smoke Test', () => {\n  let app: INestApplication;\n  let httpServer: HttpServer;\n  let socket: Socket;\n  \n  beforeAll(async () => {\n    console.log('1. Setting up test module...');\n    \n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RtcGateway,\n        {\n          provide: 'JwtService',\n          useValue: mockJwtService,\n        },\n        {\n          provide: 'JwtWsAuthGuard',\n          useValue: mockJwtWsAuthGuard,\n        },\n      ],\n    }).compile();\n\n    console.log('2. Creating Nest application...');\n    app = module.createNestApplication();\n    \n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create WebSocket server\n    const ioServer = require('socket.io')(httpServer, {\n      cors: {\n        origin: '*',\n        methods: ['GET', 'POST'],\n      },\n    });\n    \n    // Get gateway instance and attach server\n    const gateway = module.get<RtcGateway>(RtcGateway);\n    (gateway as unknown as { server: unknown })['server'] = ioServer;\n    \n    // Initialize application\n    await app.init();\n    \n    // Start HTTP server\n    await new Promise<void>((resolve) => {\n      httpServer.listen(0, '127.0.0.1', () => {\n        const port = (httpServer.address() as AddressInfo).port;\n        console.log(`Test server listening on port ${port}`);\n        resolve();\n      });\n    });\n  }, 30000);\n\n  afterAll(async () => {\n    console.log('Cleaning up...');\n    \n    if (socket) {\n      socket.disconnect();\n    }\n    \n    if (httpServer) {\n      await new Promise<void>((resolve) => {\n        httpServer.close(() => {\n          console.log('HTTP server closed');\n          resolve();\n        });\n      });\n    }\n    \n    if (app) {\n      await app.close();\n    }\n    \n    console.log('Cleanup complete');\n  }, 10000);\n\n  it('should establish WebSocket connection', (done) => {\n    const port = (httpServer.address() as AddressInfo).port;\n    const socketUrl = `http://localhost:${port}`;\n    \n    console.log(`\\n=== Starting WebSocket Test ===`);\n    console.log(`1. Connecting to WebSocket server at ${socketUrl}...`);\n    \n    // Create socket.io client\n    socket = io(socketUrl, {\n      transports: ['websocket', 'polling'],\n      autoConnect: true,\n      reconnection: false,\n      auth: {\n        token: 'test-jwt-token'\n      },\n      query: {\n        test: 'true',\n        userId: 'test-user-1'\n      }\n    });\n    \n    // Set test timeout\n    const testTimeout = setTimeout(() => {\n      console.error('❌ Test timeout reached (10s)');\n      socket.disconnect();\n      done(new Error('Test timeout'));\n    }, 10000);\n    \n    // Connection established\n    socket.on('connect', () => {\n      console.log('✅ Connected to WebSocket server');\n      console.log('   - Socket ID:', socket.id);\n      \n      // Clean up and complete the test\n      clearTimeout(testTimeout);\n      socket.disconnect();\n      done();\n    });\n    \n    // Error handling\n    socket.on('connect_error', (error: unknown) => {\n      console.error('❌ Connection error:', (error as unknown as { message: string }).message);\n      clearTimeout(testTimeout);\n      done(error);\n    });\n    \n    socket.on('error', (error: unknown) => {\n      console.error('❌ Socket error:', (error as unknown as { message: string }).message);\n      clearTimeout(testTimeout);\n      done(error);\n    });\n  }, 15000);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.standalone.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocket' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'wsServer' is assigned a value but never used.","line":14,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1854,1857],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1854,1857],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2526,2529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2526,2529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6330,6333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6330,6333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7113,7116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7113,7116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7338,7341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7338,7341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\nimport { createServer, Server as HttpServer } from 'http';\nimport { AddressInfo } from 'net';\nimport { io, Socket } from 'socket.io-client';\nimport { Server as SocketIOServer } from 'socket.io';\n\njest.mock('uws', () => ({\n  restoreAdapter: jest.fn(),\n}));\n\n// Simple WebSocket server test that doesn't depend on NestJS\ndescribe('Standalone WebSocket Server', () => {\n  let httpServer: HttpServer;\n  let wsServer: WebSocketServer;\n  let socket: Socket;\n  let port: number;\n\n  beforeAll((done) => {\n    try {\n      console.log('1. Creating HTTP server...');\n      \n      // 1. Create HTTP server\n      httpServer = createServer();\n      \n      // 2. Create WebSocket server\n      wsServer = new WebSocketServer({ server: httpServer });\n      \n      // Add error handler to HTTP server\n      httpServer.on('error', (error) => {\n        console.error('HTTP server error:', error);\n      });\n      \n      console.log('2. Creating Socket.IO server...');\n      \n      // 3. Create Socket.IO server with detailed logging\n      const ioServer = new SocketIOServer(httpServer, {\n        cors: {\n          origin: '*',\n          methods: ['GET', 'POST'],\n        },\n        connectTimeout: 10000,\n        pingTimeout: 10000,\n        pingInterval: 25000,\n      });\n      \n      // Add connection state logging (Socket.IO v4+ compatible)\n      ioServer.on('connection_error', (err) => {\n        console.error('Socket.IO connection error:', err);\n      });\n      \n      // Add error handling for HTTP server\n      ioServer.on('error', (err) => {\n        console.error('Socket.IO server error:', err);\n      });\n      \n      console.log('3. Setting up connection handlers...');\n      \n      // Simple connection handler with detailed logging (Socket.IO v4+ compatible)\n      ioServer.on('connection', (client: any) => {\n        const transport = client.conn?.transport || client.conn?._transport;\n        const transportName = transport?.name || 'unknown';\n        \n        console.log(`Client connected: ${client.id} (transport: ${transportName})`);\n        \n        // Log transport upgrade if available\n        if (client.conn?.on) {\n          client.conn.on('upgrade', () => {\n            const newTransport = client.conn?.transport || client.conn?._transport;\n            const newTransportName = newTransport?.name || 'unknown';\n            console.log(`Client ${client.id} upgraded to: ${newTransportName}`);\n          });\n        }\n        \n        client.on('ping', (data: any) => {\n          console.log(`Received ping from ${client.id}:`, data);\n          const transport = client.conn?.transport || client.conn?._transport;\n          const transportName = transport?.name || 'unknown';\n          \n          client.emit('pong', { \n            ...data, \n            serverTime: Date.now(),\n            transport: transportName\n          });\n        });\n        \n        client.on('disconnect', (reason: string) => {\n          console.log(`Client ${client.id} disconnected:`, reason);\n        });\n      });\n      \n      console.log('4. Starting HTTP server...');\n      \n      // Start server\n      httpServer.listen(0, '127.0.0.1', () => {\n        port = (httpServer.address() as AddressInfo).port;\n        console.log(`Test server listening on port ${port}`);\n        done();\n      });\n    } catch (error) {\n      console.error('Error in beforeAll:', error);\n      done(error);\n    }\n  }, 15000);\n\n  afterAll((done) => {\n    console.log('Cleaning up...');\n    \n    if (socket) {\n      socket.disconnect();\n    }\n    \n    if (httpServer) {\n      httpServer.close(() => {\n        console.log('HTTP server closed');\n        done();\n      });\n    } else {\n      done();\n    }\n  });\n\n  it('should establish WebSocket connection and exchange messages', (done) => {\n    try {\n      const socketUrl = `http://localhost:${port}`;\n      console.log(`\\n=== Starting WebSocket Test ===`);\n      console.log(`1. Connecting to WebSocket server at ${socketUrl}...`);\n      \n      // Log environment info\n      console.log('Environment:');\n      console.log(`- Node.js: ${process.version}`);\n      console.log(`- Platform: ${process.platform} ${process.arch}`);\n      console.log(`- NODE_ENV: ${process.env.NODE_ENV || 'not set'}`);\n      \n      // Create socket.io client with detailed options\n      const socketOptions = {\n        transports: ['websocket', 'polling'],\n        autoConnect: true,\n        reconnection: false,\n        forceNew: true,\n        upgrade: true,\n        rememberUpgrade: true,\n        path: '/socket.io/',\n        query: {\n          test: 'true',\n          clientType: 'test-suite',\n          timestamp: Date.now()\n        },\n        extraHeaders: {\n          'x-test-client': 'jest-test'\n        },\n        timeout: 10000\n      };\n      \n      console.log('2. Creating socket.io client with options:', JSON.stringify(socketOptions, null, 2));\n      \n      socket = io(socketUrl, socketOptions);\n      \n      // Set test timeout\n      const testTimeout = setTimeout(() => {\n        console.error('❌ Test timeout reached (10s)');\n        console.log('Socket connected:', socket.connected);\n        console.log('Socket ID:', socket.id);\n        socket.disconnect();\n        done(new Error('Test timeout'));\n      }, 10000);\n      \n      // Log all socket events for debugging\n      const events = [\n        'connect', 'connect_error', 'error', 'disconnect', 'reconnect_attempt',\n        'reconnect_error', 'reconnect_failed', 'ping', 'pong', 'message'\n      ];\n      \n      events.forEach(event => {\n        socket.on(event, (...args) => {\n          console.log(`[client:${event}]`, ...args);\n        });\n      });\n      \n      // Connection established\n      socket.on('connect', () => {\n        console.log('✅ Connected to WebSocket server');\n        console.log('   - Socket ID:', socket.id);\n        console.log('   - Transport:', socket.io.engine.transport.name);\n        \n        // Send a test message\n        const testMessage = { \n          message: 'ping',\n          timestamp: Date.now(),\n          testId: 'test-' + Math.random().toString(36).substr(2, 9)\n        };\n        \n        console.log('3. Sending ping:', testMessage);\n        socket.emit('ping', testMessage);\n        \n        // Listen for pong response\n        socket.on('pong', (response: any) => {\n          console.log('4. Received pong:', response);\n          try {\n            expect(response).toHaveProperty('message', 'ping');\n            expect(response).toHaveProperty('testId', testMessage.testId);\n            expect(response).toHaveProperty('serverTime');\n            expect(response).toHaveProperty('transport');\n            \n            console.log('✅ All assertions passed');\n            \n            // Clean up and complete the test\n            clearTimeout(testTimeout);\n            socket.disconnect();\n            done();\n          } catch (error) {\n            clearTimeout(testTimeout);\n            socket.disconnect();\n            done(error);\n          }\n        });\n      });\n      \n      // Error handling\n      socket.on('connect_error', (error: any) => {\n        console.error('❌ Connection error:', error.message);\n        console.error('Error details:', error);\n        clearTimeout(testTimeout);\n        done(error);\n      });\n      \n      socket.on('error', (error: any) => {\n        console.error('❌ Socket error:', error.message);\n        console.error('Error details:', error);\n        clearTimeout(testTimeout);\n        done(error);\n      });\n      \n      socket.on('disconnect', (reason: string) => {\n        console.log('ℹ️  Disconnected:', reason);\n      });\n    } catch (error) {\n      console.error('❌ Test error:', error);\n      done(error);\n    }\n  }, 15000);\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/websocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-basic.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[174,177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[174,177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[197,200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[197,200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[222,225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[222,225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":19,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[469,472],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[469,472],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":23,"column":47,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":23,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1384,1387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1384,1387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1623,1626],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1623,1626],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport { io as Client } from 'socket.io-client';\n\ndescribe('Basic WebSocket Test', () => {\n  let io: any;\n  let httpServer: any;\n  let clientSocket: any;\n  const port = 3001;\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create Socket.IO server\n    io = new Server(httpServer);\n    \n    // Listen for connections\n    io.on('connection', (socket: any) => {\n      console.log('Client connected:', socket.id);\n      \n      // Handle ping event\n      socket.on('ping', (data: any, callback: Function) => {\n        console.log('Server received ping:', data);\n        callback({ ...data, timestamp: Date.now() });\n      });\n    });\n    \n    // Start listening\n    httpServer.listen(port, () => {\n      console.log(`Test server listening on port ${port}`);\n      done();\n    });\n  });\n\n  afterAll(() => {\n    if (io) io.close();\n    if (httpServer) httpServer.close();\n    if (clientSocket) clientSocket.disconnect();\n  });\n\n  test('should connect and send/receive messages', (done) => {\n    // Create client\n    clientSocket = Client(`http://localhost:${port}`);\n    \n    clientSocket.on('connect', () => {\n      expect(clientSocket.connected).toBe(true);\n      \n      const testData = { message: 'test' };\n      \n      clientSocket.emit('ping', testData, (response: any) => {\n        expect(response).toBeDefined();\n        expect(response.message).toBe(testData.message);\n        expect(response.timestamp).toBeDefined();\n        done();\n      });\n    });\n    \n    clientSocket.on('connect_error', (err: any) => {\n      done(err);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-connection.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'serverSocket' is assigned a value but never used.","line":8,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer, Server as HttpServer } from 'http';\nimport { io as Client, Socket } from 'socket.io-client';\nimport { Server, Socket as ServerSocket } from 'socket.io';\n\ndescribe('WebSocket Server', () => {\n  let io: Server;\n  let httpServer: HttpServer;\n  let serverSocket: ServerSocket;\n  let clientSocket: Socket;\n  const port = 3001;\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create Socket.IO server with proper typing\n    io = new Server(httpServer, {\n      cors: {\n        origin: '*',\n        methods: ['GET', 'POST']\n      },\n      path: '/socket.io/'\n    });\n    \n    // Listen for connections using the 'on' method directly on the io instance\n    io.on('connection', (socket: ServerSocket) => {\n      console.log('Client connected:', socket.id);\n      serverSocket = socket;\n      \n      // Handle ping event\n      socket.on('ping', (data: unknown, callback: (response: unknown) => void) => {\n        console.log('Server received ping:', data);\n        if (typeof callback === 'function') {\n          callback({ ...data, timestamp: Date.now() });\n        }\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', () => {\n        console.log('Client disconnected:', socket.id);\n      });\n    });\n    \n    // Start listening\n    httpServer.listen(port, () => {\n      console.log(`Test server listening on port ${port}`);\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    // Close all client connections first\n    if (clientSocket?.connected) {\n      clientSocket.disconnect();\n    }\n    \n    // Close the server\n    io.close(() => {\n      httpServer.close(() => {\n        console.log('Test server closed');\n        done();\n      });\n    });\n  });\n\n  test('should connect to the server', (done) => {\n    clientSocket = Client(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      path: '/socket.io/'\n    });\n\n    clientSocket.on('connect', () => {\n      expect(clientSocket.connected).toBe(true);\n      clientSocket.disconnect();\n      done();\n    });\n\n    clientSocket.on('connect_error', (err) => {\n      done(err);\n    });\n  });\n\n  test('should handle ping-pong', (done) => {\n    clientSocket = Client(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      path: '/socket.io/'\n    });\n\n    clientSocket.on('connect', () => {\n      const testData = { message: 'test-ping' };\n      \n      clientSocket.emit('ping', testData, (response: unknown) => {\n        expect(response).toBeDefined();\n        expect(response.message).toBe(testData.message);\n        expect(response.timestamp).toBeDefined();\n        clientSocket.disconnect();\n        done();\n      });\n    });\n\n    clientSocket.on('connect_error', (err) => {\n      done(err);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-heartbeat-direct.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Logger' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearIntervalSpy' is assigned a value but never used.","line":12,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ms' is defined but never used.","line":63,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2125,2128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2125,2128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2230,2233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2230,2233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3385,3388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3385,3388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3472,3475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3472,3475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3643,3646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3643,3646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3787,3790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3787,3790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":137,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3829,3832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3829,3832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4312,4315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4312,4315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5261,5264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5261,5264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5740,5743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5740,5743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":217,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6274,6277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6274,6277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6599,6602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6599,6602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6868,6871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6868,6871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6918,6921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6918,6921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":239,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7046,7049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7046,7049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7090,7093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7090,7093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7189,7192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7189,7192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7253,7256],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7253,7256],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7502,7505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7502,7505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":253,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7577,7580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7577,7580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7630,7633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7630,7633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7752,7755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7752,7755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":261,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":261,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7902,7905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7902,7905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8163,8166],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8163,8166],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":272,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8250,8253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8250,8253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8338,8341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8338,8341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8719,8722],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8719,8722],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":289,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8798,8801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8798,8801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9134,9137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9134,9137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { Logger } from '@nestjs/common';\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { WsJwtGuard } from '../src/modules/auth/guards/ws-jwt.guard';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\n\n// Mock setInterval to track intervals\nconst setIntervalSpy = jest.spyOn(global, 'setInterval') as jest.Mock;\nconst clearIntervalSpy = jest.spyOn(global, 'clearInterval') as jest.Mock;\n\n// Mock WsJwtGuard to avoid JWT validation in tests\njest.mock('../src/modules/auth/guards/ws-jwt.guard', () => ({\n  WsJwtGuard: jest.fn().mockImplementation(() => ({\n    canActivate: jest.fn().mockReturnValue(true),\n  })),\n}));\n\ndescribe('ChatGateway', () => {\n  let chatGateway: ChatGateway;\n  let mockPresenceService: jest.Mocked<PresenceService>;\n  let mockRtcGateway: jest.Mocked<RtcGateway>;\n  \n  // Mock Socket.IO server and client\n  const mockServer = {\n    emit: jest.fn(),\n    sockets: {\n      sockets: new Map(),\n    },\n  };\n  \n  const createMockSocket = (overrides: unknown = {}) => ({\n    id: 'test-socket-id',\n    connected: true,\n    data: {\n      user: {\n        userId: 'test-user-id',\n        username: 'testuser',\n      },\n    },\n    on: jest.fn(),\n    once: jest.fn(),\n    emit: jest.fn(),\n    disconnect: jest.fn(),\n    ...overrides,\n  });\n  \n  let mockSocket = createMockSocket();\n  \n  // Mock the setInterval function\n  let pingCallback: () => void;\n  \n  beforeEach(async () => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Reset the mock socket\n    mockSocket = createMockSocket();\n    \n    // Mock setInterval to capture the ping callback\n    setIntervalSpy.mockImplementation((callback: () => void, _ms: number) => {\n      pingCallback = callback;\n      return {} as NodeJS.Timeout;\n    });\n    \n    // Mock the presence service\n    mockPresenceService = {\n      updateUserPresence: jest.fn(),\n      getUserPresence: jest.fn(),\n    } as any;\n    \n    // Mock the RTC gateway\n    mockRtcGateway = {\n      registerWsServer: jest.fn(),\n    } as any;\n    \n    // Mock JWT and Config services\n    const mockJwtService = {\n      verifyAsync: jest.fn().mockResolvedValue({ userId: 'test-user-id' }),\n    };\n    \n    const mockConfigService = {\n      get: jest.fn().mockImplementation((key: string) => {\n        if (key === 'JWT_SECRET') return 'test-secret';\n        if (key === 'JWT_EXPIRES_IN') return '1h';\n        return null;\n      }),\n    };\n    \n    // Create testing module\n    const moduleRef = await Test.createTestingModule({\n      providers: [\n        ChatGateway,\n        {\n          provide: PresenceService,\n          useValue: mockPresenceService,\n        },\n        {\n          provide: RtcGateway,\n          useValue: mockRtcGateway,\n        },\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    })\n    .overrideGuard(WsJwtGuard)\n    .useValue({ canActivate: () => true })\n    .compile();\n\n    chatGateway = moduleRef.get<ChatGateway>(ChatGateway);\n    \n    // Initialize the missed pongs map after chatGateway is created\n    (chatGateway as any).missedPongs = new Map();\n    \n    // Mock the server property\n    (chatGateway as any).server = mockServer;\n    \n    // Initialize the gateway\n    chatGateway.onModuleInit();\n    \n    // Manually set up the ping interval for testing\n    (chatGateway as any).pingInterval = {} as NodeJS.Timeout;\n  });\n  \n  afterEach(() => {\n    // Clear all intervals\n    const intervals = [\n      (chatGateway as any)?.pingInterval,\n      (chatGateway as any)?.checkPongsInterval,\n    ];\n    \n    intervals.forEach(interval => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    });\n    \n    // Clear all mocks\n    jest.clearAllMocks();\n    \n    // Reset the mock socket\n    mockSocket = createMockSocket();\n  });\n  \n  it('should be defined', () => {\n    expect(chatGateway).toBeDefined();\n  });\n  \n  it('should initialize with ping interval', () => {\n    // Verify the ping interval is set up\n    expect((chatGateway as any).pingInterval).toBeDefined();\n    \n    // Verify setInterval was called with the correct parameters\n    expect(setIntervalSpy).toHaveBeenCalledWith(expect.any(Function), 30000);\n  });\n  \n  it('should handle connection and setup pong handler', () => {\n    // Reset the mock socket for this test\n    mockSocket = createMockSocket();\n    \n    // Mock the pong handler\n    const pongHandler = jest.fn();\n    mockSocket.on.mockImplementation((event: string, handler: unknown) => {\n      if (event === 'pong') {\n        pongHandler(handler);\n      }\n      return mockSocket;\n    });\n    \n    // Mock the disconnect handler\n    mockSocket.once.mockImplementation((event: string, handler: unknown) => {\n      if (event === 'disconnect') {\n        // Simulate disconnect after a short delay\n        setTimeout(() => handler(), 10);\n      }\n      return mockSocket;\n    });\n    \n    // Call handleConnection\n    chatGateway.handleConnection(mockSocket as any);\n    \n    // Verify presence was updated\n    expect(mockPresenceService.updateUserPresence).toHaveBeenCalledWith('test-user-id');\n    \n    // Verify userOnline event was emitted\n    expect(mockServer.emit).toHaveBeenCalledWith('userOnline', { userId: 'test-user-id' });\n    \n    // Verify pong handler was set up\n    expect(mockSocket.on).toHaveBeenCalledWith('pong', expect.any(Function));\n    \n    // Verify missed pongs counter was initialized\n    expect((chatGateway as any).missedPongs.get(mockSocket.id)).toBe(0);\n  });\n  \n  it('should handle pong messages', () => {\n    // Reset the mock socket for this test\n    mockSocket = createMockSocket();\n    \n    // Set up the pong handler\n    let pongHandler: (data: unknown) => void = () => {};\n    mockSocket.on.mockImplementation((event: string, handler: unknown) => {\n      if (event === 'pong') {\n        pongHandler = handler;\n      }\n      return mockSocket;\n    });\n    \n    // First connect the client\n    chatGateway.handleConnection(mockSocket as any);\n    \n    // Verify the pong handler was set up\n    expect(mockSocket.on).toHaveBeenCalledWith('pong', expect.any(Function));\n    \n    // Call the pong handler with a timestamp\n    const timestamp = Date.now();\n    pongHandler({ timestamp });\n    \n    // Verify missed pongs counter was reset\n    expect((chatGateway as any).missedPongs.get(mockSocket.id)).toBe(0);\n  });\n  \n  it('should disconnect client after missing pongs', () => {\n    // Reset the mock socket for this test\n    mockSocket = createMockSocket();\n    \n    // Manually set up the missed pongs counter\n    (chatGateway as any).missedPongs = new Map();\n    (chatGateway as any).missedPongs.set(mockSocket.id, 0);\n    \n    // Mock the checkPongs function\n    const originalCheckPongs = (chatGateway as any).checkStaleClients;\n    (chatGateway as any).checkStaleClients = jest.fn().mockImplementation(() => {\n      const missed = (chatGateway as any).missedPongs.get(mockSocket.id) || 0;\n      (chatGateway as any).missedPongs.set(mockSocket.id, missed + 1);\n      \n      if (missed >= 1) { // Set a lower threshold for testing\n        mockSocket.disconnect(true);\n      }\n    });\n    \n    // Connect the client\n    chatGateway.handleConnection(mockSocket as any);\n    \n    // First check - increment missed pongs\n    (chatGateway as any).checkStaleClients();\n    expect((chatGateway as any).missedPongs.get(mockSocket.id)).toBe(1);\n    \n    // Second check - should disconnect the client\n    (chatGateway as any).checkStaleClients();\n    expect(mockSocket.disconnect).toHaveBeenCalledWith(true);\n    \n    // Restore the original function\n    (chatGateway as any).checkStaleClients = originalCheckPongs;\n  });\n  \n  it('should clean up on disconnection', () => {\n    // Reset the mock socket for this test\n    mockSocket = createMockSocket();\n    \n    // Connect the client\n    chatGateway.handleConnection(mockSocket as any);\n    \n    // Disconnect the client\n    chatGateway.handleDisconnect(mockSocket as any);\n    \n    // Verify missed pongs counter was cleaned up\n    expect((chatGateway as any).missedPongs.has(mockSocket.id)).toBe(false);\n  });\n  \n  it('should send ping to connected clients', () => {\n    // Reset the mock socket for this test\n    mockSocket = createMockSocket({\n      connected: true,\n      data: { user: { userId: 'test-user' } },\n    });\n    \n    // Add socket to server's sockets map\n    mockServer.sockets.sockets.set('test-socket', mockSocket as any);\n    \n    // Manually set up the missed pongs counter\n    (chatGateway as any).missedPongs.set(mockSocket.id, 0);\n    \n    // Call the ping callback that was captured in beforeEach\n    pingCallback();\n    \n    // Verify ping was sent\n    expect(mockSocket.emit).toHaveBeenCalledWith('ping', { timestamp: expect.any(Number) });\n    \n    // Verify missed pongs counter was initialized\n    expect((chatGateway as any).missedPongs.get(mockSocket.id)).toBe(0);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-heartbeat-e2e.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AddressInfo' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'chatGateway' is assigned a value but never used.","line":16,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'io' is assigned a value but never used.","line":18,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":9}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\nimport { WsJwtGuard } from '../src/modules/auth/guards/ws-jwt.guard';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { createWsTestApp, createSocketClient } from './__utils__/websocket';\nimport type { Server as HttpServer } from 'http';\nimport { Server } from 'socket.io';\nimport { AddressInfo } from 'net';\n\ndescribe('ChatGateway (e2e)', () => {\n  let app: INestApplication;\n  let chatGateway: ChatGateway;\n  let httpServer: HttpServer;\n  let io: Server;\n  let port: number;\n  \n  // Mock services\n  const mockPresenceService = {\n    updateUserPresence: jest.fn(),\n    getUserPresence: jest.fn(),\n  };\n\n  const mockRtcGateway = {\n    registerWsServer: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleRef = await Test.createTestingModule({\n      providers: [\n        ChatGateway,\n        {\n          provide: PresenceService,\n          useValue: mockPresenceService,\n        },\n        {\n          provide: RtcGateway,\n          useValue: mockRtcGateway,\n        },\n        {\n          provide: JwtService,\n          useValue: {\n            verifyAsync: jest.fn().mockResolvedValue({ userId: 'test-user-id' }),\n          },\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn().mockImplementation((key: string) => {\n              if (key === 'JWT_SECRET') return 'test-secret';\n              if (key === 'JWT_EXPIRES_IN') return '1h';\n              return null;\n            }),\n          },\n        },\n      ],\n    })\n    .overrideGuard(WsJwtGuard)\n    .useValue({ canActivate: () => true })\n    .compile();\n\n    app = moduleRef.createNestApplication();\n    chatGateway = moduleRef.get<ChatGateway>(ChatGateway);\n    \n    // Set up WebSocket server\n    const wsConfig = await createWsTestApp(app);\n    httpServer = wsConfig.httpServer;\n    port = wsConfig.port;\n    \n    // Create Socket.IO server instance\n    io = new Server(httpServer);\n    \n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n    httpServer.close();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should establish WebSocket connection and handle ping/pong', async () => {\n    // Create a real socket.io client\n    const client = createSocketClient(port, {\n      auth: {\n        token: 'test-token',\n      },\n    });\n\n    // Wait for connection\n    await new Promise<void>((resolve) => {\n      client.on('connect', () => resolve());\n    });\n    \n    // Test ping/pong\n    const pongPromise = new Promise<boolean>((resolve) => {\n      client.on('ping', (data: { timestamp: number }) => {\n        client.emit('pong', { timestamp: data.timestamp });\n        resolve(true);\n      });\n    });\n\n    // Wait for ping and verify pong was sent\n    await expect(pongPromise).resolves.toBe(true);\n    \n    // Clean up\n    client.disconnect();\n  });\n\n  it('should disconnect client after missing pongs', async () => {\n    // Create a client that won't respond to pings\n    const client = createSocketClient(port, {\n      auth: { token: 'test-token' },\n    });\n\n    // Wait for connection\n    await new Promise<void>((resolve) => {\n      client.on('connect', () => resolve());\n    });\n    \n    // Wait for disconnect due to missed pongs\n    const disconnectPromise = new Promise<boolean>((resolve) => {\n      client.on('disconnect', (reason: string) => {\n        expect(reason).toBe('ping timeout');\n        resolve(true);\n      });\n    });\n\n    // Wait for disconnect\n    await expect(disconnectPromise).resolves.toBe(true);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-heartbeat.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Test' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'INestApplication' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MockIoAdapter' is defined but never used.","line":52,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'port' is defined but never used.","line":53,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":53,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1539,1542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1539,1542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { WebSocketGateway, WebSocketServer, OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { EventEmitter } from 'events';\nimport { attachMockServer } from '../utils/gateway';\n\n// Simple mock for socket.io-client\nconst mockSocket = {\n  id: 'test-socket-123',\n  connected: true,\n  disconnected: false,\n  on: jest.fn(),\n  emit: jest.fn(),\n  disconnect: jest.fn()\n};\n\n// Mock the socket.io-client module\njest.mock('socket.io-client', () => ({\n  io: jest.fn(() => mockSocket)\n}));\n\n\n\n// Test Gateway for WebSocket testing\n@WebSocketGateway()\nclass TestHeartbeatGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  @WebSocketServer() server: unknown;\n  \n  handleConnection(client: unknown) {\n    console.log('Client connected:', client.id);\n    if (this.server && this.server.sockets) {\n      this.server.sockets.set(client.id, client);\n    }\n  }\n  \n  handleDisconnect(client: unknown) {\n    console.log('Client disconnected:', client.id);\n    if (this.server && this.server.sockets) {\n      this.server.sockets.delete(client.id);\n    }\n  }\n  \n  sendPing(client: unknown) {\n    if (client && typeof client.emit === 'function') {\n      client.emit('ping', { timestamp: Date.now() });\n    }\n  }\n}\n\n// Mock IoAdapter\nclass MockIoAdapter extends IoAdapter {\n  createIOServer(port: number, options?: unknown): unknown {\n    const server = new EventEmitter() as any;\n    server.sockets = {\n      sockets: new Map(),\n    };\n    return server;\n  }\n}\n\ndescribe('WebSocket Heartbeat', () => {\n  let gateway: TestHeartbeatGateway;\n  \n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n    \n    // Create a new instance of the gateway for each test\n    gateway = new TestHeartbeatGateway();\n    attachMockServer(gateway, {\n      sockets: new Map()\n    });\n  });\n\n  it('should handle connection', () => {\n    const mockClient = { id: 'test-client' };\n    gateway.handleConnection(mockClient);\n    expect(gateway.server.sockets.has(mockClient.id)).toBe(true);\n  });\n\n  it('should handle disconnection', () => {\n    const mockClient = { id: 'test-client' };\n    gateway.handleConnection(mockClient);\n    gateway.handleDisconnect(mockClient);\n    expect(gateway.server.sockets.has(mockClient.id)).toBe(false);\n  });\n\n  it('should send ping to client', () => {\n    const mockClient = { \n      id: 'test-client',\n      emit: jest.fn() \n    };\n    gateway.server.sockets.set(mockClient.id, mockClient);\n    \n    gateway.sendPing(mockClient);\n    \n    expect(mockClient.emit).toHaveBeenCalledWith('ping', {\n      timestamp: expect.any(Number)\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-heartbeat.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PresenceService' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'RtcGateway' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ms' is defined but never used.","line":22,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2434,2437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2434,2437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2835,2838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2835,2838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3315,3318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3315,3318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":126,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3574,3577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3574,3577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3792,3795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3792,3795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4086,4089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4086,4089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4249,4252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4249,4252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4333,4336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4333,4336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4432,4435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4432,4435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Simple test file to verify WebSocket heartbeat functionality\n\nimport { ChatGateway } from '../src/modules/chat/chat.gateway';\nimport { PresenceService } from '../src/modules/presence/presence.service';\nimport { RtcGateway } from '../src/modules/rtc/rtc.gateway';\n\ndescribe('WebSocket Heartbeat', () => {\n  let gateway: ChatGateway;\n  let mockPresenceService: unknown;\n  let mockRtcGateway: unknown;\n  let mockServer: unknown;\n  let mockSocket: unknown;\n  let originalSetInterval: unknown;\n  let originalClearInterval: unknown;\n  let mockTimers: { id: NodeJS.Timeout; callback: () => void }[] = [];\n\n  beforeEach(() => {\n    // Mock timers\n    originalSetInterval = global.setInterval;\n    originalClearInterval = global.clearInterval;\n    \n    global.setInterval = (callback: () => void, ms: number) => {\n      const id = { } as unknown as NodeJS.Timeout;\n      mockTimers.push({ id, callback });\n      return id;\n    };\n    \n    global.clearInterval = (id: NodeJS.Timeout) => {\n      mockTimers = mockTimers.filter(timer => timer.id !== id);\n    };\n\n    // Mock services\n    mockPresenceService = {\n      updateUserPresence: jest.fn(),\n      removeUserPresence: jest.fn(),\n      isOnline: jest.fn(),\n    };\n\n    mockRtcGateway = {\n      registerWsServer: jest.fn(),\n    };\n\n    // Create gateway instance\n    gateway = new ChatGateway(\n      mockPresenceService,\n      mockRtcGateway,\n    );\n\n    // Mock WebSocket server\n    mockServer = {\n      emit: jest.fn(),\n      to: jest.fn().mockReturnThis(),\n    };\n    gateway['server'] = mockServer;\n\n    // Mock socket\n    mockSocket = {\n      id: 'test-socket-1',\n      data: {\n        user: {\n          userId: 'test-user-1',\n          email: 'test@example.com',\n          name: 'Test User',\n        },\n      },\n      emit: jest.fn(),\n      join: jest.fn(),\n      leave: jest.fn(),\n      disconnect: jest.fn(),\n    };\n  });\n\n  afterEach(() => {\n    // Restore original timers\n    global.setInterval = originalSetInterval as typeof global.setInterval;\n    global.clearInterval = originalClearInterval as typeof global.clearInterval;\n    mockTimers = [];\n    jest.clearAllMocks();\n  });\n\n  it('should initialize with ping interval', () => {\n    // The ping interval should be set up in the constructor\n    expect(gateway['pingInterval']).toBeDefined();\n  });\n\n  it('should send ping to connected clients', () => {\n    // Simulate connection\n    gateway.handleConnection(mockSocket as any);\n    \n    // Get the ping interval callback\n    const pingInterval = mockTimers[0];\n    expect(pingInterval).toBeDefined();\n    \n    // Mock Date.now()\n    const originalDateNow = Date.now;\n    const mockTimestamp = 1000;\n    Date.now = jest.fn(() => mockTimestamp);\n    \n    // Trigger the ping interval\n    pingInterval.callback();\n    \n    // Should have sent a ping\n    expect((mockSocket as any).emit).toHaveBeenCalledWith('ping', { timestamp: mockTimestamp });\n    \n    // Restore Date.now\n    Date.now = originalDateNow;\n  });\n\n  it('should handle pong response', () => {\n    // Simulate connection\n    gateway.handleConnection(mockSocket as any);\n    \n    // Mock Date.now()\n    const originalDateNow = Date.now;\n    const mockTimestamp = 1000;\n    Date.now = jest.fn(() => mockTimestamp);\n    \n    // Simulate receiving a pong\n    const pingCallback = (mockSocket as any).emit.mock.calls[0][1];\n    expect(typeof pingCallback).toBe('function');\n    \n    // Call the pong handler\n    pingCallback({ timestamp: mockTimestamp });\n    \n    // Should reset missed pongs counter\n    expect(gateway['missedPongs'].get((mockSocket as any).id)).toBe(0);\n    \n    // Restore Date.now\n    Date.now = originalDateNow;\n  });\n\n  it('should disconnect client after missing pongs', () => {\n    // Simulate connection\n    gateway.handleConnection(mockSocket as any);\n    \n    // Get the ping interval callback\n    const pingInterval = mockTimers[0];\n    \n    // Trigger ping interval 3 times (missing 2 pongs)\n    for (let i = 0; i < 3; i++) {\n      pingInterval.callback();\n    }\n    \n    // Should have disconnected the client\n    expect((mockSocket as any).disconnect).toHaveBeenCalled();\n  });\n\n  it('should clean up on disconnection', () => {\n    // Simulate connection\n    gateway.handleConnection(mockSocket as any);\n    \n    // Simulate disconnection\n    gateway.handleDisconnect(mockSocket as any);\n    \n    // Should clean up client data\n    expect(gateway['missedPongs'].has((mockSocket as any).id)).toBe(false);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-minimal.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[184,187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[184,187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[199,202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[199,202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[905,908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[905,908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1031,1034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1031,1034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-types","severity":2,"message":"Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","line":40,"column":47,"nodeType":"Identifier","messageId":"bannedTypeMessage","endLine":40,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1944,1947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1944,1947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2390,2393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2390,2393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport { io as Client } from 'socket.io-client';\n\ndescribe('Minimal WebSocket Test', () => {\n  let httpServer: any;\n  let io: any;\n  let port: number;\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create Socket.IO server\n    io = new Server(httpServer);\n    \n    // Start listening on a random port\n    httpServer.listen(0, () => {\n      port = httpServer.address().port;\n      console.log(`Test server listening on port ${port}`);\n      done();\n    });\n  });\n\n  afterAll((done) => {\n    // Close everything\n    io.close();\n    httpServer.close(() => {\n      console.log('Test server closed');\n      done();\n    });\n  });\n\n  test('should handle client connection', (done) => {\n    // Set up server-side handler using the 'sockets' namespace\n    io.sockets.on('connection', (socket: any) => {\n      console.log('Client connected:', socket.id);\n      \n      // Handle ping event\n      socket.on('ping', (data: any, callback: Function) => {\n        console.log('Server received ping:', data);\n        if (typeof callback === 'function') {\n          callback({ ...data, timestamp: Date.now() });\n        }\n      });\n      \n      // Handle disconnection\n      socket.on('disconnect', () => {\n        console.log('Client disconnected:', socket.id);\n      });\n    });\n\n    // Create client with explicit options\n    const client = Client(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n      forceNew: true\n    });\n    \n    // Set a timeout for the test\n    const testTimeout = setTimeout(() => {\n      client.disconnect();\n      done(new Error('Test timeout'));\n    }, 5000);\n    \n    client.on('connect', () => {\n      console.log('Client connected to server');\n      \n      // Test ping-pong\n      const testData = { message: 'test' };\n      client.emit('ping', testData, (response: any) => {\n        try {\n          expect(response).toBeDefined();\n          expect(response.message).toBe(testData.message);\n          expect(response.timestamp).toBeDefined();\n          clearTimeout(testTimeout);\n          client.disconnect();\n          done();\n        } catch (err) {\n          clearTimeout(testTimeout);\n          client.disconnect();\n          done(err);\n        }\n      });\n    });\n    \n    client.on('connect_error', (err: any) => {\n      clearTimeout(testTimeout);\n      client.disconnect();\n      done(err);\n    });\n    \n    client.on('disconnect', () => {\n      console.log('Client disconnected from server');\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-server.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[154,157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[154,157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[177,180],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[177,180],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { io, Socket } from 'socket.io-client';\nimport { createWsTestApp } from './websocket-test.setup';\n\ndescribe('WebSocket Server', () => {\n  let app: any;\n  let httpServer: any;\n  let clientSocket: Socket;\n  let wsPort: number;\n\n  beforeAll(async () => {\n    // Create test application with WebSocket support\n    const testApp = await createWsTestApp();\n    app = testApp.app;\n    httpServer = testApp.httpServer;\n    \n    // Start listening on a random port\n    await new Promise<void>((resolve) => {\n      httpServer.listen(0, () => {\n        const address = httpServer.address();\n        if (typeof address === 'string' || !address) {\n          throw new Error('Could not get server address');\n        }\n        wsPort = address.port;\n        process.env.WS_PORT = wsPort.toString();\n        console.log(`Test WebSocket server listening on port ${wsPort}`);\n        resolve();\n      });\n    });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach((done) => {\n    // Create a client connection for each test\n    clientSocket = io(`http://localhost:${wsPort}`, {\n      transports: ['websocket'],\n      forceNew: true,\n      reconnection: false\n    });\n\n    clientSocket.on('connect', () => {\n      done();\n    });\n\n    clientSocket.on('connect_error', (err: Error) => {\n      console.error('Connection error:', err);\n      done.fail('Failed to connect to WebSocket server');\n    });\n  });\n\n  afterEach((done) => {\n    if (clientSocket.connected) {\n      clientSocket.disconnect();\n    }\n    done();\n  });\n\n  it('should connect and disconnect', (done) => {\n    expect(clientSocket.connected).toBe(true);\n    clientSocket.disconnect();\n    expect(clientSocket.connected).toBe(false);\n    done();\n  });\n\n  it('should send and receive messages', (done) => {\n    const testMessage = 'Hello, WebSocket!';\n\n    clientSocket.emit('message', testMessage);\n\n    clientSocket.on('message', (data: string) => {\n      expect(data).toBe(`Echo: ${testMessage}`);\n      done();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-simple-smoke.legacy.skip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-simple.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'IoAdapter' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Socket' is defined but never used.","line":5,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1205,1208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1205,1208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'io' is assigned a value but never used.","line":45,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":9},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1867,1870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1867,1870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reason' is defined but never used.","line":96,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":38}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Test } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Server } from 'socket.io';\nimport { io as clientIo, Socket } from 'socket.io-client';\nimport { AppModule } from '../src/app.module';\n\nasync function createTestApp() {\n  const moduleFixture = await Test.createTestingModule({\n    imports: [AppModule],\n  }).compile();\n\n  const app = moduleFixture.createNestApplication();\n  \n  // Use Socket.IO with HTTP server\n  const httpServer = await app.listen(0);\n  const io = new Server(httpServer, {\n    cors: {\n      origin: '*',\n      methods: ['GET', 'POST'],\n    },\n  });\n  \n  // Simple echo handler for testing\n  io.on('connection', (socket) => {\n    console.log('Test WebSocket client connected');\n    \n    socket.on('echo', (data, callback) => {\n      if (typeof callback === 'function') {\n        callback({ ...data, timestamp: Date.now() });\n      }\n    });\n    \n    socket.on('disconnect', () => {\n      console.log('Test WebSocket client disconnected');\n    });\n  });\n  \n  return { app, httpServer, io };\n}\n\ndescribe('WebSocket (Simple Test)', () => {\n  let app: INestApplication;\n  let httpServer: any;\n  let io: Server;\n  let port: number;\n  \n  beforeAll(async () => {\n    const testApp = await createTestApp();\n    app = testApp.app;\n    httpServer = testApp.httpServer;\n    io = testApp.io;\n    port = httpServer.address().port;\n  });\n  \n  afterAll(async () => {\n    await app.close();\n  });\n  \n  it('should connect and echo a message', (done) => {\n    const socket = clientIo(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n    });\n    \n    socket.on('connect', () => {\n      expect(socket.connected).toBe(true);\n      \n      const testMessage = { test: 'data' };\n      socket.emit('echo', testMessage, (response: any) => {\n        try {\n          expect(response).toHaveProperty('test', 'data');\n          expect(response).toHaveProperty('timestamp');\n          socket.disconnect();\n          done();\n        } catch (err) {\n          done(err);\n        }\n      });\n    });\n    \n    socket.on('connect_error', (err) => {\n      done(err);\n    });\n  });\n  \n  it('should handle disconnection', (done) => {\n    const socket = clientIo(`http://localhost:${port}`, {\n      transports: ['websocket'],\n      reconnection: false,\n    });\n    \n    socket.on('connect', () => {\n      expect(socket.connected).toBe(true);\n      \n      socket.on('disconnect', (reason) => {\n        expect(socket.connected).toBe(false);\n        done();\n      });\n      \n      socket.disconnect();\n    });\n    \n    socket.on('connect_error', (err) => {\n      done(err);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-simple.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-smoke.legacy.skip.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/websocket/ws-test.adapter.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":5,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[220,223],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[220,223],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { IoAdapter } from '@nestjs/platform-socket.io';\nimport { Server, ServerOptions, Socket } from 'socket.io';\n\nexport class WsTestAdapter extends IoAdapter {\n  createIOServer(port: number, options?: ServerOptions): any {\n    const server: Server = super.createIOServer(port, {\n      ...options,\n      cors: {\n        origin: '*',\n        methods: ['GET', 'POST'],\n        credentials: true,\n      },\n    });\n\n    // Add any test-specific WebSocket server logic here\n    server.on('connection', (socket: Socket) => {\n      console.log('Test WebSocket client connected');\n      \n      // Example: Echo back any message\n      socket.on('echo', (data, callback) => {\n        if (typeof callback === 'function') {\n          callback({ ...data, timestamp: Date.now() });\n        }\n      });\n\n      socket.on('disconnect', () => {\n        console.log('Test WebSocket client disconnected');\n      });\n    });\n\n    return server;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/ws.legacy.skip.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'WebSocketServer' is defined but never used.","line":1,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createWebSocketClient' is defined but never used.","line":14,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reason' is defined but never used.","line":89,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":44},{"ruleId":"prefer-const","severity":2,"message":"'ws' is never reassigned. Use 'const' instead.","line":179,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":179,"endColumn":22}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\n\n// Use the real WebSocket implementation for these tests\nconst WebSocket = WebSocketModule.WebSocket;\ntype WebSocket = WebSocketModule.WebSocket;\n\n// Helper to ensure we're using the real WebSocket implementation\nfunction createWebSocket(url: string): WebSocket {\n  // Force use of actual WebSocket implementation\n  return new WebSocketModule.WebSocket(url);\n}\n\n// Helper function to create a WebSocket client\nfunction createWebSocketClient(url: string): Promise<WebSocket> {\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocketModule.WebSocket(url);\n    \n    ws.on('open', () => resolve(ws));\n    ws.on('error', reject);\n  });\n}\n\ndescribe('WebSocket Server', () => {\n  let server: HttpServer;\n  let wss: WebSocketModule.Server;\n  let port: number;\n  const TEST_TIMEOUT = 5000; // 5 seconds for tests to complete\n  \n  // Increase Jest timeout for all tests in this suite\n  jest.setTimeout(10000); // 10 seconds\n  \n  beforeAll((done) => {\n    console.log('Setting up WebSocket server for tests...');\n    \n    // Create HTTP server\n    server = createServer();\n    \n    // Create WebSocket server with explicit options\n    const options: WebSocketModule.ServerOptions = {\n      server,\n      clientTracking: true,\n      maxPayload: 10 * 1024 * 1024, // 10MB\n    };\n    \n    // Create WebSocket server with explicit typing\n    wss = new WebSocketModule.Server(options);\n    \n    // Start server on a random available port\n    server.listen(0, '127.0.0.1', () => {\n      const address = server.address();\n      if (address && typeof address !== 'string') {\n        port = address.port;\n        console.log(`Test WebSocket server running on ws://127.0.0.1:${port}`);\n      }\n      done();\n    });\n    \n    // Simple echo server with basic message handling\n    wss.on('connection', (ws: WebSocket) => {\n      console.log('Server: Client connected');\n      \n      // Handle incoming messages\n      const onMessage = (message: WebSocketModule.RawData) => {\n        try {\n          const msg = message.toString();\n          console.log('Server: Received message:', msg);\n          \n          // Echo the message back if connection is still open\n          if (ws.readyState === 1) { // 1 = OPEN\n            const response = `Echo: ${msg}`;\n            console.log('Server: Sending echo:', response);\n            \n            ws.send(response, (error) => {\n              if (error) {\n                console.error('Server: Error sending echo:', error);\n              } else {\n                console.log('Server: Echo sent successfully');\n              }\n            });\n          }\n        } catch (error) {\n          console.error('Server: Error processing message:', error);\n        }\n      };\n      \n      ws.on('message', onMessage);\n      \n      // Handle client disconnection\n      const onClose = (code: number, reason: Buffer) => {\n        console.log(`Server: Client disconnected (code: ${code})`);\n        ws.off('message', onMessage);\n        ws.off('close', onClose);\n        ws.off('error', onError);\n      };\n      \n      ws.on('close', onClose);\n\n      // Handle errors\n      const onError = (error: Error) => {\n        console.error('Server: WebSocket error:', error);\n      };\n      \n      ws.on('error', onError);\n      \n      // Send a welcome message to the client\n      if (ws.readyState === 1) {\n        const welcomeMsg = JSON.stringify({ type: 'welcome', message: 'Connected to WebSocket server' });\n        console.log('Server: Sending welcome message');\n        ws.send(welcomeMsg);\n      }\n    });\n  });\n  \n  afterAll((done) => {\n    // Close all clients\n    wss.clients.forEach((client: WebSocket) => {\n      if (client.readyState === 1) { // 1 = OPEN\n        client.terminate();\n      }\n    });\n    \n    // Close server\n    wss.close(() => {\n      server.close(done);\n    });\n  });\n  \n  it('should establish a WebSocket connection', (done) => {\n    console.log('\\n--- Starting connection test ---');\n    const ws = createWebSocket(`ws://127.0.0.1:${port}`);\n    \n    const timeout = setTimeout(() => {\n      console.error('Connection test: Timeout waiting for connection');\n      if (ws.readyState === 1) {\n        ws.close();\n      }\n      done(new Error('Connection test timeout'));\n    }, TEST_TIMEOUT);\n    \n    const onOpen = () => {\n      console.log('Connection test: Client connected successfully');\n      \n      // Verify connection is open\n      expect(ws.readyState).toBe(1); // 1 = OPEN\n      \n      // Clean up event listeners\n      ws.off('open', onOpen);\n      ws.off('error', onError);\n      \n      // Close the connection\n      ws.close(1000, 'Test complete');\n    };\n    \n    const onError = (error: Error) => {\n      console.error('Connection test: Client error:', error);\n      clearTimeout(timeout);\n      ws.off('open', onOpen);\n      ws.off('error', onError);\n      if (ws.readyState === 1) {\n        ws.close();\n      }\n      done(error);\n    };\n    \n    const onClose = () => {\n      console.log('Connection test: Connection closed');\n      clearTimeout(timeout);\n      done();\n    };\n    \n    ws.on('open', onOpen);\n    ws.on('error', onError);\n    ws.on('close', onClose);\n  });\n  \n  it('should echo messages', (done) => {\n    console.log('\\n--- Starting echo test ---');\n    const testMessage = 'Hello, WebSocket!';\n    let ws: WebSocket;\n    let messageReceived = false;\n    \n    const timeout = setTimeout(() => {\n      console.error('Echo test: Timeout waiting for echo');\n      if (ws && ws.readyState === 1) {\n        ws.close();\n      }\n      if (!messageReceived) {\n        done(new Error('Echo test timeout - no response received'));\n      }\n    }, TEST_TIMEOUT);\n    \n    const cleanup = () => {\n      clearTimeout(timeout);\n      if (ws) {\n        ws.off('message', onMessage);\n        ws.off('open', onOpen);\n        ws.off('error', onError);\n        ws.off('close', onClose);\n      }\n    };\n    \n    const onMessage = (data: WebSocketModule.RawData) => {\n      const message = data.toString();\n      console.log('Echo test: Client received:', message);\n      \n      try {\n        // Check if this is our echo (ignore welcome messages)\n        if (message.includes('Echo:')) {\n          messageReceived = true;\n          expect(message).toContain(testMessage);\n          cleanup();\n          ws.close(1000, 'Test complete');\n          done();\n        }\n      } catch (error) {\n        cleanup();\n        ws.close();\n        done(error as Error);\n      }\n    };\n    \n    const onError = (error: Error) => {\n      console.error('Echo test: Client error:', error);\n      cleanup();\n      done(error);\n    };\n    \n    const onClose = () => {\n      console.log('Echo test: Connection closed');\n      if (!messageReceived) {\n        done(new Error('Connection closed before receiving echo'));\n      }\n    };\n    \n    const onOpen = () => {\n      console.log('Echo test: Client connected, sending message:', testMessage);\n      \n      ws.send(testMessage, (error) => {\n        if (error) {\n          console.error('Echo test: Error sending message:', error);\n          cleanup();\n          ws.close();\n          done(error);\n        } else {\n          console.log('Echo test: Message sent successfully');\n        }\n      });\n    };\n    \n    // Create the WebSocket connection\n    ws = createWebSocket(`ws://127.0.0.1:${port}`);\n    ws.on('open', onOpen);\n    ws.on('message', onMessage);\n    ws.on('error', onError);\n    ws.on('close', onClose);\n  });\n  \n  it('should handle multiple concurrent connections', (done) => {\n    console.log('Starting concurrent connections test...');\n    const numClients = 2; // Reduced from 3 to 2 for stability\n    const testMessage = 'Concurrent test';\n    \n    // Function to create a test client\n    const createTestClient = (clientId: number) => {\n      return new Promise<void>((resolve, reject) => {\n        const client = new WebSocket(`ws://127.0.0.1:${port}`);\n        let receivedResponse = false;\n        \n        const timeout = setTimeout(() => {\n          if (!receivedResponse && client.readyState === 1) {\n            console.error(`Client ${clientId} timeout`);\n            client.close();\n            reject(new Error(`Client ${clientId} timeout - no response received`));\n          }\n        }, TEST_TIMEOUT);\n        \n        client.on('open', () => {\n          console.log(`Client ${clientId} connected`);\n          \n          // Set up message handler\n          const onMessage = (data: WebSocketModule.RawData) => {\n            const message = data.toString();\n            \n            if (message.includes('Echo:')) {\n              receivedResponse = true;\n              console.log(`Client ${clientId} received:`, message);\n              \n              try {\n                expect(message).toContain(testMessage);\n                clearTimeout(timeout);\n                client.off('message', onMessage);\n                client.close(1000, 'Test complete');\n                resolve();\n              } catch (error) {\n                clearTimeout(timeout);\n                client.off('message', onMessage);\n                client.close();\n                reject(error);\n              }\n            }\n          };\n          \n          client.on('message', onMessage);\n          \n          // Send test message\n          const clientMessage = `${testMessage} from client ${clientId}`;\n          console.log(`Client ${clientId} sending:`, clientMessage);\n          client.send(clientMessage, (error) => {\n            if (error) {\n              clearTimeout(timeout);\n              console.error(`Client ${clientId} send error:`, error);\n              client.close();\n              reject(error);\n            }\n          });\n        });\n        \n        client.on('error', (error: Error) => {\n          clearTimeout(timeout);\n          console.error(`Client ${clientId} error:`, error);\n          client.close();\n          reject(error);\n        });\n        \n        client.on('close', () => {\n          console.log(`Client ${clientId} connection closed`);\n        });\n      });\n    };\n    \n    // Create multiple clients with a small delay between them\n    const clientPromises = [];\n    for (let i = 0; i < numClients; i++) {\n      // Add a small delay between client connections\n      const promise = new Promise<void>((resolve) => \n        setTimeout(() => resolve(createTestClient(i + 1)), i * 100)\n      );\n      clientPromises.push(promise);\n    }\n    \n    // Wait for all clients to complete\n    Promise.all(clientPromises)\n      .then(() => {\n        console.log('All clients completed successfully');\n        done();\n      })\n      .catch((error) => {\n        console.error('Error in concurrent test:', error);\n        done(error);\n      });\n  });\n  \n  it('should handle client disconnection', (done) => {\n    console.log('Starting disconnection test...');\n    const ws = new WebSocket(`ws://127.0.0.1:${port}`);\n    \n    const timeout = setTimeout(() => {\n      console.error('Disconnection test timeout');\n      if (ws.readyState === 1) {\n        ws.close();\n      }\n      done(new Error('Disconnection test timeout'));\n    }, TEST_TIMEOUT);\n    \n    ws.on('open', () => {\n      console.log('Disconnection test: Client connected');\n      \n      // Close the connection after a short delay\n      setTimeout(() => {\n        console.log('Disconnection test: Closing client connection');\n        ws.close(1000, 'Test complete');\n      }, 100);\n    });\n    \n    ws.on('close', (code, reason) => {\n      console.log(`Disconnection test: Client disconnected (code: ${code})`);\n      try {\n        expect(code).toBe(1000);\n        // Only check reason if it exists (some WebSocket implementations might not provide it)\n        if (reason) {\n          const reasonStr = Buffer.isBuffer(reason) ? reason.toString() : reason;\n          expect(reasonStr).toBe('Test complete');\n        }\n        clearTimeout(timeout);\n        done();\n      } catch (error) {\n        clearTimeout(timeout);\n        done(error);\n      }\n    });\n    \n    ws.on('error', (error) => {\n      console.error('Disconnection test error:', error);\n      clearTimeout(timeout);\n      ws.close();\n      done(error);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/server/test/ws.simple.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockWebSocket' is defined but never used.","line":29,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2361,2364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2361,2364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockSocket' is assigned a value but never used.","line":94,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":94,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2395,2398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2395,2398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'mockHead' is assigned a value but never used.","line":95,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2427,2430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2427,2430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import WebSocket, { Server as WebSocketServer } from 'ws';\nimport { createServer, Server as HttpServer } from 'http';\n\n// Mock the WebSocket client\njest.mock('ws', () => {\n  return {\n    WebSocket: jest.fn().mockImplementation(() => ({\n      on: jest.fn((event, callback) => {\n        if (event === 'open') {\n          setTimeout(callback, 0);\n        } else if (event === 'message') {\n          // Simulate receiving a message\n          setTimeout(() => callback('Echo: Test message'), 0);\n        }\n      }),\n      send: jest.fn(),\n      close: jest.fn(),\n      terminate: jest.fn()\n    })),\n    __esModule: true,\n    ...jest.requireActual('ws')\n  };\n});\n\ndescribe('WebSocket Server', () => {\n  let httpServer: HttpServer;\n  let wss: WebSocketServer;\n  const TEST_PORT = 3001;\n  let mockWebSocket: jest.Mocked<WebSocket>;\n\n  beforeAll((done) => {\n    // Create HTTP server\n    httpServer = createServer();\n    \n    // Create WebSocket server\n    wss = new WebSocketServer({ server: httpServer });\n    \n    // Start the server\n    httpServer.listen(TEST_PORT, () => {\n      console.log(`Test WebSocket server running on port ${TEST_PORT}`);\n      done();\n    });\n  });\n  \n  afterAll((done) => {\n    // Close WebSocket server\n    if (wss) {\n      wss.close(() => {\n        console.log('WebSocket server closed');\n        \n        // Close HTTP server\n        if (httpServer) {\n          httpServer.close(() => {\n            console.log('HTTP server closed');\n            done();\n          });\n        } else {\n          done();\n        }\n      });\n    } else {\n      done();\n    }\n  });\n\n  it('should create a WebSocket server', () => {\n    expect(wss).toBeDefined();\n    expect(wss instanceof WebSocketServer).toBe(true);\n  });\n\n  it('should handle WebSocket connections', (done) => {\n    // Set up a mock WebSocket client\n    const mockClient = {\n      send: jest.fn(),\n      on: jest.fn()\n    };\n\n    // Set up WebSocket server handler\n    wss.on('connection', (ws) => {\n      // Verify connection is established\n      expect(ws).toBeDefined();\n      \n      // Test message handling\n      const testMessage = 'Test message';\n      ws.send(`Echo: ${testMessage}`);\n      \n      // Verify the message was sent\n      expect(ws.send).toHaveBeenCalledWith(`Echo: ${testMessage}`);\n      done();\n    });\n\n    // Simulate a connection\n    const mockRequest = {} as any;\n    const mockSocket = {} as any;\n    const mockHead = {} as any;\n    \n    // Trigger the connection event\n    wss.emit('connection', mockClient, mockRequest);\n  });\n\n  it('should handle incoming messages', (done) => {\n    // Set up a mock WebSocket client\n    const mockClient = {\n      send: jest.fn(),\n      on: jest.fn(),\n      readyState: 1 // WebSocket.OPEN\n    };\n\n    // Set up WebSocket server handler\n    wss.on('connection', (ws) => {\n      // Create a mock message handler\n      const messageHandler = jest.fn((message) => {\n        // Verify the message was received\n        expect(message).toBe('Test message');\n        \n        // Test sending a response\n        ws.send(`Echo: ${message}`);\n        \n        // Verify the message was sent\n        expect(ws.send).toHaveBeenCalledWith('Echo: Test message');\n        \n        done();\n      });\n      \n      // Add the message handler\n      ws.on('message', messageHandler);\n      \n      // Directly call the message handler with test data\n      messageHandler('Test message');\n    });\n\n    // Trigger the connection event\n    wss.emit('connection', mockClient);\n    \n    // Verify the connection was handled\n    expect(mockClient.on).toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useChatMessages.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useChatThreads.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useDashboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\n\n/**\n * Mock implementation of useDashboard hook for testing purposes\n * In a real application, this would fetch dashboard data from an API\n */\nexport const useDashboard = () => {\n  // Mock data for testing\n  const dashboardData = {\n    stats: {\n      totalFiles: 0,\n      totalStorage: \"0 MB\",\n      recentActivity: [],\n    },\n    isLoading: false,\n    error: null,\n  };\n\n  return dashboardData;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useFileTransferWS.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useFileUpload.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useFriendRequests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useFriends.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useSendMessage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useTransferActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/useTransfers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/hooks/withAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/lib/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/src/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/types/index.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/shared/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Outlet' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":9}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n  Outlet,\n} from \"react-router-dom\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"next-themes\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport FileShare from \"@/pages/FileShare\";\nimport History from \"@/pages/History\";\nimport FriendsPage from \"@/pages/Friends\";\nimport ChatPage from \"@/pages/Chat\";\nimport LandingPage from \"@/pages/LandingPage\";\nimport Register from \"@/pages/Register\";\nimport SignIn from \"@/pages/SignIn\";\nimport PendingApproval from \"@/pages/PendingApproval\";\nimport Admin from \"@/pages/Admin\";\nimport AccountSettings from \"@/pages/settings/AccountSettings\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  // Set theme class on mount\n  useEffect(() => {\n    document.documentElement.classList.add(\"dark\");\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n  }, []);\n\n  return (\n    <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem={false}>\n      <Router>\n        <Routes>\n          {/* Public routes without layout */}\n          <Route path=\"/landing\" element={<LandingPage />} />\n          <Route path=\"/register\" element={<Register />} />\n          <Route path=\"/signin\" element={<SignIn />} />\n          <Route path=\"/pending-approval\" element={<PendingApproval />} />\n\n          {/* Main app routes with layout */}\n          <Route\n            element={\n              <ProtectedRoute requireApproved={true}>\n                <Layout />\n              </ProtectedRoute>\n            }\n          >\n            <Route index element={<Navigate to=\"/dashboard\" replace />} />\n            <Route path=\"dashboard\" element={<Dashboard />} />\n            <Route path=\"files\" element={<FileShare />} />\n            <Route path=\"history\" element={<History />} />\n            <Route path=\"friends\" element={<FriendsPage />} />\n            <Route path=\"chat\" element={<ChatPage />} />\n            <Route path=\"settings\" element={<AccountSettings />} />\n            <Route path=\"admin\" element={<Admin />} />\n          </Route>\n\n          {/* Catch-all route */}\n          <Route path=\"*\" element={<Navigate to=\"/landing\" replace />} />\n        </Routes>\n        <Toaster />\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/bridge/juce.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","line":13,"column":1,"nodeType":"Line","messageId":"tsIgnoreInsteadOfExpectError","endLine":13,"endColumn":52,"suggestions":[{"messageId":"replaceTsIgnoreWithTsExpectError","fix":{"range":[466,517],"text":"// @ts-expect-error – expose globally for quick debugging"},"desc":"Replace \"@ts-ignore\" with \"@ts-expect-error\"."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/FileTransfer/FileTransfer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/Friends.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FriendRequest' is defined but never used.","line":19,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\n// Define user type\ntype User = {\n  id: string;\n  name: string;\n  status: \"online\" | \"offline\" | \"away\" | \"busy\";\n  lastSeen?: string;\n  friends?: string[];\n  friendRequests?: {\n    received: Array<{ id: string; senderId: string }>;\n    sent: Array<{ id: string; receiverId: string }>;\n  };\n};\n\ntype FriendTab = \"all\" | \"online\" | \"pending\" | \"add\";\n\ntype FriendRequest = {\n  id: string;\n  senderId: string;\n  receiverId: string;\n  status: \"pending\" | \"accepted\" | \"declined\";\n};\n\n// Mock data for now - replace with real store later\nconst mockUsers: User[] = [\n  {\n    id: \"1\",\n    name: \"John Doe\",\n    status: \"online\",\n    friends: [\"current-user\"],\n    friendRequests: { received: [], sent: [] },\n  },\n  {\n    id: \"2\",\n    name: \"Jane Smith\",\n    status: \"offline\",\n    friends: [\"current-user\"],\n    friendRequests: { received: [], sent: [] },\n  },\n  {\n    id: \"3\",\n    name: \"Mike Johnson\",\n    status: \"away\",\n    friends: [],\n    friendRequests: { received: [], sent: [] },\n  },\n  {\n    id: \"4\",\n    name: \"Sarah Williams\",\n    status: \"busy\",\n    friends: [],\n    friendRequests: { received: [], sent: [] },\n  },\n];\n\nconst mockCurrentUser: User = {\n  id: \"current-user\",\n  name: \"Current User\",\n  status: \"online\",\n  friends: [\"1\", \"2\"], // Friends with John and Jane\n  friendRequests: {\n    received: [\n      { id: \"req1\", senderId: \"1\" },\n      { id: \"req2\", senderId: \"3\" },\n    ],\n    sent: [],\n  },\n};\n\n// Mock store functions\nconst mockStore = {\n  users: mockUsers,\n  currentUser: mockCurrentUser,\n  sendFriendRequest: (userId: string) => {\n    console.log(\"Sending friend request to\", userId);\n    // In a real app, this would update the store/API\n  },\n  acceptFriendRequest: (requestId: string) => {\n    console.log(\"Accepting request\", requestId);\n    // In a real app, this would update the store/API\n  },\n  declineFriendRequest: (requestId: string) => {\n    console.log(\"Declining request\", requestId);\n    // In a real app, this would update the store/API\n  },\n};\n\nconst Friends = () => {\n  const [activeTab, setActiveTab] = useState<FriendTab>(\"all\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const {\n    users,\n    currentUser,\n    sendFriendRequest,\n    acceptFriendRequest,\n    declineFriendRequest,\n  } = mockStore;\n\n  // Filter users based on search query and exclude current user\n  const filteredUsers = users.filter(\n    (user) =>\n      user.name.toLowerCase().includes(searchQuery.toLowerCase()) &&\n      user.id !== currentUser?.id,\n  );\n\n  // Get friends list\n  const friends = filteredUsers.filter((user) =>\n    currentUser?.friends?.includes(user.id),\n  );\n\n  // Get online friends\n  const onlineFriends = filteredUsers.filter(\n    (user) =>\n      user.status === \"online\" && currentUser?.friends?.includes(user.id),\n  );\n\n  // Get pending friend requests with sender info\n  const pendingRequests = (currentUser?.friendRequests?.received || [])\n    .map((request) => ({\n      ...request,\n      sender: users.find((u) => u.id === request.senderId),\n    }))\n    .filter(\n      (request): request is { id: string; senderId: string; sender: User } =>\n        request.sender !== undefined,\n    );\n\n  // Get suggested friends (not friends and no pending request)\n  const suggestedFriends = filteredUsers.filter(\n    (user) =>\n      !currentUser?.friends?.includes(user.id) &&\n      !pendingRequests.some((req) => req.senderId === user.id),\n  );\n\n  // Handle sending friend request\n  const handleSendRequest = (userId: string) => {\n    sendFriendRequest(userId);\n  };\n\n  // Handle accepting friend request\n  const handleAcceptRequest = (requestId: string) => {\n    acceptFriendRequest(requestId);\n  };\n\n  // Handle declining friend request\n  const handleDeclineRequest = (requestId: string) => {\n    declineFriendRequest(requestId);\n  };\n\n  // Handle search input change\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n  };\n\n  // Get content for the active tab\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"all\":\n        return renderFriendsList(friends, \"All Friends\");\n      case \"online\":\n        return renderFriendsList(onlineFriends, \"Online Now\");\n      case \"pending\":\n        return renderPendingRequests();\n      case \"add\":\n        return renderAddFriends();\n      default:\n        return null;\n    }\n  };\n\n  // Render a list of friends\n  const renderFriendsList = (friendsList: User[], title: string) => (\n    <div>\n      <h2 className=\"text-lg font-semibold mb-4\">{title}</h2>\n      {friendsList.length === 0 ? (\n        <p className=\"text-gray-500\">No friends to display.</p>\n      ) : (\n        <ul className=\"space-y-2\">\n          {friendsList.map((user) => (\n            <li\n              key={user.id}\n              className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\"\n            >\n              <div className=\"flex items-center\">\n                <div\n                  className={`w-3 h-3 rounded-full mr-3 ${\n                    user.status === \"online\"\n                      ? \"bg-green-500\"\n                      : user.status === \"away\"\n                        ? \"bg-yellow-500\"\n                        : user.status === \"busy\"\n                          ? \"bg-red-500\"\n                          : \"bg-gray-500\"\n                  }`}\n                />\n                <span>{user.name}</span>\n              </div>\n              <span className=\"text-sm text-gray-400 capitalize\">\n                {user.status}\n              </span>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n\n  // Render pending friend requests\n  const renderPendingRequests = () => (\n    <div>\n      <h2 className=\"text-lg font-semibold mb-4\">Friend Requests</h2>\n      {pendingRequests.length === 0 ? (\n        <p className=\"text-gray-500\">No pending friend requests.</p>\n      ) : (\n        <ul className=\"space-y-3\">\n          {pendingRequests.map((request) => (\n            <li\n              key={request.id}\n              className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\"\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 rounded-full bg-gray-600 flex items-center justify-center text-white mr-3\">\n                  {request.sender.name.charAt(0).toUpperCase()}\n                </div>\n                <span>{request.sender.name}</span>\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => handleAcceptRequest(request.id)}\n                  className=\"px-3 py-1 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700\"\n                >\n                  Accept\n                </button>\n                <button\n                  onClick={() => handleDeclineRequest(request.id)}\n                  className=\"px-3 py-1 bg-gray-600 text-white rounded-md text-sm hover:bg-gray-700\"\n                >\n                  Decline\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n\n  // Render add friends section\n  const renderAddFriends = () => (\n    <div>\n      <h2 className=\"text-lg font-semibold mb-4\">Add Friends</h2>\n      <div className=\"mb-4\">\n        <input\n          type=\"text\"\n          placeholder=\"Search by name...\"\n          className=\"w-full p-2 border border-gray-600 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          value={searchQuery}\n          onChange={handleSearchChange}\n        />\n      </div>\n\n      <h3 className=\"font-medium mb-2\">Suggested Friends</h3>\n      {suggestedFriends.length === 0 ? (\n        <p className=\"text-gray-500\">No suggestions available.</p>\n      ) : (\n        <ul className=\"space-y-2\">\n          {suggestedFriends.map((user) => (\n            <li\n              key={user.id}\n              className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\"\n            >\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 rounded-full bg-gray-600 flex items-center justify-center text-white mr-3\">\n                  {user.name.charAt(0).toUpperCase()}\n                </div>\n                <span>{user.name}</span>\n              </div>\n              <button\n                onClick={() => handleSendRequest(user.id)}\n                className=\"px-3 py-1 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700\"\n              >\n                Add Friend\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"p-4 bg-gray-900 text-white min-h-screen\">\n      <h1 className=\"text-2xl font-bold mb-6\">Friends</h1>\n\n      {/* Tabs */}\n      <div className=\"flex border-b border-gray-700 mb-6\">\n        <Button\n          variant=\"ghost\"\n          className={`px-4 py-3 h-auto rounded-none ${\n            activeTab === \"all\"\n              ? \"text-blue-400 border-b-2 border-blue-500\"\n              : \"text-gray-400 hover:text-white hover:bg-transparent\"\n          }`}\n          onClick={() => setActiveTab(\"all\")}\n        >\n          All Friends\n          {friends.length > 0 && (\n            <span className=\"ml-2 px-2 py-0.5 bg-blue-900/50 text-blue-400 rounded-full text-xs\">\n              {friends.length}\n            </span>\n          )}\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className={`px-4 py-3 h-auto rounded-none ${\n            activeTab === \"online\"\n              ? \"text-green-400 border-b-2 border-green-500\"\n              : \"text-gray-400 hover:text-white hover:bg-transparent\"\n          }`}\n          onClick={() => setActiveTab(\"online\")}\n        >\n          Online\n          {onlineFriends.length > 0 && (\n            <span className=\"ml-2 px-2 py-0.5 bg-green-900/50 text-green-400 rounded-full text-xs\">\n              {onlineFriends.length}\n            </span>\n          )}\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className={`px-4 py-3 h-auto rounded-none ${\n            activeTab === \"pending\"\n              ? \"text-yellow-400 border-b-2 border-yellow-500\"\n              : \"text-gray-400 hover:text-white hover:bg-transparent\"\n          }`}\n          onClick={() => setActiveTab(\"pending\")}\n        >\n          Pending\n          {pendingRequests.length > 0 && (\n            <span className=\"ml-2 px-2 py-0.5 bg-yellow-900/50 text-yellow-400 rounded-full text-xs\">\n              {pendingRequests.length}\n            </span>\n          )}\n        </Button>\n\n        <Button\n          variant=\"ghost\"\n          className={`px-4 py-3 h-auto rounded-none ${\n            activeTab === \"add\"\n              ? \"text-purple-400 border-b-2 border-purple-500\"\n              : \"text-gray-400 hover:text-white hover:bg-transparent\"\n          }`}\n          onClick={() => setActiveTab(\"add\")}\n        >\n          Add Friend\n        </Button>\n      </div>\n\n      {/* Tab content */}\n      <div className=\"bg-gray-800 rounded-xl p-6\">{renderTabContent()}</div>\n    </div>\n  );\n};\n\nexport default Friends;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/Navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/auth/AuthForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/auth/SocialAuth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/examples/ToastExample.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/icons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/settings-account.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsLoading' is assigned a value but never used.","line":34,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"./button\";\nimport { Input } from \"./input\";\nimport { Label } from \"./label\";\nimport { Textarea } from \"./textarea\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"./avatar\";\n\ninterface SettingsAccountProps {\n  className?: string;\n  initialData: {\n    displayName: string;\n    email: string;\n    bio: string;\n    avatar?: string;\n  };\n  onUpdateAccount: (data: {\n    displayName: string;\n    email: string;\n    bio: string;\n  }) => void;\n  onRescanPlugins: () => void;\n  onAvatarChange: (file: File) => void;\n}\n\nexport const SettingsAccount = ({\n  className,\n  initialData,\n  onUpdateAccount,\n  onRescanPlugins,\n  onAvatarChange,\n}: SettingsAccountProps) => {\n  const [formData, setFormData] = React.useState(initialData);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const fileInputRef = React.useRef<HTMLInputElement>(null);\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onUpdateAccount(formData);\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      onAvatarChange(file);\n    }\n  };\n\n  const handleAvatarClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      <div>\n        <h2 className=\"text-lg font-medium\">Profile</h2>\n        <p className=\"text-sm text-gray-400\">\n          Update your account information and settings.\n        </p>\n      </div>\n\n      <div className=\"flex items-center space-x-6\">\n        <div>\n          <input\n            type=\"file\"\n            ref={fileInputRef}\n            onChange={handleFileChange}\n            accept=\"image/*\"\n            className=\"hidden\"\n          />\n          <Avatar\n            className=\"h-20 w-20 cursor-pointer\"\n            onClick={handleAvatarClick}\n          >\n            <AvatarImage src={formData.avatar} />\n            <AvatarFallback>\n              {formData.displayName?.charAt(0).toUpperCase() || \"U\"}\n            </AvatarFallback>\n          </Avatar>\n        </div>\n        <div>\n          <Button variant=\"outline\" type=\"button\" onClick={handleAvatarClick}>\n            Change Avatar\n          </Button>\n          <p className=\"mt-2 text-xs text-gray-400\">\n            JPG, GIF or PNG. Max size of 2MB\n          </p>\n        </div>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"displayName\">Display Name</Label>\n            <Input\n              id=\"displayName\"\n              name=\"displayName\"\n              value={formData.displayName}\n              onChange={handleChange}\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className=\"mt-1\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"bio\">Bio</Label>\n            <Textarea\n              id=\"bio\"\n              name=\"bio\"\n              value={formData.bio}\n              onChange={handleChange}\n              rows={4}\n              className=\"mt-1\"\n              placeholder=\"Tell us a little bit about yourself\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-3 pt-4\">\n          <Button type=\"button\" variant=\"outline\">\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </div>\n      </form>\n\n      <div className=\"pt-8 border-t border-gray-800\">\n        <h3 className=\"text-lg font-medium\">Plugins</h3>\n        <p className=\"text-sm text-gray-400 mt-1 mb-4\">\n          Rescan your plugin directory to detect new plugins.\n        </p>\n        <Button\n          variant=\"outline\"\n          onClick={onRescanPlugins}\n          disabled={isLoading}\n        >\n          Rescan Plugins\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[74,160],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/toaster.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ToastViewport' is defined but never used.","line":5,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport * as React from \"react\";\nimport { useTheme } from \"next-themes\";\nimport { Toast, ToastProvider, ToastViewport } from \"@/components/ui/toast\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n  const { theme } = useTheme();\n\n  return (\n    <ToastProvider>\n      <div className=\"fixed top-0 right-0 z-50 w-full max-w-xs p-4\">\n        {toasts.map(({ id, title, description, variant, onDismiss }) => (\n          <div key={id} className=\"mb-2\">\n            <Toast\n              title={title}\n              description={description}\n              variant={variant}\n              onDismiss={onDismiss}\n              className={theme === \"dark\" ? \"dark\" : \"\"}\n            />\n          </div>\n        ))}\n      </div>\n    </ToastProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/components/ui/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'actionTypes' is assigned a value but only used as a type.","line":14,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":14,"endColumn":18}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { ToastProps, ToastVariant } from \"@/components/ui/toast\";\n\nconst TOAST_LIMIT = 5;\nconst TOAST_REMOVE_DELAY = 5000; // 5 seconds\n\ntype ToasterToast = ToastProps & {\n  id: string;\n  title?: string;\n  description?: string;\n  variant?: ToastVariant;\n};\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const;\n\nlet count = 0;\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_VALUE;\n  return count.toString();\n}\n\ntype ActionType = typeof actionTypes;\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"];\n      toast: ToasterToast;\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"];\n      toastId: string;\n    };\n\ninterface State {\n  toasts: ToasterToast[];\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    clearTimeout(toastTimeouts.get(toastId)!);\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId);\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId,\n    });\n  }, TOAST_REMOVE_DELAY);\n\n  toastTimeouts.set(toastId, timeout);\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n    case \"REMOVE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n    default:\n      return state;\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\nfunction toast(props: Omit<ToasterToast, \"id\">) {\n  const id = genId();\n\n  const dismiss = () => {\n    dispatch({ type: \"REMOVE_TOAST\", toastId: id });\n  };\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      onDismiss: dismiss,\n    },\n  });\n\n  // Auto-dismiss after delay\n  addToRemoveQueue(id);\n\n  return {\n    id,\n    dismiss,\n  };\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState);\n\n  React.useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, []);\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId: string) => dispatch({ type: \"REMOVE_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast };\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/hooks/useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/hooks/useFileTransfer.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'uuidv4' is defined but never used.","line":2,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setError' is assigned a value but never used.","line":14,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":25}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\ninterface FileTransferOptions {\n  onProgress?: (progress: number) => void;\n  onComplete?: (fileUrl: string) => void;\n  onError?: (error: Error) => void;\n}\n\nexport const useFileTransfer = (userId: string) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isTransferring, setIsTransferring] = useState(false);\n  const [transferProgress, setTransferProgress] = useState(0);\n  const [error, setError] = useState<Error | null>(null);\n\n  const ws = useRef<WebSocket | null>(null);\n  const peerConnection = useRef<RTCPeerConnection | null>(null);\n  const dataChannel = useRef<RTCDataChannel | null>(null);\n  const fileChunks = useRef<ArrayBuffer[]>([]);\n  const currentFile = useRef<File | null>(null);\n  const currentOptions = useRef<FileTransferOptions | null>(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws/file-transfer`;\n\n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      console.log(\"Connected to file transfer server\");\n      setIsConnected(true);\n    };\n\n    ws.current.onclose = () => {\n      console.log(\"Disconnected from file transfer server\");\n      setIsConnected(false);\n    };\n\n    ws.current.onmessage = handleMessage;\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, [userId]);\n\n  const handleMessage = useCallback(async (event: MessageEvent) => {\n    const message = JSON.parse(event.data);\n    console.log(\"Received message:\", message);\n\n    switch (message.event) {\n      case \"transfer-initiated\":\n        handleTransferInitiated(message.data);\n        break;\n      case \"offer\":\n        await handleOffer(message.data);\n        break;\n      case \"answer\":\n        await handleAnswer(message.data);\n        break;\n      case \"ice-candidate\":\n        await handleIceCandidate(message.data);\n        break;\n      default:\n        console.warn(\"Unknown message type:\", message.event);\n    }\n  }, []);\n\n  const initializePeerConnection = useCallback(() => {\n    if (peerConnection.current) return;\n\n    const config: RTCConfiguration = {\n      iceServers: [\n        { urls: \"stun:stun.l.google.com:19302\" },\n        { urls: \"stun:stun1.l.google.com:19302\" },\n      ],\n    };\n\n    const pc = new RTCPeerConnection(config);\n\n    pc.onicecandidate = (event) => {\n      if (event.candidate && ws.current) {\n        ws.current.send(\n          JSON.stringify({\n            event: \"ice-candidate\",\n            data: {\n              to: \"server\", // This would be the target user ID in a real implementation\n              candidate: event.candidate,\n            },\n          }),\n        );\n      }\n    };\n\n    pc.ondatachannel = (event) => {\n      console.log(\"Data channel received\");\n      dataChannel.current = event.channel;\n      setupDataChannel(event.channel);\n    };\n\n    peerConnection.current = pc;\n  }, []);\n\n  const setupDataChannel = useCallback((dc: RTCDataChannel) => {\n    dc.binaryType = \"arraybuffer\";\n\n    dc.onopen = () => {\n      console.log(\"Data channel opened\");\n      sendFile();\n    };\n\n    dc.onmessage = (event) => {\n      console.log(\"Received message on data channel:\", event.data);\n    };\n\n    dc.onclose = () => {\n      console.log(\"Data channel closed\");\n      cleanup();\n    };\n\n    dc.onerror = (error) => {\n      console.error(\"Data channel error:\", error);\n      currentOptions.current?.onError?.(new Error(\"Data channel error\"));\n      cleanup();\n    };\n  }, []);\n\n  const sendFile = useCallback(async () => {\n    if (!currentFile.current || !dataChannel.current) return;\n\n    const file = currentFile.current;\n    const chunkSize = 16 * 1024; // 16KB chunks\n    let offset = 0;\n\n    try {\n      while (offset < file.size) {\n        const chunk = file.slice(offset, offset + chunkSize);\n        const buffer = await chunk.arrayBuffer();\n\n        if (dataChannel.current.readyState === \"open\") {\n          dataChannel.current.send(buffer);\n          offset += chunk.size;\n\n          const progress = Math.min(\n            Math.round((offset / file.size) * 100),\n            100,\n          );\n          setTransferProgress(progress);\n          currentOptions.current?.onProgress?.(progress);\n\n          // Small delay to prevent overwhelming the channel\n          await new Promise((resolve) => setTimeout(resolve, 10));\n        } else {\n          throw new Error(\"Data channel closed during transfer\");\n        }\n      }\n\n      // Notify completion\n      currentOptions.current?.onComplete?.(URL.createObjectURL(file));\n    } catch (error) {\n      console.error(\"Error sending file:\", error);\n      currentOptions.current?.onError?.(error as Error);\n    } finally {\n      cleanup();\n    }\n  }, []);\n\n  const cleanup = useCallback(() => {\n    if (dataChannel.current) {\n      dataChannel.current.close();\n      dataChannel.current = null;\n    }\n\n    if (peerConnection.current) {\n      peerConnection.current.close();\n      peerConnection.current = null;\n    }\n\n    fileChunks.current = [];\n    currentFile.current = null;\n    setIsTransferring(false);\n  }, []);\n\n  const handleTransferInitiated = useCallback((data: unknown) => {\n    console.log(\"Transfer initiated with data:\", data);\n    // Store the S3 URL for fallback\n    // In a real implementation, you would use this for the fallback mechanism\n  }, []);\n\n  const handleOffer = useCallback(\n    async (data: unknown) => {\n      if (!peerConnection.current) initializePeerConnection();\n      if (!peerConnection.current) return;\n\n      try {\n        await peerConnection.current.setRemoteDescription(\n          new RTCSessionDescription(data.offer),\n        );\n        const answer = await peerConnection.current.createAnswer();\n        await peerConnection.current.setLocalDescription(answer);\n\n        if (ws.current) {\n          ws.current.send(\n            JSON.stringify({\n              event: \"answer\",\n              data: {\n                to: data.from,\n                answer: peerConnection.current.localDescription,\n              },\n            }),\n          );\n        }\n      } catch (error) {\n        console.error(\"Error handling offer:\", error);\n        currentOptions.current?.onError?.(error as Error);\n      }\n    },\n    [initializePeerConnection],\n  );\n\n  const handleAnswer = useCallback(async (data: unknown) => {\n    if (!peerConnection.current) return;\n\n    try {\n      await peerConnection.current.setRemoteDescription(\n        new RTCSessionDescription(data.answer),\n      );\n    } catch (error) {\n      console.error(\"Error handling answer:\", error);\n      currentOptions.current?.onError?.(error as Error);\n    }\n  }, []);\n\n  const handleIceCandidate = useCallback(async (data: unknown) => {\n    if (!peerConnection.current) return;\n\n    try {\n      await peerConnection.current.addIceCandidate(\n        new RTCIceCandidate(data.candidate),\n      );\n    } catch (error) {\n      console.error(\"Error adding ICE candidate:\", error);\n      currentOptions.current?.onError?.(error as Error);\n    }\n  }, []);\n\n  const sendFileP2P = useCallback(\n    async (\n      file: File,\n      recipientId: string,\n      options: FileTransferOptions = {},\n    ) => {\n      if (!ws.current || !isConnected) {\n        throw new Error(\"Not connected to the server\");\n      }\n\n      if (isTransferring) {\n        throw new Error(\"A file transfer is already in progress\");\n      }\n\n      setIsTransferring(true);\n      setTransferProgress(0);\n      currentFile.current = file;\n      currentOptions.current = options;\n\n      try {\n        initializePeerConnection();\n\n        // Initialize data channel\n        if (peerConnection.current) {\n          const dc = peerConnection.current.createDataChannel(\"fileTransfer\");\n          dataChannel.current = dc;\n          setupDataChannel(dc);\n\n          // Create and send offer\n          const offer = await peerConnection.current.createOffer();\n          await peerConnection.current.setLocalDescription(offer);\n\n          ws.current.send(\n            JSON.stringify({\n              event: \"init-transfer\",\n              data: {\n                fileName: file.name,\n                fileSize: file.size,\n                mimeType: file.type,\n                recipientId,\n                offer,\n              },\n            }),\n          );\n        }\n      } catch (error) {\n        console.error(\"Error initiating file transfer:\", error);\n        setIsTransferring(false);\n        currentOptions.current?.onError?.(error as Error);\n        throw error;\n      }\n    },\n    [initializePeerConnection, isConnected, isTransferring, setupDataChannel],\n  );\n\n  return {\n    isConnected,\n    isTransferring,\n    transferProgress,\n    error,\n    sendFileP2P,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/hooks/useRtc.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ClientEvents' is defined but never used.","line":3,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useCallback, useRef } from \"react\";\nimport { rtcService, EventCallback } from \"../services/rtc.service\";\nimport { ServerEvents, ClientEvents } from \"../types/websocket.types\";\n\ntype EventMap = {\n  [K in keyof typeof ServerEvents]: Parameters<EventCallback>[0];\n};\n\nexport const useRtc = <T extends keyof EventMap>(\n  eventHandlers: { [K in T]?: (data: EventMap[K]) => void } = {},\n) => {\n  const handlersRef = useRef(eventHandlers);\n\n  // Update handlers when they change\n  useEffect(() => {\n    handlersRef.current = eventHandlers;\n  }, [eventHandlers]);\n\n  // Set up event listeners\n  useEffect(() => {\n    const unsubscribers: (() => void)[] = [];\n\n    // Connect to the WebSocket server\n    const connect = async () => {\n      try {\n        await rtcService.connect();\n      } catch (error) {\n        console.error(\"Failed to connect to RTC server:\", error);\n      }\n    };\n\n    connect();\n\n    // Set up event listeners\n    Object.entries(handlersRef.current).forEach(([event, handler]) => {\n      if (handler) {\n        const unsubscribe = rtcService.on(event, handler as EventCallback);\n        unsubscribers.push(unsubscribe);\n      }\n    });\n\n    // Clean up on unmount\n    return () => {\n      unsubscribers.forEach((unsubscribe) => unsubscribe());\n      // Don't disconnect here to maintain connection across component unmounts\n      // rtcService.disconnect();\n    };\n  }, []);\n\n  // Wrapper methods\n  const joinRoom = useCallback(async (roomId: string) => {\n    try {\n      return await rtcService.joinRoom(roomId);\n    } catch (error) {\n      console.error(\"Failed to join room:\", error);\n      throw error;\n    }\n  }, []);\n\n  const leaveRoom = useCallback(async (roomId: string) => {\n    try {\n      return await rtcService.leaveRoom(roomId);\n    } catch (error) {\n      console.error(\"Failed to leave room:\", error);\n      throw error;\n    }\n  }, []);\n\n  const sendTrackUpdate = useCallback((update: unknown) => {\n    rtcService.sendTrackUpdate(update);\n  }, []);\n\n  const sendSignal = useCallback((signal: unknown) => {\n    rtcService.sendSignal(signal);\n  }, []);\n\n  const isConnected = useCallback(() => {\n    return rtcService.isConnected;\n  }, []);\n\n  return {\n    joinRoom,\n    leaveRoom,\n    sendTrackUpdate,\n    sendSignal,\n    isConnected,\n    // Direct access to the service if needed\n    service: rtcService,\n  };\n};\n\nexport default useRtc;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/hooks/useWebSocket.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/Admin.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/Chat.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":606,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":606,"endColumn":74}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport {\n  Send,\n  Paperclip,\n  Mic,\n  Smile,\n  MoreVertical,\n  Phone,\n  Video,\n  Search,\n  UserPlus,\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\ntype Message = {\n  id: string;\n  content: string;\n  sender: \"me\" | \"them\";\n  timestamp: Date;\n  status: \"sent\" | \"delivered\" | \"read\";\n};\n\ntype Friend = {\n  id: string;\n  name: string;\n  username: string;\n  avatar?: string;\n  status: \"online\" | \"offline\" | \"away\" | \"dnd\" | \"streaming\";\n  lastSeen?: string;\n  isTyping?: boolean;\n};\n\ntype Plugin = {\n  id: string;\n  name: string;\n  type: string;\n  version: string;\n  isActive: boolean;\n  lastUsed?: string;\n  category: string;\n};\n\n// Mock data for the active friend\nconst activeFriend: Friend = {\n  id: \"1\",\n  name: \"Alex Johnson\",\n  username: \"alexj\",\n  status: \"online\",\n  avatar: \"https://randomuser.me/api/portraits/men/1.jpg\",\n  isTyping: false,\n};\n\n// Mock plugins data for the active friend\nconst friendPlugins: Plugin[] = [\n  {\n    id: \"1\",\n    name: \"Serum\",\n    type: \"Synthesizer\",\n    version: \"1.2.3\",\n    isActive: true,\n    lastUsed: \"2h ago\",\n    category: \"Synth\",\n  },\n  {\n    id: \"2\",\n    name: \"ValhallaDSP\",\n    type: \"Reverb\",\n    version: \"2.1.0\",\n    isActive: true,\n    lastUsed: \"1d ago\",\n    category: \"Effect\",\n  },\n  {\n    id: \"3\",\n    name: \"Soothe2\",\n    type: \"Dynamic EQ\",\n    version: \"1.5.2\",\n    isActive: true,\n    lastUsed: \"3h ago\",\n    category: \"Effect\",\n  },\n  {\n    id: \"4\",\n    name: \"Pro-Q3\",\n    type: \"EQ\",\n    version: \"3.0.0\",\n    isActive: false,\n    lastUsed: \"1w ago\",\n    category: \"Effect\",\n  },\n  {\n    id: \"5\",\n    name: \"Kickstart\",\n    type: \"Sidechain\",\n    version: \"1.0.0\",\n    isActive: true,\n    lastUsed: \"5h ago\",\n    category: \"Dynamics\",\n  },\n];\n\n// Mock chat history\nconst initialMessages: Message[] = [\n  {\n    id: \"1\",\n    content: \"Hey! How are you doing?\",\n    sender: \"them\",\n    timestamp: new Date(Date.now() - 3600000 * 2),\n    status: \"read\",\n  },\n  {\n    id: \"2\",\n    content: \"Working on a new track. Need your opinion on the mix!\",\n    sender: \"them\",\n    timestamp: new Date(Date.now() - 3600000 * 2 + 60000),\n    status: \"read\",\n  },\n  {\n    id: \"3\",\n    content:\n      \"Hey! I'm good, thanks! Just finished a session myself. What kind of track is it?\",\n    sender: \"me\",\n    timestamp: new Date(Date.now() - 3600000),\n    status: \"read\",\n  },\n  {\n    id: \"4\",\n    content:\n      \"It's a deep house track. I'm using Serum for the bass and some ValhallaDSP for the reverb. Think you could take a listen?\",\n    sender: \"them\",\n    timestamp: new Date(Date.now() - 1800000),\n    status: \"read\",\n  },\n  {\n    id: \"5\",\n    content:\n      \"Absolutely! Send it over. Have you tried using Soothe2 on your master bus? It works wonders for taming harsh frequencies.\",\n    sender: \"me\",\n    timestamp: new Date(Date.now() - 900000),\n    status: \"read\",\n  },\n  {\n    id: \"6\",\n    content:\n      \"I haven't tried that yet. I'll give it a shot. Thanks for the tip!\",\n    sender: \"them\",\n    timestamp: new Date(Date.now() - 600000),\n    status: \"read\",\n  },\n];\n\nexport default function Chat() {\n  const [messages, setMessages] = useState<Message[]>(initialMessages);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const [activeTab, setActiveTab] = useState(\"plugins\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n\n    const message: Message = {\n      id: Date.now().toString(),\n      content: newMessage,\n      sender: \"me\",\n      timestamp: new Date(),\n      status: \"sent\",\n    };\n\n    setMessages([...messages, message]);\n    setNewMessage(\"\");\n\n    // Simulate reply after 1-3 seconds\n    if (Math.random() > 0.3) {\n      // 70% chance of reply\n      const replyDelay = 1000 + Math.random() * 2000; // 1-3 seconds\n      setTimeout(() => {\n        const replies = [\n          \"That sounds great!\",\n          \"I'll check it out.\",\n          \"Thanks for the suggestion!\",\n          \"What preset did you use for that?\",\n          \"Can you send me the project file?\",\n          \"I'm in the studio right now, can I call you later?\",\n        ];\n        const replyMessage: Message = {\n          id: (Date.now() + 1).toString(),\n          content: replies[Math.floor(Math.random() * replies.length)],\n          sender: \"them\",\n          timestamp: new Date(),\n          status: \"delivered\",\n        };\n        setMessages((prev) => [...prev, replyMessage]);\n      }, replyDelay);\n    }\n  };\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n  };\n\n  const filteredPlugins = friendPlugins.filter(\n    (plugin) =>\n      plugin.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      plugin.type.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      plugin.category.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  return (\n    <div className=\"flex h-full\">\n      {/* Left side - Chat messages */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat header */}\n        <div className=\"border-b border-gray-700 p-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage\n                  src={activeFriend.avatar}\n                  alt={activeFriend.name}\n                />\n                <AvatarFallback>\n                  {activeFriend.name\n                    .split(\" \")\n                    .map((n) => n[0])\n                    .join(\"\")}\n                </AvatarFallback>\n              </Avatar>\n              <div\n                className={`absolute bottom-0 right-0 h-2.5 w-2.5 rounded-full border-2 border-gray-900 ${\n                  activeFriend.status === \"online\"\n                    ? \"bg-green-500\"\n                    : activeFriend.status === \"away\"\n                      ? \"bg-yellow-500\"\n                      : activeFriend.status === \"dnd\"\n                        ? \"bg-red-500\"\n                        : activeFriend.status === \"streaming\"\n                          ? \"bg-purple-500\"\n                          : \"bg-gray-500\"\n                }`}\n              />\n            </div>\n            <div>\n              <h2 className=\"font-medium text-white\">{activeFriend.name}</h2>\n              <p className=\"text-xs text-gray-400\">\n                {activeFriend.status === \"online\"\n                  ? \"Online\"\n                  : activeFriend.status === \"away\"\n                    ? \"Away\"\n                    : activeFriend.status === \"dnd\"\n                      ? \"Do Not Disturb\"\n                      : activeFriend.status === \"streaming\"\n                        ? \"Streaming\"\n                        : \"Offline\"}\n                {activeFriend.isTyping && \" • typing...\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-gray-400 hover:text-white hover:bg-gray-700\"\n                  >\n                    <Phone className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Start Voice Call</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-gray-400 hover:text-white hover:bg-gray-700\"\n                  >\n                    <Video className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Start Video Call</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-gray-400 hover:text-white hover:bg-gray-700\"\n                  >\n                    <UserPlus className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>Add to Group</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"text-gray-400 hover:text-white hover:bg-gray-700\"\n                  >\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>More Options</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        </div>\n\n        {/* Messages area */}\n        <ScrollArea className=\"flex-1 p-4 overflow-y-auto\">\n          <div className=\"space-y-4\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${message.sender === \"me\" ? \"justify-end\" : \"justify-start\"}`}\n              >\n                <div\n                  className={`max-w-xs lg:max-w-md xl:max-w-lg 2xl:max-w-xl rounded-2xl px-4 py-2 ${\n                    message.sender === \"me\"\n                      ? \"bg-purple-600 text-white rounded-br-none\"\n                      : \"bg-gray-700 text-white rounded-bl-none\"\n                  }`}\n                >\n                  <p className=\"text-sm\">{message.content}</p>\n                  <div className=\"flex items-center justify-end mt-1 space-x-1\">\n                    <span className=\"text-xs opacity-70\">\n                      {formatTime(message.timestamp)}\n                    </span>\n                    {message.sender === \"me\" && (\n                      <span className=\"text-xs\">\n                        {message.status === \"sent\" && \"✓\"}\n                        {message.status === \"delivered\" && \"✓✓\"}\n                        {message.status === \"read\" && \"✓✓✓\"}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n        </ScrollArea>\n\n        {/* Message input */}\n        <div className=\"border-t border-gray-700 p-4\">\n          <form\n            onSubmit={handleSendMessage}\n            className=\"flex items-end space-x-2\"\n          >\n            <div className=\"flex-1 bg-gray-800 rounded-lg border border-gray-700 flex items-end\">\n              <button\n                type=\"button\"\n                className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-l-md\"\n              >\n                <Paperclip className=\"h-5 w-5\" />\n              </button>\n              <Input\n                type=\"text\"\n                placeholder={`Message ${activeFriend.name.split(\" \")[0]}...`}\n                className=\"flex-1 border-0 bg-transparent text-white placeholder-gray-400 focus-visible:ring-0 focus-visible:ring-offset-0\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSendMessage(e);\n                  }\n                }}\n              />\n              <div className=\"flex\">\n                <button\n                  type=\"button\"\n                  className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700\"\n                >\n                  <Smile className=\"h-5 w-5\" />\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-r-md\"\n                >\n                  <Mic className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </div>\n            <Button\n              type=\"submit\"\n              size=\"icon\"\n              className=\"bg-purple-600 hover:bg-purple-700 h-10 w-10 flex-shrink-0\"\n              disabled={!newMessage.trim()}\n            >\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </form>\n        </div>\n      </div>\n\n      {/* Right side - Friend's plugins */}\n      <div className=\"w-80 border-l border-gray-700 bg-gray-800/50 flex flex-col\">\n        <Tabs defaultValue=\"plugins\" className=\"flex-1 flex flex-col\">\n          <TabsList className=\"w-full rounded-none border-b border-gray-700 bg-gray-800/50 p-0 h-12\">\n            <TabsTrigger\n              value=\"plugins\"\n              className=\"flex-1 rounded-none h-full data-[state=active]:bg-gray-700 data-[state=active]:text-white\"\n              onClick={() => setActiveTab(\"plugins\")}\n            >\n              Plugins\n            </TabsTrigger>\n            <TabsTrigger\n              value=\"details\"\n              className=\"flex-1 rounded-none h-full data-[state=active]:bg-gray-700 data-[state=active]:text-white\"\n              onClick={() => setActiveTab(\"details\")}\n            >\n              Details\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"p-3 border-b border-gray-700\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-400\" />\n              <Input\n                type=\"search\"\n                placeholder={`Search ${activeTab}...`}\n                className=\"pl-8 bg-gray-700/50 border-gray-600 text-white h-9\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <TabsContent value=\"plugins\" className=\"flex-1 m-0 overflow-y-auto\">\n            <div className=\"p-3 space-y-2\">\n              {filteredPlugins.length > 0 ? (\n                filteredPlugins.map((plugin) => (\n                  <div\n                    key={plugin.id}\n                    className=\"p-3 rounded-lg bg-gray-700/30 hover:bg-gray-700/50 transition-colors cursor-pointer\"\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h4 className=\"font-medium text-white\">\n                          {plugin.name}\n                        </h4>\n                        <p className=\"text-xs text-gray-400\">\n                          {plugin.type} • v{plugin.version}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <div\n                          className={`h-2 w-2 rounded-full mr-2 ${\n                            plugin.isActive ? \"bg-green-500\" : \"bg-gray-500\"\n                          }`}\n                        />\n                        <span className=\"text-xs text-gray-400\">\n                          {plugin.isActive ? \"Active\" : \"Inactive\"}\n                        </span>\n                      </div>\n                    </div>\n                    {plugin.lastUsed && (\n                      <div className=\"mt-2 text-xs text-gray-400\">\n                        Last used: {plugin.lastUsed}\n                      </div>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-400 text-sm\">\n                  No plugins found matching \"{searchQuery}\"\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"details\" className=\"m-0 p-4\">\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <Avatar className=\"h-20 w-20 mx-auto mb-3\">\n                  <AvatarImage\n                    src={activeFriend.avatar}\n                    alt={activeFriend.name}\n                  />\n                  <AvatarFallback className=\"text-xl\">\n                    {activeFriend.name\n                      .split(\" \")\n                      .map((n) => n[0])\n                      .join(\"\")}\n                  </AvatarFallback>\n                </Avatar>\n                <h3 className=\"text-lg font-medium text-white\">\n                  {activeFriend.name}\n                </h3>\n                <p className=\"text-sm text-gray-400\">\n                  @{activeFriend.username}\n                </p>\n                <div className=\"mt-2\">\n                  <span\n                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                      activeFriend.status === \"online\"\n                        ? \"bg-green-500/20 text-green-400\"\n                        : activeFriend.status === \"away\"\n                          ? \"bg-yellow-500/20 text-yellow-400\"\n                          : activeFriend.status === \"dnd\"\n                            ? \"bg-red-500/20 text-red-400\"\n                            : activeFriend.status === \"streaming\"\n                              ? \"bg-purple-500/20 text-purple-400\"\n                              : \"bg-gray-500/20 text-gray-400\"\n                    }`}\n                  >\n                    <span\n                      className={`inline-block w-2 h-2 rounded-full mr-1.5 ${\n                        activeFriend.status === \"online\"\n                          ? \"bg-green-400\"\n                          : activeFriend.status === \"away\"\n                            ? \"bg-yellow-400\"\n                            : activeFriend.status === \"dnd\"\n                              ? \"bg-red-400\"\n                              : activeFriend.status === \"streaming\"\n                                ? \"bg-purple-400\"\n                                : \"bg-gray-400\"\n                      }`}\n                    ></span>\n                    {activeFriend.status === \"online\"\n                      ? \"Online\"\n                      : activeFriend.status === \"away\"\n                        ? \"Away\"\n                        : activeFriend.status === \"dnd\"\n                          ? \"Do Not Disturb\"\n                          : activeFriend.status === \"streaming\"\n                            ? \"Streaming\"\n                            : \"Offline\"}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-4 mt-6\">\n                <div>\n                  <h4 className=\"text-xs font-medium text-gray-400 uppercase tracking-wider mb-2\">\n                    About\n                  </h4>\n                  <p className=\"text-sm text-gray-300\">\n                    Music producer and sound designer. Love working with Serum\n                    and Ableton Live.\n                  </p>\n                </div>\n\n                <div>\n                  <h4 className=\"text-xs font-medium text-gray-400 uppercase tracking-wider mb-2\">\n                    Stats\n                  </h4>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div className=\"bg-gray-700/30 p-3 rounded-lg\">\n                      <p className=\"text-xs text-gray-400\">Plugins</p>\n                      <p className=\"text-white font-medium\">\n                        {friendPlugins.length}\n                      </p>\n                    </div>\n                    <div className=\"bg-gray-700/30 p-3 rounded-lg\">\n                      <p className=\"text-xs text-gray-400\">Active</p>\n                      <p className=\"text-white font-medium\">\n                        {friendPlugins.filter((p) => p.isActive).length}\n                      </p>\n                    </div>\n                    <div className=\"bg-gray-700/30 p-3 rounded-lg\">\n                      <p className=\"text-xs text-gray-400\">Categories</p>\n                      <p className=\"text-white font-medium\">\n                        {new Set(friendPlugins.map((p) => p.category)).size}\n                      </p>\n                    </div>\n                    <div className=\"bg-gray-700/30 p-3 rounded-lg\">\n                      <p className=\"text-xs text-gray-400\">Last Active</p>\n                      <p className=\"text-white font-medium\">2h ago</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-xs font-medium text-gray-400 uppercase tracking-wider mb-2\">\n                    Top Categories\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {[\"Effect\", \"Synth\", \"Dynamics\"].map((category, index) => (\n                      <div key={category} className=\"flex items-center\">\n                        <div className=\"w-2 h-2 rounded-full bg-purple-500 mr-2\"></div>\n                        <span className=\"text-sm text-gray-300 flex-1\">\n                          {category}\n                        </span>\n                        <span className=\"text-xs text-gray-400\">\n                          {\n                            friendPlugins.filter((p) => p.category === category)\n                              .length\n                          }{\" \"}\n                          plugins\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/FileShare.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/Friends.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'activeTab' is assigned a value but never used.","line":141,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport {\n  Search,\n  UserPlus,\n  MoreVertical,\n  MessageCircle,\n  UserX,\n  UserCheck,\n  User,\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ntype FriendStatus = \"online\" | \"offline\" | \"away\" | \"dnd\" | \"streaming\";\n\ntype Friend = {\n  id: string;\n  name: string;\n  username: string;\n  status: FriendStatus;\n  avatar?: string;\n  lastSeen?: string;\n  activity?: {\n    type: \"playing\" | \"listening\" | \"editing\";\n    name: string;\n  };\n};\n\ntype FriendRequest = {\n  id: string;\n  from: string;\n  username: string;\n  avatar?: string;\n  mutualFriends: number;\n  timestamp: string;\n};\n\nconst friends: Friend[] = [\n  {\n    id: \"1\",\n    name: \"Alex Johnson\",\n    username: \"alexj\",\n    status: \"online\",\n    activity: {\n      type: \"playing\",\n      name: \"Ableton Live\",\n    },\n    avatar: \"https://randomuser.me/api/portraits/men/1.jpg\",\n  },\n  {\n    id: \"2\",\n    name: \"Jordan Smith\",\n    username: \"jordans\",\n    status: \"streaming\",\n    activity: {\n      type: \"playing\",\n      name: \"FL Studio\",\n    },\n    avatar: \"https://randomuser.me/api/portraits/women/44.jpg\",\n  },\n  {\n    id: \"3\",\n    name: \"Taylor Swift\",\n    username: \"taylors\",\n    status: \"away\",\n    lastSeen: \"2h ago\",\n    avatar: \"https://randomuser.me/api/portraits/women/68.jpg\",\n  },\n  {\n    id: \"4\",\n    name: \"Chris Martin\",\n    username: \"chrism\",\n    status: \"dnd\",\n    activity: {\n      type: \"editing\",\n      name: \"New Track 5\",\n    },\n    avatar: \"https://randomuser.me/api/portraits/men/22.jpg\",\n  },\n  {\n    id: \"5\",\n    name: \"Billie Eilish\",\n    username: \"billiee\",\n    status: \"offline\",\n    lastSeen: \"1d ago\",\n    avatar: \"https://randomuser.me/api/portraits/women/33.jpg\",\n  },\n];\n\nconst friendRequests: FriendRequest[] = [\n  {\n    id: \"6\",\n    from: \"Adele\",\n    username: \"adelea\",\n    mutualFriends: 3,\n    timestamp: \"2h ago\",\n    avatar: \"https://randomuser.me/api/portraits/women/12.jpg\",\n  },\n  {\n    id: \"7\",\n    from: \"The Weeknd\",\n    username: \"theweeknd\",\n    mutualFriends: 2,\n    timestamp: \"1d ago\",\n    avatar: \"https://randomuser.me/api/portraits/men/42.jpg\",\n  },\n];\n\nconst suggestedFriends: Omit<Friend, \"status\">[] = [\n  {\n    id: \"8\",\n    name: \"Dua Lipa\",\n    username: \"dualipa\",\n    avatar: \"https://randomuser.me/api/portraits/women/24.jpg\",\n  },\n  {\n    id: \"9\",\n    name: \"Post Malone\",\n    username: \"postmalone\",\n    avatar: \"https://randomuser.me/api/portraits/men/36.jpg\",\n  },\n  {\n    id: \"10\",\n    name: \"Doja Cat\",\n    username: \"dojacat\",\n    avatar: \"https://randomuser.me/api/portraits/women/50.jpg\",\n  },\n];\n\nexport default function Friends() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"all\");\n  const [showAddFriendDialog, setShowAddFriendDialog] = useState(false);\n  const [friendRequestInput, setFriendRequestInput] = useState(\"\");\n\n  const filteredFriends = friends.filter(\n    (friend) =>\n      friend.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      friend.username.toLowerCase().includes(searchQuery.toLowerCase()),\n  );\n\n  const getStatusColor = (status: FriendStatus) => {\n    switch (status) {\n      case \"online\":\n        return \"bg-green-500\";\n      case \"offline\":\n        return \"bg-gray-500\";\n      case \"away\":\n        return \"bg-yellow-500\";\n      case \"dnd\":\n        return \"bg-red-500\";\n      case \"streaming\":\n        return \"bg-purple-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getStatusText = (status: FriendStatus) => {\n    switch (status) {\n      case \"online\":\n        return \"Online\";\n      case \"offline\":\n        return \"Offline\";\n      case \"away\":\n        return \"Away\";\n      case \"dnd\":\n        return \"Do Not Disturb\";\n      case \"streaming\":\n        return \"Streaming\";\n      default:\n        return \"Offline\";\n    }\n  };\n\n  const handleSendFriendRequest = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (friendRequestInput.trim()) {\n      console.log(\"Sending friend request to:\", friendRequestInput);\n      setFriendRequestInput(\"\");\n      setShowAddFriendDialog(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-white\">Friends</h1>\n          <p className=\"text-sm text-gray-400\">\n            Connect and collaborate with other music creators\n          </p>\n        </div>\n        <div className=\"flex w-full sm:w-auto gap-2\">\n          <div className=\"relative flex-1 sm:w-64\">\n            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-gray-400\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search friends...\"\n              className=\"pl-8 bg-gray-800 border-gray-700 text-white\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n          <Button\n            onClick={() => setShowAddFriendDialog(true)}\n            className=\"bg-purple-600 hover:bg-purple-700\"\n          >\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Add Friend\n          </Button>\n        </div>\n      </div>\n\n      {showAddFriendDialog && (\n        <Card className=\"bg-gray-800/50 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Add Friend</CardTitle>\n            <p className=\"text-sm text-gray-400\">\n              Enter a username or email address\n            </p>\n          </CardHeader>\n          <form onSubmit={handleSendFriendRequest}>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Username#0000\"\n                  className=\"bg-gray-800 border-gray-700 text-white\"\n                  value={friendRequestInput}\n                  onChange={(e) => setFriendRequestInput(e.target.value)}\n                />\n                <Button\n                  type=\"submit\"\n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                >\n                  Send Request\n                </Button>\n              </div>\n            </CardContent>\n            <CardFooter className=\"justify-end\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={() => setShowAddFriendDialog(false)}\n                className=\"text-gray-400 hover:text-white\"\n              >\n                Cancel\n              </Button>\n            </CardFooter>\n          </form>\n        </Card>\n      )}\n\n      <Tabs defaultValue=\"all\" className=\"w-full\" onValueChange={setActiveTab}>\n        <TabsList className=\"bg-gray-800/50 border border-gray-700\">\n          <TabsTrigger value=\"all\" className=\"data-[state=active]:bg-gray-700\">\n            All\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"online\"\n            className=\"data-[state=active]:bg-gray-700\"\n          >\n            Online\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"pending\"\n            className=\"data-[state=active]:bg-gray-700\"\n          >\n            Pending\n            {friendRequests.length > 0 && (\n              <span className=\"ml-2 px-2 py-0.5 bg-purple-500 text-xs rounded-full\">\n                {friendRequests.length}\n              </span>\n            )}\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"suggested\"\n            className=\"data-[state=active]:bg-gray-700\"\n          >\n            Suggested\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"mt-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredFriends.map((friend) => (\n              <Card\n                key={friend.id}\n                className=\"bg-gray-800/50 border-gray-700 hover:bg-gray-700/30 transition-colors\"\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"relative\">\n                        <Avatar className=\"h-12 w-12\">\n                          <AvatarImage src={friend.avatar} alt={friend.name} />\n                          <AvatarFallback>\n                            {friend.name\n                              .split(\" \")\n                              .map((n) => n[0])\n                              .join(\"\")}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div\n                          className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-gray-800 ${getStatusColor(friend.status)}`}\n                        />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-white\">\n                          {friend.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-400\">\n                          @{friend.username}\n                        </p>\n                        <div className=\"flex items-center mt-1\">\n                          <div\n                            className={`h-2 w-2 rounded-full mr-1.5 ${getStatusColor(friend.status)}`}\n                          />\n                          <span className=\"text-xs text-gray-400\">\n                            {friend.status === \"offline\" && friend.lastSeen\n                              ? `Last seen ${friend.lastSeen}`\n                              : getStatusText(friend.status)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 text-gray-400 hover:text-white hover:bg-gray-700\"\n                      >\n                        <MessageCircle className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8 text-gray-400 hover:text-white hover:bg-gray-700\"\n                      >\n                        <MoreVertical className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                  {friend.activity && (\n                    <div className=\"mt-3 pt-3 border-t border-gray-700\">\n                      <p className=\"text-xs text-gray-400\">\n                        {friend.activity.type === \"playing\" && \"Playing\"}\n                        {friend.activity.type === \"listening\" && \"Listening to\"}\n                        {friend.activity.type === \"editing\" && \"Editing\"}\n                      </p>\n                      <p className=\"text-sm text-white\">\n                        {friend.activity.name}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"online\" className=\"mt-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {filteredFriends\n              .filter((friend) => friend.status !== \"offline\")\n              .map((friend) => (\n                <Card\n                  key={friend.id}\n                  className=\"bg-gray-800/50 border-gray-700\"\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"relative\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={friend.avatar} alt={friend.name} />\n                          <AvatarFallback>{friend.name[0]}</AvatarFallback>\n                        </Avatar>\n                        <div\n                          className={`absolute bottom-0 right-0 h-2.5 w-2.5 rounded-full border-2 border-gray-800 ${getStatusColor(friend.status)}`}\n                        />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-white\">\n                          {friend.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-400\">\n                          {friend.activity ? (\n                            <span className=\"flex items-center\">\n                              <span className=\"inline-block w-1.5 h-1.5 rounded-full bg-green-500 mr-1.5\"></span>\n                              {friend.activity.name}\n                            </span>\n                          ) : (\n                            getStatusText(friend.status)\n                          )}\n                        </p>\n                      </div>\n                      <div className=\"ml-auto flex space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-8 w-8 text-gray-400 hover:text-white hover:bg-gray-700\"\n                        >\n                          <MessageCircle className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"pending\" className=\"mt-6\">\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Friend Requests</CardTitle>\n              <p className=\"text-sm text-gray-400\">\n                {friendRequests.length} pending requests\n              </p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {friendRequests.length > 0 ? (\n                  friendRequests.map((request) => (\n                    <div\n                      key={request.id}\n                      className=\"flex items-center justify-between p-3 rounded-lg bg-gray-700/30\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage\n                            src={request.avatar}\n                            alt={request.from}\n                          />\n                          <AvatarFallback>{request.from[0]}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h4 className=\"font-medium text-white\">\n                            {request.from}\n                          </h4>\n                          <p className=\"text-xs text-gray-400\">\n                            @{request.username} • {request.mutualFriends} mutual\n                            friends\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            {request.timestamp}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          <UserCheck className=\"h-4 w-4 mr-1.5\" /> Accept\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                        >\n                          <UserX className=\"h-4 w-4 mr-1.5\" /> Decline\n                        </Button>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <User className=\"h-12 w-12 mx-auto text-gray-500 mb-2\" />\n                    <p className=\"text-gray-400\">No pending friend requests</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"suggested\" className=\"mt-6\">\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {suggestedFriends.map((friend) => (\n              <Card key={friend.id} className=\"bg-gray-800/50 border-gray-700\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={friend.avatar} alt={friend.name} />\n                        <AvatarFallback>{friend.name[0]}</AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"font-medium text-white\">\n                          {friend.name}\n                        </h3>\n                        <p className=\"text-xs text-gray-400\">\n                          @{friend.username}\n                        </p>\n                      </div>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"text-purple-400 border-purple-500/30 hover:bg-purple-500/10\"\n                    >\n                      <UserPlus className=\"h-3.5 w-3.5 mr-1.5\" /> Add\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/History.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/LandingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/PendingApproval.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/Register.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/SignIn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/settings/AccountSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isLoading' is assigned a value but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SettingsAccount } from \"@/components/ui\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport useAuth, { User } from \"@/hooks/useAuth\";\n\ninterface UserData extends Partial<User> {\n  displayName: string;\n  email: string;\n  bio: string;\n  avatar?: string;\n}\n\nconst AccountSettings = () => {\n  const { toast } = useToast();\n  const { auth } = useAuth();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState<UserData>({\n    displayName: \"\",\n    email: \"\",\n    bio: \"\",\n    avatar: \"\",\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Only update state if we have auth data\n    if (auth?.user) {\n      setUserData({\n        displayName:\n          auth.user.displayName || auth.user.email?.split(\"@\")[0] || \"User\",\n        email: auth.user.email || \"\",\n        bio: auth.user.bio || \"\",\n        avatar: auth.user.avatar || \"\",\n      });\n      setIsLoading(false);\n    } else if (auth === null) {\n      // Only redirect if we're certain there's no auth (not just loading)\n      navigate(\"/signin\");\n    }\n  }, [auth, navigate]);\n\n  const handleUpdateAccount = async (data: {\n    displayName: string;\n    email: string;\n    bio: string;\n  }) => {\n    try {\n      // In a real app, you would call your API here\n      // await updateUserProfile(data);\n\n      // For demo, update local state\n      const updatedUser = {\n        ...auth?.user,\n        ...data,\n      };\n\n      // Update localStorage\n      const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n      // TODO: Replace 'unknown' with a specific User type if available\n      const updatedUsers = users.map((user: unknown) =>\n        user.id === updatedUser.id ? updatedUser : user,\n      );\n      localStorage.setItem(\"users\", JSON.stringify(updatedUsers));\n\n      // Update auth state\n      localStorage.setItem(\n        \"auth\",\n        JSON.stringify({\n          ...auth,\n          user: updatedUser,\n        }),\n      );\n\n      setUserData((prev) => ({\n        ...prev,\n        ...data,\n      }));\n\n      toast({\n        title: \"Account Updated\",\n        description: \"Your account information has been successfully updated.\",\n      });\n    } catch (error) {\n      console.error(\"Failed to update account:\", error);\n      toast({\n        title: \"Update Failed\",\n        description:\n          \"There was an error updating your account. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRescanPlugins = () => {\n    // In a real app, you would call your API here\n    // await rescanPlugins();\n\n    // Simulate plugin scanning\n    setTimeout(() => {\n      toast({\n        title: \"Plugin Scan Complete\",\n        description: \"Your plugin library has been successfully rescanned.\",\n      });\n    }, 1500);\n  };\n\n  const handleAvatarChange = async (file: File) => {\n    try {\n      // In a real app, you would upload the file to your server\n      // const avatarUrl = await uploadAvatar(file);\n      const avatarUrl = URL.createObjectURL(file); // Temporary URL for demo\n\n      if (!auth?.user) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      // Update localStorage\n      const users = JSON.parse(localStorage.getItem(\"users\") || \"[]\");\n      const updatedUser = {\n        ...auth.user,\n        avatar: avatarUrl,\n      };\n\n      // TODO: Replace 'unknown' with a specific User type if available\n      const updatedUsers = users.map((user: unknown) =>\n        user.id === updatedUser.id ? updatedUser : user,\n      );\n\n      localStorage.setItem(\"users\", JSON.stringify(updatedUsers));\n\n      // Update auth state\n      localStorage.setItem(\n        \"auth\",\n        JSON.stringify({\n          ...auth,\n          user: updatedUser,\n        }),\n      );\n\n      setUserData((prev) => ({\n        ...prev,\n        avatar: avatarUrl,\n      }));\n\n      toast({\n        title: \"Avatar Updated\",\n        description: \"Your profile picture has been updated.\",\n      });\n    } catch (error) {\n      console.error(\"Failed to update avatar:\", error);\n      toast({\n        title: \"Upload Failed\",\n        description:\n          \"There was an error updating your avatar. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <SettingsAccount\n        initialData={{\n          displayName: userData.displayName,\n          email: userData.email,\n          bio: userData.bio || \"\",\n          avatar: userData.avatar,\n        }}\n        onUpdateAccount={handleUpdateAccount}\n        onRescanPlugins={handleRescanPlugins}\n        onAvatarChange={handleAvatarChange}\n      />\n    </div>\n  );\n};\n\nexport default AccountSettings;\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/settings/SettingsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/settings/account.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/settings/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/pages/settings/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'navigate' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Settings, User, Lock, Bell, CreditCard } from \"lucide-react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\n\nconst settingsTabs = [\n  { id: \"account\", label: \"Account\", icon: <User className=\"h-4 w-4\" /> },\n  { id: \"security\", label: \"Security\", icon: <Lock className=\"h-4 w-4\" /> },\n  {\n    id: \"notifications\",\n    label: \"Notifications\",\n    icon: <Bell className=\"h-4 w-4\" />,\n  },\n  { id: \"billing\", label: \"Billing\", icon: <CreditCard className=\"h-4 w-4\" /> },\n];\n\ninterface SettingsLayoutProps {\n  children: React.ReactNode;\n}\n\nexport function SettingsLayout({ children }: SettingsLayoutProps) {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState(\"account\");\n\n  useEffect(() => {\n    const path = location.pathname.split(\"/\").pop() || \"account\";\n    setActiveTab(path === \"settings\" ? \"account\" : path);\n  }, [location.pathname]);\n\n  return (\n    <div className=\"container mx-auto py-8 max-w-6xl\">\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Settings className=\"h-8 w-8 text-purple-400\" />\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\n      </div>\n\n      <Tabs value={activeTab} className=\"space-y-8\">\n        <TabsList className=\"w-full justify-start bg-gray-900 p-1 h-auto rounded-lg\">\n          {settingsTabs.map((tab) => {\n            const to =\n              tab.id === \"account\" ? \"/settings\" : `/settings/${tab.id}`;\n            return (\n              <Link to={to} key={tab.id} className=\"w-full\">\n                <TabsTrigger\n                  value={tab.id}\n                  className=\"w-full justify-start space-x-2 data-[state=active]:bg-gray-800 data-[state=active]:text-white\"\n                >\n                  {tab.icon}\n                  <span>{tab.label}</span>\n                </TabsTrigger>\n              </Link>\n            );\n          })}\n        </TabsList>\n\n        <TabsContent value={activeTab} className=\"mt-0\">\n          <div className=\"bg-gray-900 rounded-lg p-6\">{children}</div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/react-app-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/services/rtc.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/services/websocket.service.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/types/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/utils/initAdmin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/louisciccone/Desktop/Rythm_Daw/ui-dev/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
