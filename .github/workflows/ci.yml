name: Rythm_Daw CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CI: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Typecheck
        run: pnpm typecheck

  unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Cache browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-browsers-${{ hashFiles('**/package-lock.json') }}
      - name: Unit tests
        run: pnpm test

  e2e:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Migrate database
        run: pnpm prisma migrate deploy
      - name: E2E tests
        run: pnpm test:e2e

  ws-stress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Stress test
        run: pnpm ws:stress

  k6:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Load test
        run: pnpm k6

  a11y:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Accessibility test
        run: pnpm a11y

  chromatic:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Start Storybook
        uses: chromaui/action@v1
        with:
          token: ${{ secrets.CHROMATIC_APP_TOKEN }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          storybookBuildCommand: pnpm storybook:build

  sonarcloud:
    needs: [lint, typecheck, unit, e2e]
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: pnpm install
      - name: Run tests and collect coverage
        run: pnpm test -- --coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=rythm-daw
            -Dsonar.organization=your-org
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.qualitygate.wait=true
      - name: Fail if coverage below 80%
        run: |
          coverage=$(curl -s https://sonarcloud.io/api/measures/component?component=rythm-daw&metricKeys=coverage | jq -r '.component.measures[0].value')
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Coverage $coverage% is below threshold!"; exit 1;
          fi
      - name: 🔐  Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "Ensure test S3 bucket"
        run: |
          aws s3api head-bucket --bucket "$S3_BUCKET_NAME" || \
          aws s3api create-bucket --bucket "$S3_BUCKET_NAME" --region "$AWS_REGION" \
            ${AWS_REGION:+--create-bucket-configuration LocationConstraint=$AWS_REGION}
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
